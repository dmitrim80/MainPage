{"version":3,"sources":["assets/images/logo-blackjack.png","assets/Dmitri Morozov - resume.pdf","Main_Page/Header.js","Main_Page/Body.js","Main_Page/firebaseConfig.js","Main_Page/Main.js","Main_Page/Utilities.js","Bootstrap_Page/Header.js","Bootstrap_Page/Footer.js","Bootstrap_Page/Main.js","Main_Page/ViewIP.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","_ref","activeLink","setActiveLink","handleLinkClick","e","linkName","preventDefault","window","location","hash","React","createElement","Fragment","className","id","href","onClick","FontAwesomeIcon","icon","faGithub","faLinkedin","faCodepen","faSquareInstagram","faSquareXTwitter","faSquareFacebook","Body","role","aria-label","src","bjlogo","alt","Link","to","resume","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","Main","useState","spotlightPosition","setSpotlightPosition","x","y","useEffect","debouncedHandleScroll","func","wait","timeout","immediate","arguments","length","undefined","_len","args","Array","_key","context","this","later","apply","callNow","clearTimeout","setTimeout","debounce","handleScroll","currentActiveLink","scrollPosition","scrollY","forEach","sectionId","sectionEl","document","getElementById","sectionTop","offsetTop","sectionHeight","offsetHeight","addEventListener","removeEventListener","updateSpotlightPosition","clientX","clientY","fetch","then","response","json","async","ip","data","ipRef","doc","getDoc","exists","updateDoc","visits","increment","lastVisit","Date","console","log","catch","error","alert","setDoc","firstVisit","style","position","top","left","right","bottom","background","concat","pointerEvents","zIndex","width","height","type","placeholder","Footer","openAccordion","setOpenAccordion","codeStringHeapSort","trim","codeStringMergeSort","codeStringQuickSort","codeStringInsertionSort","codeStringSelectionSort","codeStringBubbleSort","codeStringShellSort","codeStringBucketSort","toggleAccordion","red","aria-expanded","aria-controls","aria-labelledby","ViewIP","visitorData","setVisitorData","email","setEmail","password","setPassword","user","setUser","auth","getAuth","onAuthStateChanged","getDocs","collection","docs","map","toDate","toString","fetchVisitorData","border","marginTop","visitor","key","value","onChange","target","signInWithEmailAndPassword","App","BrowserRouter","Routes","Route","path","element","Bootstrap","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.fa0bde70.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-blackjack.96aa3714.png\";","module.exports = __webpack_public_path__ + \"static/media/Dmitri Morozov - resume.8c6fcbd4.pdf\";","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSquareXTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSquareFacebook } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSquareInstagram } from \"@fortawesome/free-brands-svg-icons\";\nimport { faCodepen } from \"@fortawesome/free-brands-svg-icons\";\nimport { faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Header = ({ activeLink, setActiveLink }) => {\n  const handleLinkClick = (e, linkName) => {\n    e.preventDefault(); // Prevent default anchor link behavior\n    setActiveLink(linkName);\n    window.location.hash = linkName;\n  };\n  return (\n    <>\n      <div className=\"header-container\">\n        <div className=\"page1\">\n          <div className=\"header-box\">\n            <h1 className=\"header-h1\">\n              <b>Dmitri Morozov</b>\n            </h1>\n          </div>\n          <div className=\"textbox-h5\">\n            <h5 className=\"header-h5\">\n              <b>Software Engineer</b>\n            </h5>\n          </div>\n          <div className=\"textbox-p1\">\n            I build pixel-perfect, engaging, and accessible digital experiences.\n          </div>\n\n          <div className=\"local-links-box\">\n            <div className=\"header-links\" id=\"header-link-about\">\n              <a\n                href=\"#about\"\n                onClick={(e) => handleLinkClick(e, \"about\")}\n                className={activeLink === \"about\" ? \"active-link\" : \"\"}\n              >\n                ABOUT\n              </a>\n            </div>\n            <div className=\"header-links\" id=\"header-link-experience\">\n              <a\n                href=\"#experience\"\n                onClick={(e) => handleLinkClick(e, \"experience\")}\n                className={activeLink === \"experience\" ? \"active-link\" : \"\"}\n              >\n                EXPERIENCE\n              </a>\n            </div>\n            <div className=\"header-links\" id=\"header-link-projects\">\n              <a\n                href=\"#projects\"\n                onClick={(e) => handleLinkClick(e, \"projects\")}\n                className={activeLink === \"projects\" ? \"active-link\" : \"\"}\n              >\n                PROJECTS\n              </a>\n            </div>\n            <div className=\"header-links\"></div>\n          </div>\n\n          <div className=\"social-icons-box\">\n            <div className=\"social-icons\">\n              <a href=\"https://github.com/dmitrim80\">\n                <FontAwesomeIcon icon={faGithub} />\n              </a>\n              <a href=\"https://www.linkedin.com/in/dmitri-morozov-260b2920/\">\n                <FontAwesomeIcon icon={faLinkedin} />\n              </a>\n              <a href=\"https://codepen.io/dmitrim80\">\n                <FontAwesomeIcon icon={faCodepen} />\n              </a>\n              <a href=\"http://www.instagram.com/dmitrim80\">\n                <FontAwesomeIcon icon={faSquareInstagram} />\n              </a>\n              <a href=\"http://www.twitter.com/DmitriM80\">\n                <FontAwesomeIcon icon={faSquareXTwitter} />\n              </a>\n              <a href=\"http://www.facebook.com/dmitrim80\">\n                <FontAwesomeIcon icon={faSquareFacebook} />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport bjlogo from \"../assets/images/logo-blackjack.png\";\nimport resume from \"../assets/Dmitri Morozov - resume.pdf\";\nconst Body = () => {\n  return (\n    <>\n      <div className=\"body-container\">\n        <div className=\"more-pages\">\n          <section id=\"about\">\n            <p className=\"header-p\">\n              With a Bachelor of Science in Computer Science, my academic and\n              internship experiences have equipped me with a solid foundation in\n              software development, data structures, and algorithms. I am eager\n              to apply my knowledge and skills in a professional setting as an\n              Entry-Level Software Engineer, crafting solutions that make a\n              difference.\n            </p>\n\n            <div className=\"headline-box\">About Me</div>\n            <div>\n              As a graduate with a passion for software engineering, I have\n              always been fascinated by the ability of code to solve complex\n              problems and create impactful digital experiences. My journey in\n              computer science has been marked by a relentless pursuit of\n              knowledge, from mastering programming languages to understanding\n              the nuances of user-centric design. Outside the classroom and\n              coding environment, I'm an avid sports fan, music and theater\n              lover, and an enthusiast of marine biology and aquatic life. These\n              diverse interests have shaped my approach to problem-solving,\n              fostering a unique blend of creativity, persistence, and attention\n              to detail.\n            </div>\n          </section>\n\n          <section id=\"experience\">\n            <div className=\"headline-box\">Experience</div>\n            <div>\n              Throughout my academic career, I have undertaken various projects\n              and internships that have allowed me to apply theoretical\n              knowledge in practical settings. These experiences have honed my\n              skills in software development, project management, and team\n              collaboration. I've contributed to software projects from concept\n              to deployment, ensuring that each solution is not only functional\n              but also meets the highest standards of quality and user\n              experience.\n            </div>\n          </section>\n\n          <section id=\"projects\">\n            <ol className=\"projects-list\">\n              <a href=\"https://www.dmitricode.com\" className=\"project-link\">\n                <li>\n                  <div className=\"project-container\">\n                    <div className=\"overLay-project-container\"></div>\n                    <header className=\"header-time\">2024 — Present</header>\n                    <div className=\"project-main-content\">\n                      <p>\n                        <span className=\"project-header\">BlackJack Game</span>\n                        <span\n                          id=\"project-arrow\"\n                          role=\"img\"\n                          aria-label=\"Link to project\"\n                        >\n                          ↗\n                        </span>\n                        <img\n                          src={bjlogo}\n                          className=\"project-img\"\n                          alt=\"logo-blackjack\"\n                        />\n                      </p>\n                      <p className=\"project-description\">\n                        As part of my capstone project, I developed a\n                        fully-functional BlackJack game. This project allowed me\n                        to apply and showcase my proficiency in JavaScript,\n                        HTML, and CSS, creating a game that is not only\n                        enjoyable but also visually appealing and accessible.\n                        Responsibilities included: Designing and implementing\n                        game logic to ensure a seamless and engaging user\n                        experience. Utilizing React for the UI to create a\n                        dynamic and responsive design. Ensuring the\n                        application's performance and security using Firebase as\n                        a backend service. Collaborating with peers for code\n                        reviews and optimizations, emphasizing clean,\n                        maintainable code.\n                      </p>\n\n                      <ul\n                        className=\"skill-elements\"\n                        aria-label=\"Technologies used\"\n                      >\n                        <li>\n                          <div className=\"skill-e\">JavaScript</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">React</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">CSS</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">HTML</div>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </li>\n              </a>\n\n              \n              \n              <a href=\"https://corals.dmitrimorozov.com\" className=\"project-link\">\n                <li>\n                  <div className=\"project-container\">\n                    <div className=\"overLay-project-container\"></div>\n                    <header className=\"header-time\">2023 — Present</header>\n                    <div className=\"project-main-content\">\n                      <p id=\"project-head\">\n                        <span className=\"project-header\">\n                          Coral Database Website\n                        </span>\n                        <span\n                          id=\"project-arrow\"\n                          role=\"img\"\n                          aria-label=\"Link to project\"\n                        >\n                          ↗\n                        </span>\n                      </p>\n                      <p className=\"project-description\">\n                        Developed a vibrant website designed for marine-life\n                        enthusiasts to share and explore images of diverse coral\n                        species. This platform utilizes Google's robust database\n                        services for secure image storage, complete with user\n                        authentication to ensure privacy and safety. Users can\n                        upload and download images, update descriptions, curate\n                        personal favorites, and share their discoveries with the\n                        community. The project is actively evolving, with\n                        ongoing enhancements to enrich user experience and\n                        interaction.\n                      </p>\n\n                      <ul\n                        className=\"skill-elements\"\n                        aria-label=\"Technologies used\"\n                      >\n                        <li>\n                          <div className=\"skill-e\">JavaScript</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">React</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">CSS</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">HTML</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">Firebase</div>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </li>\n              </a>\n\n              <Link className=\"project-link\" to=\"/bootstrap\">\n                <li>\n                  <div className=\"project-container\">\n                    <div className=\"overLay-project-container\"></div>\n                    <header className=\"header-time\">2024</header>\n                    <div className=\"project-main-content\">\n                      <p id=\"project-head\">\n                        <span className=\"project-header\">\n                          8 Sorting Algorithms\n                        </span>\n                        <span\n                          id=\"project-arrow\"\n                          role=\"img\"\n                          aria-label=\"Link to project\"\n                        >\n                          ↗\n                        </span>\n                      </p>\n                      <p className=\"project-description\">\n                        Discover the essentials of sorting with \"8 Must-Know\n                        Sorting Algorithms,\" a dynamic educational tool built\n                        using JavaScript, Bootstrap, and React. This interactive\n                        webpage showcases the differences and efficiencies of\n                        various algorithms through engaging visuals and clear\n                        explanations. Whether you're a novice or a practiced\n                        coder, this project offers a practical look at\n                        algorithmic sorting, demonstrating each method's unique\n                        characteristics in an accessible format powered by\n                        modern web technologies.\n                      </p>\n\n                      <ul\n                        className=\"skill-elements\"\n                        aria-label=\"Technologies used\"\n                      >\n                        <li>\n                          <div className=\"skill-e\">React</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">Bootstrap</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">JavaScript</div>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </li>\n              </Link>\n\n              <a\n                href=\"https://1000gal.dmitrimorozov.com\"\n                className=\"project-link\"\n              >\n                <li>\n                  <div className=\"project-container\">\n                    <div className=\"overLay-project-container\"></div>\n                    <header className=\"header-time\">2018-2022</header>\n                    <div className=\"project-main-content\">\n                      <p id=\"project-head\">\n                        <span className=\"project-header\">1000gal Project</span>\n\n                        <span\n                          id=\"project-arrow\"\n                          role=\"img\"\n                          aria-label=\"Link to project\"\n                        >\n                          ↗\n                        </span>\n                      </p>\n                      <p className=\"project-description\">\n                        Explore the comprehensive journey of setting up and\n                        maintaining a 1000-gallon aquarium, documented from 2018\n                        to 2022. This project delves into the intricacies of\n                        aquatic design, ecosystem balance, and the technical\n                        challenges faced during the creation and upkeep of a\n                        large-scale aquarium. Access detailed insights and\n                        visual documentation by visiting the dedicated project\n                        page.\n                      </p>\n\n                      <ul\n                        className=\"skill-elements\"\n                        aria-label=\"Technologies used\"\n                      >\n                        <li>\n                          <div className=\"skill-e\">React</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">Bootstrap</div>\n                        </li>\n                        <li>\n                          <div className=\"skill-e\">JavaScript</div>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                </li>\n              </a>\n            </ol>\n\n            <a href={resume} className=\"project-link\">\n              <div className=\"project-container\">\n                <div className=\"overLay-project-container\"></div>\n                <div className=\"project-main-content\">\n                  <p className=\"resume\" id=\"project-head\">\n                    <span className=\"project-header\">View Full Resume</span>\n                    <span\n                      id=\"project-arrow\"\n                      role=\"img\"\n                      aria-label=\"Link to project\"\n                    >\n                      ↗\n                    </span>\n                  </p>\n                </div>\n              </div>\n            </a>\n          </section>\n\n          <section id=\"personal\">\n            <div className=\"headline-box\">Personal Interests</div>\n            <div>\n              In addition to my passion for software engineering, I maintain an\n              active lifestyle and diverse interests outside of work. Whether\n              it's hitting the gym, participating in rowing competitions,\n              cheering for my favorite football and basketball teams, or\n              exploring the wonders of marine life, these activities reflect my\n              enthusiasm for life and learning. My love for music and theater\n              also speaks to my appreciation for creativity and expression,\n              qualities that I bring to every project I undertake.\n            </div>\n          </section>\n\n          <section id=\"contact\">\n            <div className=\"headline-box\">Contact</div>\n            <div className=\"bottom-contact-box\">\n              Designed and coded in Visual Studio Code by yours truly. Built\n              with React and CSS. All text is set in the Inter font. You can\n              reach out to me at{\" \"}\n              <a\n                href=\"mailto:dmitri.m80@gmail.com\"\n                className=\"bottom-email-link\"\n              >\n                dmitri.m80@gmail.com\n              </a>\n            </div>\n          </section>\n\n          <Link className=\"viewip\"to=\"/viewip\">View IPs</Link>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Body;\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore } from \"firebase/firestore\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyA3ExZfXhbmA_xlnpk0D2PNqwSKn3ju3P8\",\n  authDomain: \"ipcount-48793.firebaseapp.com\",\n  projectId: \"ipcount-48793\",\n  storageBucket: \"ipcount-48793.appspot.com\",\n  messagingSenderId: \"731061680887\",\n  appId: \"1:731061680887:web:69dfd383e0d362e9c1f1f2\",\n  measurementId: \"G-XZRSQV0LY6\",\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\nexport { db };\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Body from \"./Body\";\nimport { debounce } from \"./Utilities\";\nimport { db } from \"./firebaseConfig\";\nimport { doc,getDoc, setDoc, updateDoc, increment } from \"firebase/firestore\";\n\nimport \"./main.css\";\n\nconst Main = () => {\n  const [activeLink, setActiveLink] = useState(\"about\");\n  const [spotlightPosition, setSpotlightPosition] = useState({\n    x: -200,\n    y: -200,\n  });\n\n  useEffect(() => {\n    // The handleScroll function that you want to debounce\n    const handleScroll = () => {\n      const sections = [\"about\", \"interests\", \"projects\"]; // Update with your section IDs\n      let currentActiveLink = \"\";\n      const scrollPosition = window.scrollY;\n\n      sections.forEach((sectionId) => {\n        const sectionEl = document.getElementById(sectionId);\n        if (sectionEl) {\n          const sectionTop = sectionEl.offsetTop;\n          const sectionHeight = sectionEl.offsetHeight;\n          // Check if the section is at least halfway in view\n          if (\n            scrollPosition >= sectionTop - sectionHeight / 2 &&\n            scrollPosition < sectionTop + sectionHeight / 2\n          ) {\n            currentActiveLink = sectionId;\n          }\n        }\n      });\n\n      setActiveLink(currentActiveLink);\n    };\n\n    // Apply debounce to the handleScroll function\n    const debouncedHandleScroll = debounce(handleScroll, 100);\n\n    window.addEventListener(\"scroll\", debouncedHandleScroll);\n    return () => window.removeEventListener(\"scroll\", debouncedHandleScroll);\n  }, []); // Note: Since debounce creates a new function, dependencies related to the effect should be stable or included in the dependency array.\n\n  useEffect(() => {\n    const updateSpotlightPosition = (e) => {\n      setSpotlightPosition({ x: e.clientX, y: e.clientY });\n    };\n\n    // Listen for mouse movement across the entire window\n    window.addEventListener(\"mousemove\", updateSpotlightPosition);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", updateSpotlightPosition);\n    };\n  }, []);\n\n  useEffect(() => {\n    // Example IP fetch and update logic\n    fetch(\"https://api.ipify.org?format=json\")\n        .then(response => response.json())\n        .then(async (data) => {\n            const ip = data.ip; // Assuming the IP address is retrieved correctly\n            const ipRef = doc(db, \"visitorIPs\", ip);\n\n            // Attempt to get the document\n            const docSnap = await getDoc(ipRef);\n            if (docSnap.exists()) {\n                // Document exists, update it\n                updateDoc(ipRef, {\n                    visits: increment(1),\n                    lastVisit: new Date()\n                })\n                .then(() => console.log(\"Document successfully updated\"))\n                .catch(error => {\n                    console.error(\"Error updating document: \", error);\n                    alert(\"Failed to update data: Insufficient permissions.\");\n                });\n            } else {\n                // Document does not exist, create it\n                setDoc(ipRef, {\n                    ip: ip,\n                    visits: 1,\n                    firstVisit: new Date(),\n                    lastVisit: new Date()\n                });\n            }\n        })\n        .catch(error => console.error(\"Error fetching IP:\", error));\n}, []);\n\n  return (\n    <>\n      <main className=\"main-box\">\n        <div\n          className=\"overlay\"\n          style={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: `radial-gradient(circle 100px at \n                ${spotlightPosition.x}px \n                ${spotlightPosition.y}px, \n                rgba(255,255,255,0.055) 0%,\n                rgba(0,0,0,0.2) 700%)`,\n            pointerEvents: \"none\", // Allow clicks to pass through\n            zIndex: 9999,\n          }}\n        ></div>\n\n        <aside>\n          <Header activeLink={activeLink} setActiveLink={setActiveLink} />\n        </aside>\n\n        <div className=\"spacer\"></div>\n\n        <section className=\"body-wrapper\">\n          <Body />\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default Main;\n","export function debounce(func, wait, immediate = false) {\n    let timeout;\n    return function(...args) {\n      const context = this;\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n  ","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header className=\"p-3 text-bg-dark\">\n      <div className=\"container\">\n        <div className=\"d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start\">\n          <a\n            href=\"/\"\n            className=\"d-flex align-items-center mb-2 mb-lg-0 text-white text-decoration-none\"\n          >\n            <svg\n              className=\"bi me-2\"\n              width=\"40\"\n              height=\"32\"\n              role=\"img\"\n              aria-label=\"Bootstrap\"\n            >\n              <use href=\"#bootstrap\"></use>\n            </svg>\n          </a>\n\n          <ul className=\"nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0\">\n            <li>\n              <a href=\"#head-h1\" className=\"nav-link px-2 text-secondary\">\n                Home\n              </a>\n            </li>\n            <li>\n              <a href=\"#head-h1\" className=\"nav-link px-2 text-white\">\n                About\n              </a>\n            </li>\n          </ul>\n\n          <form\n            className=\"col-12 col-lg-auto mb-3 mb-lg-0 me-lg-3\"\n            role=\"search\"\n          >\n            <input\n              type=\"search\"\n              className=\"form-control form-control-dark text-bg-dark\"\n              placeholder=\"Search...\"\n              aria-label=\"Search\"\n            />\n          </form>\n\n          <div className=\"text-end\">\n            <button type=\"button\" className=\"btn btn-outline-light me-2\">\n              Login\n            </button>\n            <button type=\"button\" className=\"btn btn-warning\">\n              Sign-up\n            </button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"container\">\n      <footer className=\"d-flex flex-wrap justify-content-between align-items-center py-3 my-4 border-top\">\n        <p className=\"col-md-4 mb-0 text-body-secondary\">\n          © 2024 Dmitri Morozov\n        </p>\n\n        <a\n          href=\"/\"\n          className=\"col-md-4 d-flex align-items-center justify-content-center mb-3 mb-md-0 me-md-auto link-body-emphasis text-decoration-none\"\n        >\n          <svg className=\"bi me-2\" width=\"40\" height=\"32\">\n            <use href=\"#bootstrap\"></use>\n          </svg>\n        </a>\n\n        <ul className=\"nav col-md-4 justify-content-end\">\n          <li className=\"nav-item\">\n            <a href=\"#head-h1\" className=\"nav-link px-2 text-body-secondary\">\n              Home\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a href=\"#head-h1\" className=\"nav-link px-2 text-body-secondary\">\n              About\n            </a>\n          </li>\n        </ul>\n      </footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./bootstrap_page.css\";\nconst Main = () => {\n  const [openAccordion, setOpenAccordion] = useState(null);\n\n  const codeStringHeapSort = `#Heap Sort Algorithm\n\n      def createHeap(data, length, index):\n\n      largest = index\n      left = 2 * index + 1\n      right = 2 * index + 2\n\n      if left < length and data[index] < data[left]:\n      largest = left\n\n      if right < length and data[largest] < data[right]:\n      largest = right\n\n      if largest != index:\n      data[index], data[largest] = data[largest], data[index]\n      createHeap(data, length, largest)\n\n      def heapSort(data):\n      length = len(data)\n\n      #We build max heap\n      for index in range(length, 0, -1):\n      createHeap(data, length, index)\n\n      for index in range(length -1, 0, -1):\n      data[index], data[0] = data[0], data[index]\n\n      createHeap(data, index, 0)\n\n      print(data)`.trim();\n  const codeStringMergeSort = `#Merge Sort Algorithm\n\n      def mergeSort(data):\n      \"\"\"This function determines whether the list is broken\n      into individual parts\"\"\"\n\n      if len(data) < 2:\n      return data\n\n      middle = len(data)//2\n\n      # We break the list in two parts\n      left = mergeSort(data[:middle])\n      right = mergeSort(data[middle:])\n\n      # Merge the two sorted parts into a larger piece.\n\n      print(\"The left side is: \", left)\n      print(\"The right side is: \", right)\n\n      merged = merge(left, right)\n\n      print(\"Merged \", merged)\n      return merged\n      def merge(left, right):\n      \"\"\"When left side/right side is empty, \n      It means that this is an individual item and is already sorted.\"\"\"\n\n      #We make sure the right/left side is not empty\n      #meaning that it's an individual item and it's already sorted.\n      if not len(left):\n      return left\n\n      if not len(right):\n      return right\n\n      result = []\n      leftIndex = 0\n      rightIndex = 0\n      totalLen = len(left) + len(right)\n\n      #\n      while (len(result) < totalLen):\n\n      #Perform the required comparisons and merge the two parts\n\n      if left[leftIndex] < right[rightIndex]:\n      result.append(left[leftIndex])\n      leftIndex += 1\n      else:\n      result.append(right[rightIndex])\n      rightIndex += 1\n\n      if leftIndex == len(left) or rightIndex == len(right):\n      result.extend(left[leftIndex:] or right[rightIndex:])\n\n      break\n\n      return result`.trim();\n  const codeStringQuickSort = `#Quick Sort Algorithm\n\n\n  def quickSort(data, left, right):\n      if right<= left:\n          return \n      else:\n          pivot = partition(data, left, right)\n          quickSort(data, left, pivot - 1)\n          quickSort(data, pivot + 1, right)\n  \n      return data\n  \n  def partition(data, left, right):\n      \"\"\"This function chooses a pivot point that dertermines the left and right side of the sort\"\"\"\n      pivot = data[left]\n      leftIndex = left + 1\n      rightIndex = right\n  \n      while True:\n          while leftIndex <= rightIndex and data[leftIndex] <= pivot:\n              leftIndex += 1\n          while rightIndex >= leftIndex and data[rightIndex] >= pivot:\n              rightIndex -= 1\n          if rightIndex <= leftIndex:\n              break\n          data[leftIndex], data[rightIndex] = data[rightIndex], data [leftIndex]\n          print(data)\n  \n      data[left], data[rightIndex] = data[rightIndex], data[left]\n      print(data)\n  \n      return rightIndex`.trim();\n  const codeStringInsertionSort = `#Insertion Sort Algorithm\n  Python:\n\n  def insertionSort(data):\n  \n      for scanIndex in range(1, len(data)):\n          tmp = data[scanIndex]\n  \n          minIndex = scanIndex\n  \n          while minIndex > 0 and tmp < data[minIndex - 1]:\n              data[minIndex] = data[minIndex - 1]\n              minIndex -= 1\n  \n          data[minIndex] = tmp\n  \n          print(data)\n          \n          JavaScript:\n          function insertionSort(data) {\n            for (let scanIndex = 1; scanIndex < data.length; scanIndex++) {\n                let tmp = data[scanIndex];\n                let minIndex = scanIndex;\n        \n                while (minIndex > 0 && tmp < data[minIndex - 1]) {\n                    data[minIndex] = data[minIndex - 1];\n                    minIndex -= 1;\n                }\n        \n                data[minIndex] = tmp;\n                console.log(data);\n            }\n        }`.trim();\n\n  const codeStringSelectionSort = `#Selection Sort Algorithm\nPython:\n\n  def selectionSort(data):\n  \n      for scanIndex in range(0, len(data)):\n  \n          minIndex = scanIndex\n  \n          for compIndex in range(scanIndex + 1, len(data)):\n              if data[compIndex] < data[minIndex]:\n                  minIndex = compIndex\n  \n          if minIndex != scanIndex:\n              data[scanIndex], data[minIndex] = data[minIndex], data[scanIndex]\n  \n              print(data)\n              \n              \n              JavaScript:\n              function selectionSort(data) {\n                for (let scanIndex = 0; scanIndex < data.length; scanIndex++) {\n                    let minIndex = scanIndex;\n            \n                    for (let compIndex = scanIndex + 1; compIndex < data.length; compIndex++) {\n                        if (data[compIndex] < data[minIndex]) {\n                            minIndex = compIndex;\n                        }\n                    }\n            \n                    if (minIndex !== scanIndex) {\n                        // Swap the elements\n                        let temp = data[scanIndex];\n                        data[scanIndex] = data[minIndex];\n                        data[minIndex] = temp;\n            \n                        console.log(data);\n                    }\n                }\n            }`.trim();\n\n  const codeStringBubbleSort = `#Bubble Sort Algorithm\nPython:\n\n  def bubbleSort(data):\n      lenght = len(data)\n  \n      for iIndex in range(lenght):\n          swapped = False\n  \n          for jIndex in range(0, lenght - iIndex - 1):\n  \n              if data[jIndex] > data[jIndex + 1]:\n                  data[jIndex], data[jIndex + 1] = data[jIndex + 1], data[jIndex]\n                  swapped = True\n  \n          if swapped == False:\n              break\n  \n      print(data)\n      \n      JavaScript:\n      function bubbleSort(data) {\n        let length = data.length;\n    \n        for (let iIndex = 0; iIndex < length; iIndex++) {\n            let swapped = false;\n    \n            for (let jIndex = 0; jIndex < length - iIndex - 1; jIndex++) {\n    \n                if (data[jIndex] > data[jIndex + 1]) {\n                    // Swap the elements\n                    let temp = data[jIndex];\n                    data[jIndex] = data[jIndex + 1];\n                    data[jIndex + 1] = temp;\n                    swapped = true;\n                }\n            }\n    \n            // If no two elements were swapped by inner loop, then break\n            if (!swapped) {\n                break;\n            }\n        }\n    \n        console.log(data);\n    }\n      `.trim();\n  const codeStringShellSort = `\n  #Shell Sort Algorithm\n\ndef shellSort(data, length):\n\n    gap = length//2\n\n    while gap > 0:\n        for iIndex in range(gap, length):\n\n            temp = data[iIndex]\n\n            jIndex = iIndex\n\n            while jIndex >= gap and data[jIndex - gap] > temp:\n                data[jIndex] = data[jIndex - gap]\n\n                jIndex -= gap\n\n            data[jIndex] = temp\n\n        gap //= 2\n\n    print(data)`.trim();\n\n  const codeStringBucketSort = `\n#Bucket Sort Algorithm\n\ndef bucketSort(data):\n    bucket = []\n\n    for iIndex in range(len(data)):\n        bucket.append([])\n\n    for jIndex in data:\n        index_bucket = int(10 * jIndex)\n        bucket[index_bucket].append(jIndex)\n        print(bucket)\n\n    for iIndex in range(len(data)):\n        # I used the built-in method sorted() to sort the array.\n        bucket[iIndex] = sorted(bucket[iIndex])\n\n        kIndex = 0\n\n        for iIndex in range(len(data)):\n\n            for jIndex in range(len(bucket[iIndex])):\n                data[kIndex] = bucket[iIndex][jIndex]\n                kIndex += 1\n\n    print(data)`.trim();\n\n  // Function to handle accordion toggle\n  const toggleAccordion = (id) => {\n    if (openAccordion === id) {\n      setOpenAccordion(null); // If clicked on an open accordion, close it\n    } else {\n      setOpenAccordion(id); // Else open the clicked accordion\n    }\n  };\n  return (\n    <>\n      <Header />\n\n      <h1 className=\"head-h1\" id=\"head-h1\"red>\n        8 must-know sorting algorithms\n      </h1>\n\n      <div className=\"accordion\" id=\"accordionExample\">\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className={`accordion-button ${\n                openAccordion !== \"collapseOne\" ? \"collapsed\" : \"\"\n              }`}\n              type=\"button\"\n              onClick={() => toggleAccordion(\"collapseOne\")}\n              aria-expanded={openAccordion === \"collapseOne\"}\n              aria-controls=\"collapseOne\"\n            >\n              Bubble Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className={`accordion-collapse collapse ${\n              openAccordion === \"collapseOne\" ? \"show\" : \"\"\n            }`}\n            aria-labelledby=\"headingOne\"\n          >\n            <div className=\"accordion-body\">\n              <strong>\n                Bubble sort a simple sorting algorithm that works by swapping\n                the items between them if they are in the wrong order.\n              </strong>{\" \"}\n              The worst and average-case complexity of the Bubble Sort is О(n2),\n              meaning that the data is in the opposite order we want to sort, or\n              the elements are arbitrarily distributed in the list. The\n              best-case complexity is O(n). That's the case where the data is\n              already sorted.{\" \"}\n              <p>\n                Bubble sort is used when :\n                <ul>\n                  <li>simple code is preferred;</li>\n                  <li>the complexity doesn't matter.</li>\n                </ul>\n              </p>\n              <pre>\n                <code>{codeStringBubbleSort}</code>\n              </pre>\n              ,\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className={`accordion-button ${\n                openAccordion !== \"collapseTwo\" ? \"collapsed\" : \"\"\n              }`}\n              type=\"button\"\n              onClick={() => toggleAccordion(\"collapseTwo\")}\n              aria-expanded={openAccordion === \"collapseTwo\"}\n              aria-controls=\"collapseTwo\"\n            >\n              Selection Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className={`accordion-collapse collapse ${\n              openAccordion === \"collapseTwo\" ? \"show\" : \"\"\n            }`}\n            aria-labelledby=\"headingTwo\"\n          >\n            <div className=\"accordion-body\">\n              <strong>\n                Selection Sort is an ameliorated version of Bubble Sort because\n                of the performance.\n              </strong>{\" \"}\n              Even if they have the same worst-case performance, Selection Sort\n              performs fewer swaps. Selection sort works in one of two ways: It\n              either looks for the smallest item in the list and places it in\n              the front of the list (ensuring that the item is in its correct\n              location) or looks for the largest item and places it in the back\n              of the list.\n              <pre>\n                <code>{codeStringSelectionSort}</code>\n              </pre>\n              Selection Sort has the same complexities as Bubble Sort. Selection\n              Sort is used when:\n              <ul>\n                <li>Sorting small arrays</li>\n                <li>checking off all the elements is compulsory</li>\n                <li>Less swapping is required</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className={`accordion-button ${\n                openAccordion !== \"collapseThree\" ? \"collapsed\" : \"\"\n              }`}\n              type=\"button\"\n              onClick={() => toggleAccordion(\"collapseThree\")}\n              aria-expanded={openAccordion === \"collapseThree\"}\n              aria-controls=\"collapseThree\"\n            >\n              Insertion Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className={`accordion-collapse collapse ${\n              openAccordion === \"collapseThree\" ? \"show\" : \"\"\n            }`}\n            aria-labelledby=\"headingThree\"\n          >\n            <div className=\"accordion-body\">\n              <strong>\n                Insertion is a brute-force sorting algorithm but it does fewer\n                comparisons than the Selection sort.\n              </strong>\n              <p>\n                Insertion Sort works by choosing an item and by ordering the\n                directs neighbors whether they are greater/smaller than the\n                chosen item. As the number of sorted items builds, the algorithm\n                checks new items against the sorted items and inserts the new\n                item into the right position in the list. Example :\n              </p>\n              <pre>\n                <code>{codeStringInsertionSort}</code>\n              </pre>\n              <ul>\n                <li>\n                  Insertion Sort has a worst and average complexity case of\n                  O(n2). This occurs respectively when the array is sorted in\n                  reverse order and when the elements are arbitrarily organized\n                  in the array.\n                </li>\n                <li>\n                  The best-case complexity is O(n). It occurs when the data is\n                  already sorted in the desired order.\n                </li>\n                <li>Insertion Sort is used when :</li>\n                <li>There are a few elements left to sort;</li>\n                <li>The array is small.</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingFour\">\n            <button\n              className={`accordion-button ${\n                openAccordion !== \"collapseFour\" ? \"collapsed\" : \"\"\n              }`}\n              type=\"button\"\n              onClick={() => toggleAccordion(\"collapseFour\")}\n              aria-expanded={openAccordion === \"collapseFour\"}\n              aria-controls=\"collapseFour\"\n            >\n              QuickSort\n            </button>\n          </h2>\n          <div\n            id=\"collapseFour\"\n            className={`accordion-collapse collapse ${\n              openAccordion === \"collapseFour\" ? \"show\" : \"\"\n            }`}\n            aria-labelledby=\"headingFour\"\n          >\n            <div className=\"accordion-body\">\n              <strong>\n                QuickSort is an efficient sorting algorithm. It uses the\n                divide-conquer approach to split the array into sub-arrays that\n                is recursively called to sort the elements.\n              </strong>{\" \"}\n              <p>\n                Implement a QuickSort algorithm requires to choose a pivot, then\n                split the array into two sub-arrays according to the pivot, then\n                arrange them following if they are greater/smaller than the\n                pivot. Then we sort the two sub-arrays and repeat the process\n                again.\n              </p>\n              <pre>\n                <code>{codeStringQuickSort}</code>\n              </pre>\n              <ul>\n                <li>\n                  QuickSort has worst-case complexity of O(n2). It occurs when\n                  the pivot element picked is always either the greatest or the\n                  smallest element.\n                </li>\n                <li>\n                  The best-case and average-case complexity are O(n*log(n)). It\n                  occurs when the pivot element is always the middle element or\n                  near to the middle element.\n                </li>\n                <li>QuickSort is used when :</li>\n                <li>Recursion is needed and supported;</li>\n                <li>The array is small;</li>\n                <li>There are a few elements left to sort.</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingFive\">\n            <button\n              className={`accordion-button ${\n                openAccordion !== \"collapseFive\" ? \"collapsed\" : \"\"\n              }`}\n              type=\"button\"\n              onClick={() => toggleAccordion(\"collapseFive\")}\n              aria-expanded={openAccordion === \"collapseFive\"}\n              aria-controls=\"collapseFive\"\n            >\n              MergeSort\n            </button>\n          </h2>\n          <div\n            id=\"collapseFive\"\n            className={`accordion-collapse collapse ${\n              openAccordion === \"collapseFive\" ? \"show\" : \"\"\n            }`}\n            aria-labelledby=\"headingFive\"\n          >\n            <div className=\"accordion-body\">\n              <p>\n                A Mergesort works by applying the divide and conquer approach.\n                The sort begins by breaking the dataset into individual pieces\n                and sorting the pieces. It then merges the pieces in a manner\n                that ensures that it has sorted the merged piece.\n              </p>\n              <p>\n                The sorting and merging continue until the entire dataset is\n                again a single piece\n              </p>\n              <p>\n                An example of a merge sort. First divide the list into the\n                smallest unit (1 element), then compare each element with the\n                adjacent list to sort and merge the two adjacent lists. Finally,\n                all the elements are sorted and merged.\n              </p>\n              <pre>\n                <code>{codeStringMergeSort}</code>\n              </pre>\n              <p>\n                MergeSort has worst-case and average-case complexity of\n                O(n*log(n)) which makes it fastest than some of the other\n                sorting algorithms.\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingSix\">\n            <button\n              className={`accordion-button ${\n                openAccordion !== \"collapseSix\" ? \"collapsed\" : \"\"\n              }`}\n              type=\"button\"\n              onClick={() => toggleAccordion(\"collapseSix\")}\n              aria-expanded={openAccordion === \"collapseSix\"}\n              aria-controls=\"collapseSix\"\n            >\n              Bucket Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseSix\"\n            className={`accordion-collapse collapse ${\n              openAccordion === \"collapseSix\" ? \"show\" : \"\"\n            }`}\n            aria-labelledby=\"headingSix\"\n          >\n            <div className=\"accordion-body\">\n              <p>\n                Bucket Sort algorithm work by dividing the array into buckets.\n                Then the elements in each bucket are sorted using any sorting\n                algorithms or by recursively calling the Bucket Sort algorithm.\n              </p>\n              <p>\n                The process of bucket sort can be view as a scatter-gather\n                approach. The elements are first scattered into buckets then the\n                elements of buckets are sorted. Finally, the elements are\n                gathered in order.\n              </p>\n              <pre>\n                <code>{codeStringBucketSort}</code>\n              </pre>\n              <p>\n                Bucket Sort algorithm has the worst-case complexity of O(n2). It\n                occurs when elements in the same range are put in the same\n                bucket, resulting in more elements in some buckets than others.\n                Also, it can be even worse when an inappropriate sorting\n                algorithm is used to sort elements in the buckets.\n              </p>\n              <p>\n                The best-case complexity is O(n+k). It occurs when the elements\n                are uniformly distributed in the buckets with a nearly equal\n                number of elements in each bucket. It can even be better if the\n                array is already sorted.\n              </p>\n              <p>\n                The average-case complexity is O(n). It occurs when elements are\n                randomly distributed in the array.\n              </p>\n              Bucket Sort is used when :\n              <ul>\n                <li>Bucket Sort is used when :</li>\n                <li>Input is uniformly distributed over a range.</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingSeven\">\n            <button\n              className={`accordion-button ${\n                openAccordion !== \"collapseSeven\" ? \"collapsed\" : \"\"\n              }`}\n              type=\"button\"\n              onClick={() => toggleAccordion(\"collapseSeven\")}\n              aria-expanded={openAccordion === \"collapseSeven\"}\n              aria-controls=\"collapseSeven\"\n            >\n              Shell Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseSeven\"\n            className={`accordion-collapse collapse ${\n              openAccordion === \"collapseSeven\" ? \"show\" : \"\"\n            }`}\n            aria-labelledby=\"headingSeven\"\n          >\n            <div className=\"accordion-body\">\n              <p>\n                Shell Sort is a variation of Insertion Sort. With this\n                algorithm, the array is sorted at a specific interval based on\n                the chosen sequence. The interval between the elements is\n                gradually decreased based on the sequence used. The performance\n                of the shell sort depends on the type of sequence used for a\n                given input array.\n              </p>{\" \"}\n              <pre>\n                <code>{codeStringShellSort}</code>\n              </pre>\n              <ul>\n                <li>\n                  Shell Sort has worst-case complexity less or equal than O(n2).\n                </li>\n                <li>\n                  Shell Sort has average-case and best-case complexity of\n                  O(n*log(n)).\n                </li>\n                <li>Shell Sort is used when:</li>\n                <li>Recursion exceeds a limit.</li>\n                <li>\n                  Insertion doesn't perform well when close elements are far.\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingEight\">\n            <button\n              className={`accordion-button ${\n                openAccordion !== \"collapseEight\" ? \"collapsed\" : \"\"\n              }`}\n              type=\"button\"\n              onClick={() => toggleAccordion(\"collapseEight\")}\n              aria-expanded={openAccordion === \"collapseEight\"}\n              aria-controls=\"collapseEight\"\n            >\n              Heap Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseEight\"\n            className={`accordion-collapse collapse ${\n              openAccordion === \"collapseEight\" ? \"show\" : \"\"\n            }`}\n            aria-labelledby=\"headingEight\"\n          >\n            <div className=\"accordion-body\">\n              <p>\n                Heap Sort is one of the best sorting methods being in-place and\n                with no quadratic worst-case complexity. Heap Sort uses a heap\n                data structure. A heap is a complete binary tree. It also\n                verifies such rules as:\n              </p>\n              <ul>\n                <li>children are smaller than parents;</li>\n                <li>\n                  The largest/smallest element is at the root of the heap,\n                  depending on the way you sorted it.\n                </li>\n              </ul>\n              <p>\n                To make a heap sort algorithm, we must create a heap of the\n                array first. When done, we can now write the Heap Sort\n                algorithm. The advantage with Heap Sort is that the value at the\n                root is always greater than all value, so we can put it at the\n                end of the sorted array, remove it from the heap, and then\n                heapify the binary tree again to have the greater value at the\n                top again.\n              </p>\n              <pre>\n                <code>{codeStringHeapSort}</code>\n              </pre>\n              <p>\n                Heap Sort has O(n*log(n)) time complexities for all the cases (\n                best case, average case, and worst case) making it one of the\n                most used sorting algorithms.\n              </p>\n              <p>\n                Heapsort is great when you need to know just the \"smallest\" (or\n                \"largest\") of a collection of items, without the overhead of\n                keeping the remaining items in sorted order. For example, a\n                Priority Queue.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n};\n\nexport default Main;\n","import React, { useState, useEffect } from \"react\";\nimport { db } from './firebaseConfig';\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { getAuth, signInWithEmailAndPassword, onAuthStateChanged } from \"firebase/auth\";\n\nconst ViewIP = () => {\n  const [visitorData, setVisitorData] = useState([]);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n\n  const auth = getAuth();\n\n  useEffect(() => {\n    onAuthStateChanged(auth, setUser);\n  }, []);\n\n  useEffect(() => {\n    if (user) {\n      const fetchVisitorData = async () => {\n        const querySnapshot = await getDocs(collection(db, \"visitorIPs\"));\n        const data = querySnapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n          firstVisit: doc.data().firstVisit ? doc.data().firstVisit.toDate().toString() : 'N/A',\n          lastVisit: doc.data().lastVisit ? doc.data().lastVisit.toDate().toString() : 'N/A',\n        }));\n        setVisitorData(data);\n      };\n\n      fetchVisitorData();\n    }\n  }, [user]);\n\n  const handleLogin = async () => {\n    try {\n      await signInWithEmailAndPassword(auth, email, password);\n    } catch (error) {\n      console.error(\"Authentication failed:\", error);\n    }\n  };\n\n  return (\n    <div>\n      {!user ? (\n        <div>\n          <input type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"Email\" />\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} placeholder=\"Password\" />\n          <button onClick={handleLogin}>Login</button>\n        </div>\n      ) : (\n        <div>\n          <h1>Visitor IP Addresses and Visit Counts</h1>\n          <table border=\"1\" style={{ width: \"100%\", marginTop: \"20px\" }}>\n            <thead>\n              <tr>\n                <th>IP Address</th>\n                <th>Number of Visits</th>\n                <th>First Visit</th>\n                <th>Last Visit</th>\n              </tr>\n            </thead>\n            <tbody>\n              {visitorData.map((visitor) => (\n                <tr key={visitor.id}>\n                  <td>{visitor.id}</td>\n                  <td>{visitor.visits}</td>\n                  <td>{visitor.firstVisit}</td>\n                  <td>{visitor.lastVisit}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViewIP;\n","// import React,{ useState, useEffect } from \"react\"\nimport React from \"react\";\nimport Main from \"./Main_Page/Main\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Bootstrap from \"./Bootstrap_Page/Main\";\n\nimport \"./Main_Page/main.css\";\nimport ViewIP from \"./Main_Page/ViewIP\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/viewip\" element={<ViewIP />} />\n        <Route path=\"/bootstrap\" element={<Bootstrap />} />\n        <Route path=\"/\" element={<Main />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \nimport './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}