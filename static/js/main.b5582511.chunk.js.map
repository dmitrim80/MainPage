{"version":3,"sources":["BlackJack/images/stand-button2.png","BlackJack/images/hit-button2.png","BlackJack/images/vegas-back2.png","BlackJack/images/ace_of_hearts.png","BlackJack/images/2_of_hearts.png","BlackJack/images/3_of_hearts.png","BlackJack/images/4_of_hearts.png","BlackJack/images/5_of_hearts.png","BlackJack/images/6_of_hearts.png","BlackJack/images/7_of_hearts.png","BlackJack/images/8_of_hearts.png","BlackJack/images/9_of_hearts.png","BlackJack/images/10_of_hearts.png","BlackJack/images/jack_of_hearts.png","BlackJack/images/queen_of_hearts.png","BlackJack/images/king_of_hearts.png","BlackJack/images/ace_of_diamonds.png","BlackJack/images/2_of_diamonds.png","BlackJack/images/3_of_diamonds.png","BlackJack/images/4_of_diamonds.png","BlackJack/images/5_of_diamonds.png","BlackJack/images/6_of_diamonds.png","BlackJack/images/7_of_diamonds.png","BlackJack/images/8_of_diamonds.png","BlackJack/images/9_of_diamonds.png","BlackJack/images/10_of_diamonds.png","BlackJack/images/jack_of_diamonds.png","BlackJack/images/queen_of_diamonds.png","BlackJack/images/king_of_diamonds.png","BlackJack/images/ace_of_spades.png","BlackJack/images/2_of_spades.png","BlackJack/images/3_of_spades.png","BlackJack/images/4_of_spades.png","BlackJack/images/5_of_spades.png","BlackJack/images/6_of_spades.png","BlackJack/images/7_of_spades.png","BlackJack/images/8_of_spades.png","BlackJack/images/9_of_spades.png","BlackJack/images/10_of_spades.png","BlackJack/images/jack_of_spades.png","BlackJack/images/queen_of_spades.png","BlackJack/images/king_of_spades.png","BlackJack/images/ace_of_clubs.png","BlackJack/images/2_of_clubs.png","BlackJack/images/3_of_clubs.png","BlackJack/images/4_of_clubs.png","BlackJack/images/5_of_clubs.png","BlackJack/images/6_of_clubs.png","BlackJack/images/7_of_clubs.png","BlackJack/images/8_of_clubs.png","BlackJack/images/9_of_clubs.png","BlackJack/images/10_of_clubs.png","BlackJack/images/jack_of_clubs.png","BlackJack/images/queen_of_clubs.png","BlackJack/images/king_of_clubs.png","BlackJack/images/5-chip-v2.png","BlackJack/images/10-chip-v2.png","BlackJack/images/25-chip-v2.png","BlackJack/images/50-chip-v2.png","BlackJack/images/100-chip-v2.png","BlackJack/images/250-chip-v2.png","BlackJack/images/double-button2.png","BlackJack/images/clear-button2.png","BlackJack/images/bet-button2.png","BlackJack/images/split-button.png","BlackJack/images/logo-blackjack.png","BlackJack/Deck.js","BlackJack/Card.js","BlackJack/Player.js","BlackJack/Controls.js","BlackJack/Header.js","BlackJack/GameBoard.js","BlackJack/LoadingOverlay.js","BlackJack/BlackJack.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Deck","constructor","this","cards","createDeck","suits","ranks","deck","suit","rank","push","shuffleDeck","i","length","random","Math","floor","drawCard","pop","cardImages","heartsAce","heartsTwo","heartsThree","heartsFour","heartsFive","heartsSix","heartsSeven","heartsEight","heartsNine","heartsTen","heartsJack","heartsQueen","heartsKing","diamondsAce","diamondsTwo","diamondsThree","diamondsFour","diamondsFive","diamondsSix","diamondsSeven","diamondsEight","diamondsNine","diamondsTen","diamondsJack","diamondsQueen","diamondsKing","spadesAce","spadesTwo","spadesThree","spadesFour","spadesFive","spadesSix","spadesSeven","spadesEight","spadesNine","spadesTen","spadesJack","spadesQueen","spadesKing","clubsAce","clubsTwo","clubsThree","clubsFour","clubsFive","clubsSix","clubsSeven","clubsEight","clubsNine","clubsTen","clubsJack","clubsQueen","clubsKing","cardBack","Card","_ref","isFaceDown","React","createElement","className","concat","src","alt","Player","hand","isDealer","Fragment","id","map","card","index","key","Controls","onNewGame","handleStand","handleDouble","handleHit","gameRunning","onBetPlaced","bet","buttonsHidden","handleChipClick","standPressed","handleSplit","splitAvailable","hitPressed","twoHands","setPreviousBet","clearBet","previousBet","setBet","setBetChips","playerChips","chips","value","img","chip5","chip10","chip25","chip50","chip100","chip250","btnDouble","title","onClick","undefined","style","cursor","btnStand","btnHit","btnSplit","btnBet","btnClear","height","overflow","visibility","display","gap","justifyContent","transform","chip","event","Header","playerHandValue","dealerHandValue","result","progressBarWidth","width","role","aria-label","GameBoard","onGameRunningChange","setDeck","useState","dealerHand","setDealerHand","playerHand","setPlayerHand","setGameRunning","setButtonsHidden","setPlayerHandValue","setDealerHandValue","setPlayerChips","gameMessage","setGameMessage","gameOutcome","setGameOutcome","gameOutcome1","setGameOutcome1","gameOutcome2","setGameOutcome2","showScores","setShowScores","endGameTimeout","useRef","gamePause","setGamePause","betChips","totalChipTypes","Object","keys","totalWidth","dealerFirstCardValue","setDealerFirstCardValue","isFirstRender","setStandPressed","setSplitAvailable","playerHand1","setPlayerHand1","playerHand2","setPlayerHand2","setTwoHands","playerHand1Value","setPlayerHand1Value","playerHand2Value","setPlayerHand2Value","setHitPressed","betHand1","setBetHand1","betHand2","setBetHand2","hand1TurnFinished","setHand1TurnFinished","hand2TurnFinished","setHand2TurnFinished","splitPressed","setSplitPressed","setResult","setProgressBarWidth","gameResultsCount","setGameResultsCount","totalGamesPlayed","gamesWon","gamesLost","numberOfTie","numberOfBlackJacks","numberOfSplits","numberOfDoubles","numberOfBusts","numberOfWinsWith2Cards","totalAmountOfBets","totalAmountOfBetsWon","totalAmountOfBetsLost","newBet","sendingPreviousBet","arguments","prev","prevChips","console","log","prevBet","asignPreviousBet","endGame","prevResult","current","setTimeout","clearTimeout","newHandValue","updatedDealerHand","updatedDealerHandValue","calculateHandValue","drawCardforDealer","newCard","newHand","finishDealerTurn","finalDealerHand","finalDealerHandValue","outcome1","outcome2","outcome","newOutcome","updatedPlayerHand1","updatedPlayerHand2","updatedPlayerHand","total","aceCount","forEach","useEffect","newWidth","handleGameResult","splitHand1","preBet","betOneHand","bet1","bet2","betOutcome","bet1Outcome","bet2Outcome","newOutcomeMessage","newOutcomeMessage1","newOutcomeMessage2","position","entries","_ref2","chipType","imgSrc","count","Array","from","_","chipIndex","replace","bottom","left","newPlayerHandValue","handleNewGame","newDeck","playerFirstCard","playerSecondCard","dealerFirstCard","dealerSecondCard","dealerHandValueOneCard","amount","stopPropagation","currentChips","newChips","playerHand1SecondCard","playerHand2SecondCard","resultHand2","resultHand1","LoadingOverlay","isVisible","LOGO","BlackJack","isLoading","setIsLoading","opacity","setOpacity","isGameActive","setIsGameActive","fadeOutTimer","removeOverlayTimer","isRunning","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,kBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,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","file":"static/js/main.b5582511.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stand-button2.b6985f69.png\";","module.exports = __webpack_public_path__ + \"static/media/hit-button2.2121fae0.png\";","module.exports = __webpack_public_path__ + \"static/media/vegas-back2.6fd38ed5.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_hearts.41453bfa.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_hearts.f97ad85b.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_hearts.1c16fe10.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_hearts.5ad913da.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_hearts.8f6a2068.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_hearts.9cd2258c.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_hearts.a9afa10f.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_hearts.e6c01b13.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_hearts.cdb8fda5.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_hearts.2e6327a6.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_hearts.260cdba6.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_hearts.cf894646.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_hearts.37b5b9d7.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_diamonds.60b16fda.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_diamonds.0b5b5249.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_diamonds.b529e1c1.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_diamonds.58bd0a63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_diamonds.e27b4b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_diamonds.ee5053d4.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_diamonds.df3e8e93.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_diamonds.8afee604.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_diamonds.86608eb9.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_diamonds.4324d712.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_diamonds.ac2092c1.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_diamonds.d5647c19.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_diamonds.1a5882a6.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_spades.ce4f163f.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_spades.2354275d.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_spades.ad02dc95.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_spades.df185c63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_spades.aa8a0720.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_spades.5d221b2a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_spades.c0f5e5f9.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_spades.74766755.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_spades.e5b29fde.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_spades.2401fe36.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_spades.92aff044.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_spades.6d100fc3.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_spades.9b18a729.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_clubs.07d1c180.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_clubs.c83a7af4.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_clubs.23a7a6ac.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_clubs.02deab49.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_clubs.3781bf44.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_clubs.9c2fdf6a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_clubs.112be1df.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_clubs.6ed0b85e.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_clubs.784ea770.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_clubs.c29b28f3.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_clubs.1861c1e4.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_clubs.9e84dd75.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_clubs.2ad9bff3.png\";","module.exports = __webpack_public_path__ + \"static/media/5-chip-v2.5a524f75.png\";","module.exports = __webpack_public_path__ + \"static/media/10-chip-v2.3a023e24.png\";","module.exports = __webpack_public_path__ + \"static/media/25-chip-v2.c7981237.png\";","module.exports = __webpack_public_path__ + \"static/media/50-chip-v2.b270a5eb.png\";","module.exports = __webpack_public_path__ + \"static/media/100-chip-v2.56f3f00f.png\";","module.exports = __webpack_public_path__ + \"static/media/250-chip-v2.b303ef66.png\";","module.exports = __webpack_public_path__ + \"static/media/double-button2.ae841ef6.png\";","module.exports = __webpack_public_path__ + \"static/media/clear-button2.00626382.png\";","module.exports = __webpack_public_path__ + \"static/media/bet-button2.0ae68190.png\";","module.exports = __webpack_public_path__ + \"static/media/split-button.97e0472c.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-blackjack.96aa3714.png\";","class Deck{\n    constructor(){\n        this.cards = this.createDeck();\n    }\n\n    createDeck(){\n        const suits = [\"hearts\", \"diamonds\",\"spades\",\"clubs\"];\n        const ranks = [\"ace\", \"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"jack\",\"queen\",\"king\"];\n        const deck = [];\n        \n        for (const suit of suits){\n            for(const rank of ranks){\n                deck.push({suit,rank});\n            }\n        }\n        return deck;\n    }\n    \n    shuffleDeck(){\n        for(let i = this.cards.length - 1; i>0;i-- ){\n            const random = Math.floor(Math.random()*(i+1));\n            [this.cards[i],this.cards[random]] = [this.cards[random],this.cards[i]];\n        }\n    }\n\n    drawCard(){\n        return this.cards.pop();\n    }\n}\nexport default Deck;","import React from 'react'\nimport cardBack from './images/vegas-back2.png';\nimport heartsAce from './images/ace_of_hearts.png';\nimport heartsTwo from './images/2_of_hearts.png';\nimport heartsThree from './images/3_of_hearts.png';\nimport heartsFour from './images/4_of_hearts.png';\nimport heartsFive from './images/5_of_hearts.png';\nimport heartsSix from './images/6_of_hearts.png';\nimport heartsSeven from './images/7_of_hearts.png';\nimport heartsEight from './images/8_of_hearts.png';\nimport heartsNine from './images/9_of_hearts.png';\nimport heartsTen from './images/10_of_hearts.png';\nimport heartsJack from './images/jack_of_hearts.png';\nimport heartsQueen from './images/queen_of_hearts.png';\nimport heartsKing from './images/king_of_hearts.png';\n\nimport diamondsAce from './images/ace_of_diamonds.png';\nimport diamondsTwo from './images/2_of_diamonds.png';\nimport diamondsThree from './images/3_of_diamonds.png';\nimport diamondsFour from './images/4_of_diamonds.png';\nimport diamondsFive from './images/5_of_diamonds.png';\nimport diamondsSix from './images/6_of_diamonds.png';\nimport diamondsSeven from './images/7_of_diamonds.png';\nimport diamondsEight from './images/8_of_diamonds.png';\nimport diamondsNine from './images/9_of_diamonds.png';\nimport diamondsTen from './images/10_of_diamonds.png';\nimport diamondsJack from './images/jack_of_diamonds.png';\nimport diamondsQueen from './images/queen_of_diamonds.png';\nimport diamondsKing from './images/king_of_diamonds.png';\n\nimport spadesAce from './images/ace_of_spades.png';\nimport spadesTwo from './images/2_of_spades.png';\nimport spadesThree from './images/3_of_spades.png';\nimport spadesFour from './images/4_of_spades.png';\nimport spadesFive from './images/5_of_spades.png';\nimport spadesSix from './images/6_of_spades.png';\nimport spadesSeven from './images/7_of_spades.png';\nimport spadesEight from './images/8_of_spades.png';\nimport spadesNine from './images/9_of_spades.png';\nimport spadesTen from './images/10_of_spades.png';\nimport spadesJack from './images/jack_of_spades.png';\nimport spadesQueen from './images/queen_of_spades.png';\nimport spadesKing from './images/king_of_spades.png';\n\nimport clubsAce from './images/ace_of_clubs.png';\nimport clubsTwo from './images/2_of_clubs.png';\nimport clubsThree from './images/3_of_clubs.png';\nimport clubsFour from './images/4_of_clubs.png';\nimport clubsFive from './images/5_of_clubs.png';\nimport clubsSix from './images/6_of_clubs.png';\nimport clubsSeven from './images/7_of_clubs.png';\nimport clubsEight from './images/8_of_clubs.png';\nimport clubsNine from './images/9_of_clubs.png';\nimport clubsTen from './images/10_of_clubs.png';\nimport clubsJack from './images/jack_of_clubs.png';\nimport clubsQueen from './images/queen_of_clubs.png';\nimport clubsKing from './images/king_of_clubs.png';\n\nconst cardImages = {\n    \"hearts-ace\": heartsAce,\n     \"hearts-two\": heartsTwo,\n     \"hearts-three\":heartsThree,\n     \"hearts-four\":heartsFour ,\n     \"hearts-five\":heartsFive ,\n     \"hearts-six\":heartsSix ,\n     \"hearts-seven\":heartsSeven ,\n     \"hearts-eight\":heartsEight, \n     \"hearts-nine\":heartsNine ,\n     \"hearts-ten\":heartsTen ,\n     \"hearts-jack\":heartsJack ,\n     \"hearts-queen\":heartsQueen ,\n     \"hearts-king\":heartsKing ,\n     \n     \"diamonds-ace\": diamondsAce,\n     \"diamonds-two\": diamondsTwo,\n     \"diamonds-three\":diamondsThree,\n     \"diamonds-four\":diamondsFour ,\n     \"diamonds-five\":diamondsFive ,\n     \"diamonds-six\":diamondsSix ,\n     \"diamonds-seven\":diamondsSeven ,\n     \"diamonds-eight\":diamondsEight, \n     \"diamonds-nine\":diamondsNine ,\n     \"diamonds-ten\":diamondsTen ,\n     \"diamonds-jack\":diamondsJack ,\n     \"diamonds-queen\":diamondsQueen ,\n     \"diamonds-king\":diamondsKing ,\n    \n     \"spades-ace\": spadesAce,\n     \"spades-two\": spadesTwo,\n     \"spades-three\":spadesThree,\n     \"spades-four\":spadesFour ,\n     \"spades-five\":spadesFive ,\n     \"spades-six\":spadesSix ,\n     \"spades-seven\":spadesSeven ,\n     \"spades-eight\":spadesEight, \n     \"spades-nine\":spadesNine ,\n     \"spades-ten\":spadesTen ,\n     \"spades-jack\":spadesJack ,\n     \"spades-queen\":spadesQueen ,\n     \"spades-king\":spadesKing ,\n    \n     \"clubs-ace\": clubsAce,\n     \"clubs-two\": clubsTwo,\n     \"clubs-three\":clubsThree,\n     \"clubs-four\":clubsFour ,\n     \"clubs-five\":clubsFive ,\n     \"clubs-six\":clubsSix ,\n     \"clubs-seven\":clubsSeven ,\n     \"clubs-eight\":clubsEight, \n     \"clubs-nine\":clubsNine ,\n     \"clubs-ten\":clubsTen ,\n     \"clubs-jack\":clubsJack ,\n     \"clubs-queen\":clubsQueen ,\n     \"clubs-king\":clubsKing ,\n     \"back\": cardBack,\n  };\n\n\nconst Card = ({suit,rank, isFaceDown}) => {\n  // const cardImage = isFaceDown ? cardBack : cardImages[`${suit}-${rank}`];\n  \n    return (\n      <div className=\"card-box\">\n      <div className={`card-content ${!isFaceDown ? 'flip' : ''}`}>\n        <div className=\"card-front\">\n          <img src={cardImages[`${suit}-${rank}`]} alt={`${rank} of ${suit}`} />\n        </div>\n        <div className=\"card-back\">\n          <img src={cardBack} alt=\"Card Back\" />\n        </div>\n      </div>\n    </div>\n    )\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card';\nimport PropTypes from 'prop-types';\n\nconst Player = ({hand,isDealer}) => {\n\n\n\n  return (\n    <>\n        <div className={`${isDealer ? 'dealer-hand' : 'player-hand'}`}>\n            {hand.length > 0 ? (\n            <div id=\"hand\">\n            {hand.map((card, index) => (\n                <Card key={index} suit={card.suit} rank={card.rank} isFaceDown={card.isFaceDown} />\n            ))}\n            </div>\n             ) : (\n            <>\n            </>\n        )}\n        </div>\n\n    </>\n  );\n}\n\nPlayer.propTypes = {\n    hand: PropTypes.array,\n    isDealer: PropTypes.bool,\n}\n\nexport default Player","import React from 'react';\nimport chip5 from './images/5-chip-v2.png';\nimport chip10 from './images/10-chip-v2.png';\nimport chip25 from './images/25-chip-v2.png';\nimport chip50 from './images/50-chip-v2.png';\nimport chip100 from './images/100-chip-v2.png';\nimport chip250 from './images/250-chip-v2.png';\nimport btnStand from './images/stand-button2.png';\nimport btnDouble from './images/double-button2.png';\nimport btnHit from './images/hit-button2.png';\nimport btnClear from './images/clear-button2.png';\nimport btnBet from './images/bet-button2.png';\nimport btnSplit from './images/split-button.png';\n\nconst Controls = ({ onNewGame, \n                    handleStand, \n                    handleDouble, \n                    handleHit, \n                    gameRunning, \n                    onBetPlaced,\n                    bet,\n                    buttonsHidden,\n                    handleChipClick,\n                    standPressed,\n                    handleSplit,\n                    splitAvailable,\n                    hitPressed,\n                    twoHands,\n                    setPreviousBet,\n                    clearBet,\n                    previousBet,\n                    setBet,\n                    setBetChips,\n                    playerChips,\n                    }) => \n    {\n    const chips = [\n        { value: 5, img: chip5 },\n        { value: 10, img: chip10 },\n        { value: 25, img: chip25 },\n        { value: 50, img: chip50 },\n        { value: 100, img: chip100 },\n        { value: 250, img: chip250 },\n    ];\n\n    return (\n        <>\n        \n            <div id='buttons-container'>\n                {gameRunning ? (\n                    <>\n                        {!buttonsHidden && (\n                            <>\n                            <img    \n                                    src={btnDouble}\n                                    className={`btn-double ${standPressed || hitPressed ? 'disabled' : ''}`}\n                                    alt='double-button' \n                                    title=\"Double\"\n                                    onClick={!standPressed ? ()=>handleDouble() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnStand} \n                                    className={`btn-stand ${standPressed ? 'disabled' : ''}`}\n                                    alt='stand-button' \n                                    title=\"Stand\"\n                                    onClick={!standPressed ? ()=>handleStand() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnHit} \n                                    className={`btn-hit ${standPressed ? 'disabled': ''}`}\n                                    alt='hit-button' \n                                    title=\"Hit\"\n                                    onClick={!standPressed ? ()=>handleHit() : undefined}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnSplit} \n                                    className={`btn-split ${(standPressed || !splitAvailable || hitPressed )? 'disabled': ''}`}\n                                    alt='split-button' \n                                    title=\"Split\"\n                                    onClick={() => !standPressed && handleSplit()}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            \n                            </>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        <img \n                            src={btnBet} \n                            className='btn-new-game' \n                            alt='bet-button' \n                            title=\"Place A Bet\"\n                            onClick={() => bet === 0 ? onBetPlaced(0):onNewGame()}\n                        />\n                        <img \n                            src={btnClear} \n                            className='btn-clear-bet' \n                            alt='clear-button' \n                            title=\"Clear\"\n                            onClick={() => {\n                                if(previousBet>0){\n                                    setBetChips([]);\n                                }else{\n                                    onBetPlaced(0);\n                                }\n                                \n                            }}\n                        />\n                    </>\n                )}\n            </div>\n            \n            <div id='chips-row-wrapper-arrows' style={{\n                                        height: 'auto', \n                                        overflow: 'hidden'}}>\n                <div id='pointer-row-animation' style={{\n                                                visibility: !gameRunning ? 'visible' : 'hidden', \n                                                display: 'flex', \n                                                gap: '44px', \n                                                justifyContent: 'center', \n                                                transform: 'translateY(3px)'}}>\n\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                </div>\n            </div>\n            <div id='chips-row-wrapper' style={{ visibility: gameRunning ? 'hidden' : 'visible' }}>\n\n                {chips.map((chip, index) => (\n                <img key={index}\n                    src={chip.img}\n                    alt={`Chip ${chip.value}`}\n                    title={`$${chip.value}`}\n                    className='chip-img'\n                    onClick={(event) => {\n                        if(chip.value > playerChips){\n                            return;\n                        }else{\n                            if(previousBet > 0){\n                                setPreviousBet(0);\n                                setBet(0);\n                                setBetChips([]);\n                                onBetPlaced(chip.value); \n                                handleChipClick(chip.value, chip.img, event);\n                            }else{\n                                onBetPlaced(chip.value); \n                                handleChipClick(chip.value, chip.img, event);\n                            }\n                        }\n                        \n                        \n                    }}\n                    style={{ cursor: 'pointer' }} />\n                ))}\n                \n            </div>  \n        </>\n    );\n};\n\nexport default Controls;","import React from 'react'\n\n\nconst Header = ({playerHandValue,dealerHandValue,result,bet,playerChips,progressBarWidth}) => {\n  return (\n    <>\n      <div id='blackjack-header-container'>\n        <div id='chips-count'>{`$${playerChips}`}</div>\n        <div id='games-count'>\n          <div id='games-count-filler' style={{width:`${progressBarWidth}%`}}></div>\n        </div>\n        {/* <div id='game-result'>{result}</div>  */}\n        <span id='game-settings' role='img' aria-label=\"Settings\">⚙️</span>\n      </div>\n      <div id='deck-dealer-row'>\n        {/* <div id='discard-tray'>{<img id='card-image-left-corner' alt='back-image' src={BackCard} />}</div>\n        <div id='new-deck'>{<img id='card-image-right-corner' alt='back-image' src={BackCard} />}</div> */}\n      </div>\n    </>\n  )\n}\n\nexport default Header","import React, { useEffect, useState,useRef } from \"react\";\nimport Deck from './Deck';\nimport Player from './Player';\nimport Controls from \"./Controls\";\nimport Header from \"./Header\";\nimport btnStand from './images/stand-button2.png';\nimport btnHit from './images/hit-button2.png';\n\n\nconst GameBoard = ({ onGameRunningChange }) => {\n    const [deck, setDeck] = useState(null);\n    const [dealerHand, setDealerHand] = useState([]);\n    const [playerHand, setPlayerHand] = useState([]);\n    const [gameRunning, setGameRunning] = useState(false);\n    const [buttonsHidden,setButtonsHidden] = useState(false);\n    const [playerHandValue, setPlayerHandValue] = useState(0);\n    const [dealerHandValue, setDealerHandValue] = useState(0);\n    const [playerChips, setPlayerChips] = useState(1000);\n    const [bet, setBet] = useState(0);\n    const [gameMessage, setGameMessage] = useState(\"Place a bet...\");\n    const [gameOutcome, setGameOutcome] = useState(\"\");\n    const [gameOutcome1, setGameOutcome1] = useState(\"\");\n    const [gameOutcome2, setGameOutcome2] = useState(\"\");\n    const [showScores, setShowScores] = useState(false);\n    const endGameTimeout = useRef();\n    const [gamePause,setGamePause] = useState(false);\n    \n    const [betChips,setBetChips] = useState([]);\n    const chipWidth = 40;\n    const gap = 0.1;\n    const [previousBet,setPreviousBet] = useState(0);\n    const totalChipTypes = Object.keys(betChips).length;\n    const totalWidth = totalChipTypes * chipWidth + (totalChipTypes - 1) * gap;\n    const [dealerFirstCardValue,setDealerFirstCardValue] = useState(0);\n    const isFirstRender = useRef(true);\n    const [standPressed, setStandPressed] = useState(false);\n    const [splitAvailable,setSplitAvailable] = useState(true);\n    const [playerHand1,setPlayerHand1] = useState([]);\n    const [playerHand2,setPlayerHand2] = useState([]);\n    const [twoHands,setTwoHands] = useState(false);\n    const [playerHand1Value,setPlayerHand1Value]= useState(0);\n    const [playerHand2Value,setPlayerHand2Value]=useState(0);\n    const [hitPressed,setHitPressed] = useState(false);\n    const [betHand1,setBetHand1] = useState(0);\n    const [betHand2,setBetHand2] = useState(0);\n    const [hand1TurnFinished,setHand1TurnFinished] = useState(false);\n    const [hand2TurnFinished,setHand2TurnFinished] = useState(false);\n    const [splitPressed,setSplitPressed] = useState(false);\n\n    const [result,setResult] = useState(\"\");\n    const [progressBarWidth,setProgressBarWidth] = useState(10);\n    const [gameResultsCount, setGameResultsCount] = useState({\n        totalGamesPlayed: 0,\n        gamesWon: 0,\n        gamesLost: 0,\n        numberOfTie: 0,\n        numberOfBlackJacks: 0,\n        numberOfSplits: 0,\n        numberOfDoubles: 0,\n        numberOfBusts: 0,\n        numberOfWinsWith2Cards: 0,\n        totalAmountOfBets:0,\n        totalAmountOfBetsWon:0,\n        totalAmountOfBetsLost:0\n    });\n\n    const clearBet = () => {\n        // Assuming you want to clear the bet and return the bet amount to the player's chips only if the bet hasn't been played yet\n        if (!gameRunning) {\n            setPlayerChips((prevChips) => prevChips + bet); // Return the current bet amount to the player's chips\n        }\n        setBet(0); // Reset the current bet to 0\n        setPreviousBet(0); // Reset the previous bet to 0\n        // Additional logic as needed\n    };\n    \n    const handleGameResult = () => {\n        \n        console.log(\"Finishing game round summary...\");\n        let splitHand1=\"\";\n        let splitHand2=\"\";\n\n        let preBet = previousBet;\n        let chips = playerChips;\n        let betOneHand = bet;\n        let bet1 = betHand1;\n        let bet2 = betHand2;\n        let betOutcome = 0;\n        let bet1Outcome=0;\n        let bet2Outcome=0;\n\n        let newOutcomeMessage =\"\";\n        let newOutcomeMessage1=\"\";\n        let newOutcomeMessage2=\"\";\n\n        // let finalOutcome;\n        console.log(\"Previous Bet:\",preBet);\n        console.log(\"Player chips after bet:\",chips);\n        console.log(\"Player bet single hand:\",betOneHand);\n        console.log(\"Player bet split hand1:\",bet1);\n        console.log(\"Player bet split hand2:\",bet2);\n\n        if(splitPressed){\n            if(gameOutcome2===\"\" || gameOutcome1 ===\"\"){\n                return;\n            }else{\n                switch(gameOutcome1) {\n                    case \"PlayerWins BlackJack\":\n                        newOutcomeMessage1 = `BlackJack 1st hand, win: ${bet1*1.5}`;\n                        bet1Outcome = bet1*1.5;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                            \n                        break;\n                    case \"DealerWins BlackJack\":\n                        newOutcomeMessage1 = `BlackJack, Dealer wins...1st hand -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        break;\n                    case \"DealerWins Bust\":\n                        newOutcomeMessage1 = `Bust! Dealer Wins! 1st hand  -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        break;\n                    case \"DealerWins\":\n                        newOutcomeMessage1 = `Dealer Wins...1st hand -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        break;\n                    case \"PlayerWins Bust\":\n                        newOutcomeMessage1 = `Dealer Bust...1st hand Win! +$${bet1}`;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        bet1Outcome = bet1;\n                        break;\n                    case \"PlayerWins\":\n                        newOutcomeMessage1 = `1st Hand Win! +$${bet1}!`;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        bet1Outcome = bet1;\n                        break;\n                    case \"Push\":\n                        newOutcomeMessage1 = `Push! 1st Hand Tie... Bet returned: $${bet1}`;\n                        splitHand1 = \"1st Hand - Push\";\n                        bet1Outcome = 0;\n                        \n                        break;\n                    default:\n                        newOutcomeMessage1 = \"Unknown outcome.\";\n                        splitHand1 = \"1st Hand - Unknown\";\n                        break;\n                }\n                switch(gameOutcome2) {\n                    case \"PlayerWins BlackJack\":\n                        newOutcomeMessage2 = `BlackJack 2nd hand, win: ${bet2*1.5}`;\n                        bet2Outcome = bet2*1.5;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        break;\n                    case \"DealerWins BlackJack\":\n                        newOutcomeMessage2 = `BlackJack, Dealer wins...2nd hand -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        break;\n                    case \"DealerWins Bust\":\n                        newOutcomeMessage2 = `Bust! Dealer Wins! 2nd hand  -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        break;\n                    case \"DealerWins\":\n                        newOutcomeMessage2 = `Dealer Wins...2nd hand -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        break;\n                    case \"PlayerWins Bust\":\n                        newOutcomeMessage2 = `Dealer Bust...2nd hand Win! +$${bet2}`;\n                        splitHand1 = \"2nd Hand - Player Wins\";\n                        bet2Outcome = bet2;\n                        break;\n                    case \"PlayerWins\":\n                        newOutcomeMessage2 = `2nd Hand Win! +$${bet2}!`;\n                        splitHand1 = \"2nd Hand - Player Wins\";\n                        bet2Outcome = bet2;\n                        break;\n                    case \"Push\":\n                        newOutcomeMessage2 = `Push! 1st Hand Tie... Bet returned: $${bet2}`;\n                        splitHand1 = \"2nd Hand - Push\";\n                        bet2Outcome = bet2;\n                        break;\n                    default:\n                        newOutcomeMessage2 = \"Unknown outcome.\";\n                        break;\n                }\n                let finalMessage = newOutcomeMessage1 + \"\\n \" +newOutcomeMessage2;\n                setGameMessage(finalMessage);\n                console.log(\"split hand1:\",splitHand1,\"split hand2:\",splitHand2);\n            }\n        }else{\n            switch(gameOutcome) {\n                case \"PlayerWins BlackJack\":\n                    newOutcomeMessage = `BlackJack, You Won +$${betOneHand*1.5}!!!`;\n                    betOutcome =  betOneHand *1.5;\n                    \n                    break;\n                case \"DealerWins BlackJack\":\n                    newOutcomeMessage = `BlackJack, Dealer wins... -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    break;\n                case \"DealerWins Bust\":\n                    newOutcomeMessage = `Bust! Dealer Wins! -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    break;\n                case \"DealerWins\":\n                    newOutcomeMessage = `Dealer Wins... -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    break;\n                case \"PlayerWins Bust\":\n                    newOutcomeMessage = `Dealer Bust... Player Wins! +$${betOneHand}`;\n                    betOutcome = betOneHand;\n                    break;\n                case \"PlayerWins\":\n                    newOutcomeMessage = `You Won +$${betOneHand}!`;\n                    betOutcome = betOneHand;\n                    break;\n                case \"Push\":\n                    newOutcomeMessage = `Push! Tie... Bet returned: $${betOneHand}`;\n                    betOutcome = 0;\n                    break;\n                default:\n                    newOutcomeMessage = \"Unknown outcome.\";\n                    break;\n            }\n            console.log(\"newOutcomeMessage:\",newOutcomeMessage);\n            setGameMessage(newOutcomeMessage);\n            \n        }\n        if (newOutcomeMessage === \"\"){\n            console.log(\"split outcome\");\n            console.log(\"Player Chips after the bet:\",chips);\n            console.log(\"Outcome of 1st Hand:\",newOutcomeMessage1);\n            console.log(\"Bet result:\",bet1Outcome);\n\n            \n            console.log(\"Outcome of 2nd Hand:\",newOutcomeMessage2);\n            console.log(\"Bet result:\",bet2Outcome);\n            betOutcome= bet2Outcome + bet1Outcome + bet1+bet2;\n            console.log(\"Final Bet outcome, sum of 2 outcomes + two bets:\",betOutcome);\n            chips = betOutcome + chips;\n            console.log(\"Player chips update:\",chips);\n            setPlayerChips(chips);\n            \n        }else{\n            console.log(\"Single Hand Outcome\");\n            console.log(\"Player Chips after the bet:\",chips);\n            console.log(\"Outcome of a Sing Hand:\",newOutcomeMessage);\n            console.log(\"betOutcome:\",betOutcome,\" add with betOneHand:\",betOneHand);\n            betOutcome = betOutcome + betOneHand;\n            console.log(\"Bet result bet + betOutcome:\",betOutcome);\n            chips = betOutcome +chips;\n            console.log(\"Player chips updated:\",chips);\n            setPlayerChips(chips);\n            \n        }       \n        \n        endGame();\n    }    \n\n    \n    const handleSplit = ()=>{\n        \n        if (playerChips >= bet && !gamePause)\n        {\n            setButtonsHidden(true);\n            setSplitPressed(true);\n            const betHand1 = bet;\n            const betHand2 = bet;\n            setBetHand1(betHand1);\n            setBetHand2(betHand2);\n            setPlayerChips(playerChips-bet);\n            \n            const newDeck = deck;\n            const playerHand1SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerHand2SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerHand1 = [playerHand[0],playerHand1SecondCard];\n            const playerHand2 = [playerHand[1],playerHand2SecondCard];\n            setPlayerHand1(playerHand1);\n            setPlayerHand2(playerHand2);\n            setTwoHands(true);\n            setPlayerHand([]);\n            setTimeout(()=>{\n                setPlayerHand1(playerHand1.map(card => ({...card,isFaceDown: false})))\n                setPlayerHand2(playerHand2.map(card => ({...card,isFaceDown: false})))\n            },500);\n            const playerHand1Value = calculateHandValue(playerHand1);\n            const playerHand2Value = calculateHandValue(playerHand2);\n            setPlayerHand1Value(playerHand1Value);\n            setPlayerHand2Value(playerHand2Value);\n            setPlayerHandValue(0);\n            \n            if(playerHand1Value===21 && playerHand2Value ===21){\n                let gameMessage = `Wow! Two BlackJack... you won $${betHand1*2.5+betHand2*2.5}`;\n                setPlayerChips(playerChips+betHand1*2.5+betHand2*2.5);\n                setGameMessage(gameMessage);\n                let result = \"Push\";\n                setResult(result);\n                setPreviousBet(betHand1);\n                console.log(\"Setting Previous Bet...\");\n                endGame();\n            }else{\n                //checking turn for hand2 during split\n                if(playerHand2Value === 21){\n                    let resultHand2 = `Hand2 BlackJack you won ${betHand2*2.5}`;\n                    setBetHand2(betHand2*2.5);\n                    setHand2TurnFinished(true);\n                    console.log(resultHand2);\n                }else{\n                    let gameMessage = `What do you want to do? Hit or Stand`;                        \n                    setGameMessage(gameMessage);\n                }\n                //checking turn for hand1 during split\n                if(playerHand1Value === 21){\n                    let resultHand1 = `Hand1 BlackJack you won ${betHand1*2.5}`;\n                    setBetHand1(betHand1*2.5);\n                    setHand1TurnFinished(true);\n                    console.log(resultHand1);\n                }\n                else{\n                    let gameMessage = \"What do you want to do? Hit or Stand\"\n                    setGameMessage(gameMessage);\n\n                }\n                \n\n            }\n        }else{\n            setGameMessage(\"Not enough chips for split...\");\n            return;\n        }\n        \n\n\n    }\n    const handleChipClick = (amount, imgSrc, event) => {\n        event.stopPropagation();\n        \n\n        setBetChips(currentChips => {\n            // Create a new object to avoid direct state mutation\n            const newChips = { ...currentChips };\n            const chipType = `chip${amount}`;\n\n            if (newChips[chipType]) {\n                newChips[chipType].count += 1;\n                // Adjust position logic as necessary\n                // newChips[chipType].position += 10; \n            } else {\n                newChips[chipType] = { imgSrc, count: 1, position: 0 };\n            }\n\n            return newChips;\n        });\n    };\n\n    const onBetPlaced = (newBet, sendingPreviousBet = false) => {\n        if (gamePause) {\n            setGameMessage(\"Game Paused...\");\n            return;\n        }else if (newBet === 0) {\n            setPlayerChips(prev => prev + bet);\n            setGameMessage(\"Place A Bet...\");\n            setBet(0);\n            setBetChips([]);\n        }else if (!gameRunning && playerChips >= newBet) {\n            if(sendingPreviousBet){\n                setPlayerChips(prevChips => prevChips - newBet);\n                console.log(\"player chips being changed\");\n                console.log(bet);\n            }else{\n                setBet(prevBet => prevBet + newBet);\n                setPlayerChips(prevChips => prevChips - newBet);\n                console.log(\"player chips being changed\");\n                console.log(\"bet being changed\");\n            }\n            \n        } else {\n            return;\n        }\n    };\n    \n    \n    const assignGameResults = () =>{\n        setGameResultsCount(prevResult =>({\n            ...prevResult, \n            totalGamesPlayed: prevResult.totalGamesPlayed+1\n        }));\n    }\n    \n    \n    const handleNewGame = () => {\n        \n\n        console.log(\"playerChips after bet:\",playerChips);\n        console.log(\"bet:\",bet);\n        \n        if (previousBet > playerChips){\n            setGameMessage(`Not enough chips, change your bet...`);\n            return;\n        }else {\n            if(previousBet!==0 ){\n                let sendingPreviousBet = true;\n                onBetPlaced(previousBet,sendingPreviousBet);\n            }\n            asignPreviousBet(bet);\n            setSplitAvailable(true);\n            setHand1TurnFinished(false);\n            setHand2TurnFinished(false);\n            setSplitPressed(false);\n            setHitPressed(false);\n            setButtonsHidden(false);\n            setGameRunning(true);\n            setShowScores(true);\n            setGameMessage(`Your bet is $${bet}`);\n            const newDeck = new Deck();\n            newDeck.shuffleDeck();\n            setDeck(newDeck);\n        \n        \n        \n        \n            const playerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n\n            setPlayerHand([playerFirstCard, playerSecondCard]);\n            setDealerHand([dealerFirstCard, dealerSecondCard]);\n            \n            \n\n            setTimeout(() => {\n                // Flip all player's cards\n                setPlayerHand(playerHand.map(card => ({ ...card, isFaceDown: false })));\n                \n                // Flip 1st dealercards\n                setDealerHand(dealerHand.map((card, index) => \n                    index === 0 ? { ...card, isFaceDown: false } : card // Flip only the first card\n                ));\n                if(playerFirstCard.rank === playerSecondCard.rank ){\n                    setSplitAvailable(true);\n                };\n            }, 500); // Adjust this delay as needed\n            const playerHand = [playerFirstCard,playerSecondCard];\n            setPlayerHand(playerHand);\n            const dealerHand = [dealerFirstCard,{...dealerSecondCard,isFaceDown: true }];\n            setDealerHand(dealerHand);\n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n            const dealerHandValue = calculateHandValue(dealerHand);\n            const dealerHandValueOneCard = calculateHandValue([dealerFirstCard]);\n            setDealerFirstCardValue(dealerHandValueOneCard);\n            //checking for blackjack or 2 blackjacks\n            let newOutcome; \n            if(playerHandValue===21 && dealerHandValue === 21){\n            setTimeout(()=>{\n                newOutcome = \"Push\";        \n                setGameOutcome(newOutcome);\n                const updatedDealerHand = dealerHand.map(card => ({\n                    ...card,\n                    isFaceDown: false,\n                }));\n                setDealerHand(updatedDealerHand);\n                setDealerHandValue(dealerHandValueOneCard);               \n            },500);   \n            }else if(playerHandValue ===21){\n                setTimeout(()=>{\n                    newOutcome=\"PlayerWins BlackJack\";\n                    setGameOutcome(newOutcome);\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown: false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(dealerHandValueOneCard);\n                },500);\n            }else if(dealerHandValue ===21){\n                setTimeout(()=>{\n                    newOutcome=\"DealerWins BlackJack\";\n                    setGameOutcome(newOutcome);;\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown:false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(dealerHandValueOneCard);\n                },500);\n            }else{\n                setDealerHandValue(dealerHandValueOneCard);\n            }         \n        }    \n    };\n\n    const asignPreviousBet = (bet) =>{\n        let currentBet = bet;\n        setPreviousBet(currentBet);\n        console.log(\"(asignPreviousBet) Setting Previous Bet...\");\n    }\n\n    const endGame = () => {\n            console.log(\"running endGame\");\n            assignGameResults();\n            setGamePause(true);\n            endGameTimeout.current = setTimeout(() => {\n                setSplitAvailable(true);\n                setHand1TurnFinished(false);\n                setHand2TurnFinished(false);\n                setSplitPressed(false);\n                setDealerHand([]);\n                setPlayerHand([]);\n                setGameOutcome(\"\");\n                setGameOutcome1(\"\");\n                setGameOutcome2(\"\");\n                setGameMessage(\"Place A Bet...\");\n                setShowScores(false);\n                setGameRunning(false);\n                setHitPressed(false);\n                setTwoHands(false);\n                setStandPressed(false);\n                setButtonsHidden(true);\n                setGamePause(false);\n                clearTimeout(endGameTimeout.current);\n                \n            }, 3000);\n    };\n        \n    const handleStand = (newHandValue = playerHandValue,hand = null) => {\n            \n            if(splitPressed){\n\n                if(hand===\"hand1\" && standPressed === false){\n                    const playerHand1Value = newHandValue;\n                    console.log(\"playerhand1Value:\",playerHand1Value);\n                    setHand1TurnFinished(true);\n                }\n                if(hand===\"hand2\" && standPressed === false){\n                    const playerHand2Value = newHandValue;\n                    console.log(\"playerhand2Value:\",playerHand2Value);\n                    setHand2TurnFinished(true);\n                }\n                \n                if(hand1TurnFinished&&hand2TurnFinished){\n                    \n                    setTimeout(()=>{ \n                        let updatedDealerHand = dealerHand.map((card, index) => ({\n                            ...card,\n                            isFaceDown: index === 1 ? false : card.isFaceDown,\n                        }));\n                        setDealerHand(updatedDealerHand);\n                        \n                    //Recalculate dealerHand value and display it by using setTmeout\n                        let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                    \n                        setDealerHandValue(updatedDealerHandValue);\n                        \n                        if(playerHand1Value>21 && playerHand2Value>21){\n                            setGameMessage(\"Bust... Dealer Wins!\");\n                            let result = \"Dealer Wins\";\n                            setResult(result);\n                            \n                            endGame();\n                            return;\n                        }\n                        const drawCardforDealer = () => {\n                    //check handValue, drawCard until handValue is 17 or higher\n                            if (updatedDealerHandValue < 17 && deck){\n                                //delay to draw card by 1.5 seconds, card with facedown\n                                setTimeout(() => {\n                                    const newCard = { ...deck.drawCard(), isFaceDown: true };\n                                    updatedDealerHand = [...updatedDealerHand, newCard];\n                                    setDealerHand(updatedDealerHand);\n                                    //delay displaying last card with face up by 1 seconds\n                                    setTimeout(()=>{\n                                        const newHand = [...updatedDealerHand];\n                                        newHand[newHand.length - 1].isFaceDown = false; \n                                        setDealerHand(newHand);\n                                        \n                                        updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                        setDealerHandValue(updatedDealerHandValue);\n                                    },500);\n                                        \n                                }, 500);\n    \n                                setTimeout(()=>{\n                                    if(updatedDealerHandValue < 17){\n                                        setTimeout(()=>{\n                                            drawCardforDealer();\n                                        },1000);\n                                        \n                                    }else {\n                                        setTimeout(()=>{\n                                            finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                        },2000);\n                                        \n                                    }\n                                },1000);\n                                    \n                                }else{\n                                    setTimeout(()=>{\n                                        \n                                        finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                    },500);\n                                    \n                                }\n                        }\n                        \n                        setTimeout(()=>{\n                            drawCardforDealer();\n                        },2000);\n                        \n                    },1000);\n                }\n            }else{\n                setStandPressed(true);\n                // Make 2nd dealer card visible, after 1 second delay\n            setTimeout(()=>{ \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                \n            //Recalculate dealerHand value and display it by using setTmeout\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n            \n                setDealerHandValue(updatedDealerHandValue);\n            \n                const drawCardforDealer = () => {\n            //check handValue, drawCard until handValue is 17 or higher\n                    if (updatedDealerHandValue < 17 && deck){\n                        //delay to draw card by 1.5 seconds, card with facedown\n                        setTimeout(() => {\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            updatedDealerHand = [...updatedDealerHand, newCard];\n                            setDealerHand(updatedDealerHand);\n                            //delay displaying last card with face up by 1 seconds\n                            setTimeout(()=>{\n                                const newHand = [...updatedDealerHand];\n                                newHand[newHand.length - 1].isFaceDown = false; \n                                setDealerHand(newHand);\n                                \n                                updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                setDealerHandValue(updatedDealerHandValue);\n                            },500);\n                                \n                        }, 1000);\n\n                        setTimeout(()=>{\n                            if(updatedDealerHandValue < 17){\n                                setTimeout(()=>{\n                                    drawCardforDealer();\n                                },1500);\n                                \n                            }else {\n                                setTimeout(()=>{\n                                    finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                },1500);\n                                \n                            }\n                        },1500);\n                            \n                        }else{\n                            setTimeout(()=>{\n                                \n                                finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                            },1500);\n                            \n                        }\n                }\n                \n                setTimeout(()=>{\n                    drawCardforDealer();\n                },1500);\n                \n            },1000);\n            }\n    }\n\n    const finishDealerTurn = (finalDealerHand,finalDealerHandValue,newHandValue=playerHandValue) => {\n        \n        setTimeout(()=>{\n            setDealerHand(finalDealerHand);\n            setDealerHandValue(finalDealerHandValue);\n        \n            if (splitPressed){\n                let outcome1=\"\";\n                let outcome2=\"\";\n                //playerHand1 outcome\n                if (finalDealerHandValue > 21) {\n                    outcome1 = \"PlayerWins Bust\";\n            \n                } else if (playerHand1Value > 21) {\n                    outcome1 = \"DealerWins Bust\";\n            \n                } else if (playerHand1Value === 21 && finalDealerHandValue !== 21) {\n                    outcome1 = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && playerHand1Value !== 21) {\n                    outcome1 = \"DealerWins\";\n    \n                } else if (playerHand1Value > finalDealerHandValue) {\n                    outcome1 = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > playerHand1Value) {\n                    outcome1 = \"DealerWins\";\n\n                } else {\n                    outcome1 = \"Push\";\n                }\n                //playerHand2 outcome\n                if (finalDealerHandValue > 21) {\n                    outcome2 = \"PlayerWins Bust\";\n            \n                } else if (playerHand2Value > 21) {\n                    outcome2 = \"DealerWins Bust\";\n            \n                } else if (playerHand2Value === 21 && finalDealerHandValue !== 21) {\n                    outcome2 = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && playerHand2Value !== 21) {\n                    outcome2 = \"DealerWins\";\n    \n                } else if (playerHand2Value > finalDealerHandValue) {\n                    outcome2 = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > playerHand2Value) {\n                    outcome2 = \"DealerWins\";\n\n                } else {\n                    outcome2 = \"Push\";\n                }\n                \n\n                setGameOutcome1(outcome1);\n                setGameOutcome2(outcome2);\n            }else{\n                let outcome=\"\";\n                if (finalDealerHandValue > 21) {\n                    outcome = \"PlayerWins Bust\";\n            \n                } else if (newHandValue > 21) {\n                    outcome = \"DealerWins Bust\";\n            \n                } else if (newHandValue === 21 && finalDealerHandValue !== 21) {\n                    outcome = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && newHandValue !== 21) {\n                    outcome = \"DealerWins\";\n    \n                } else if (newHandValue > finalDealerHandValue) {\n                    outcome = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > newHandValue) {\n                    outcome = \"DealerWins\";\n\n                } else {\n                    outcome = \"Push\";\n                }\n\n                setGameOutcome(outcome);\n            }\n        },500);\n        \n    };\n    \n\n    const handleDouble = () =>{\n        \n            // Check if doubling down is allowed (typically, you can only double down on your first two cards)\n            if (playerHand.length !== 2) {\n                setGameMessage(\"Doubling down is not allowed at this time.\");\n                return;\n            }\n            setStandPressed(true);\n            // Check if the player has enough chips to double the bet\n            if (playerChips >= bet && !gamePause) {\n                setPlayerChips((prevChips) => prevChips - bet); // Deduct the additional bet amount from player's chips\n                setBet((prevBet) => prevBet * 2); // Double the bet\n                \n                // Draw one additional card for the player and add it to their hand\n                    setTimeout(() => {\n                        const newCard = { ...deck.drawCard(), isFaceDown: true };\n                        const updatedPlayerHand = [...playerHand, newCard];\n                        setPlayerHand(updatedPlayerHand);\n                        //delay displaying last card with face up by 0.5 seconds\n                        setTimeout(()=>{\n                            const newHand = [...updatedPlayerHand];\n                            newHand[newHand.length - 1].isFaceDown = false; \n                            setPlayerHand(newHand);\n\n                            const newPlayerHandValue = calculateHandValue(newHand);\n                            \n                            setPlayerHandValue(newPlayerHandValue);\n                            // Check if the player is bust after doubling down\n                            setTimeout(()=>{\n                                if (newPlayerHandValue > 21) {\n                                const updatedDealerHand = dealerHand.map((card, index) => ({\n                                    ...card,\n                                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                                }));\n                                setDealerHand(updatedDealerHand);\n                                setGameOutcome(\"DealerWins Bust\");\n                            } else {\n                                handleStand(newPlayerHandValue);\n                            } \n                            },500);\n                        },500);\n                    }, 500);}\n                    else {\n                        // Not enough chips or game is paused\n                        setGameMessage(\"Not enough chips to double down.\");\n                    }\n\n    };\n\n    const handleHit = (hand = null) =>{\n        let outcome1;\n        let outcome2;\n        if(splitPressed){\n            if(hand1TurnFinished && hand2TurnFinished){\n                let newOutcome =\"DealerWins\";\n            \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n                setGameOutcome(newOutcome);\n                setGameMessage(\"Bust... Dealer Wins!\");\n                let result = \"Dealer Wins\";\n                setResult(result);\n                \n                endGame();\n            }else{\n                if(hand===\"hand1\"){\n                    if(hand1TurnFinished){\n                        return;\n                    }else{\n                        if(playerHand1Value ===21){\n                            setHand1TurnFinished(true);\n                            return;\n                        }else\n                        if(deck.cards.length > 0){\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand1 = [...playerHand1, newCard];\n            \n                            setPlayerHand1(updatedPlayerHand1);\n            \n                            setTimeout(() => {\n                                const newHand = [...updatedPlayerHand1];\n                                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                setPlayerHand1(newHand);\n                            },500);\n                            const playerHand1Value = calculateHandValue(updatedPlayerHand1);\n                        \n                            setPlayerHand1Value(playerHand1Value);\n                            if(playerHand1Value > 21){\n                                outcome1 = \"DealerWins Bust\";\n                                setHand1TurnFinished(true);\n                                setGameOutcome1(outcome1);\n                                return;\n                            }\n                        }\n                    }\n                    \n                }else if(hand===\"hand2\"){\n                    if(hand2TurnFinished){\n                        return;\n                    }else{\n                        if(playerHand2Value ===21){\n                            setHand1TurnFinished(true);\n                            return;\n                        }else\n                        if(deck.cards.length > 0){\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand2 = [...playerHand2, newCard];\n            \n                            setPlayerHand2(updatedPlayerHand2);\n            \n                            setTimeout(() => {\n                                const newHand = [...updatedPlayerHand2];\n                                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                setPlayerHand2(newHand);\n                            },500);\n                            const playerHand2Value = calculateHandValue(updatedPlayerHand2);\n                        \n                            setPlayerHand2Value(playerHand2Value);\n                            if(playerHand2Value > 21){\n                                outcome2 = \"DealerWins Bust\";\n                                setHand2TurnFinished(true);\n                                setGameOutcome1(outcome2);\n                                return;\n                            }\n                        }\n                    }\n                    \n                }    \n            }\n            \n        }else{\n            setHitPressed(true);\n            if(deck.cards.length > 0){\n            const newCard = { ...deck.drawCard(), isFaceDown: true };\n            const updatedPlayerHand = [...playerHand, newCard];\n\n            setPlayerHand(updatedPlayerHand);\n\n            setTimeout(() => {\n                const newHand = [...updatedPlayerHand];\n                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                setPlayerHand(newHand);\n            },500);\n\n            const playerHandValue = calculateHandValue(updatedPlayerHand);\n            \n            setPlayerHandValue(playerHandValue);\n            let newOutcome;\n\n            if(playerHandValue>21){\n                newOutcome =\"DealerWins\";\n                \n                setGameOutcome(newOutcome);\n            \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n            }else if(playerHandValue ===21){\n        \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                //Recalculate dealerHand value and display it by using setTmeout\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n    \n                const drawCardforDealer = () => {\n                    if (updatedDealerHandValue < 17 && deck){\n                            const newCard = deck.drawCard();\n                            updatedDealerHand = [...updatedDealerHand,newCard];\n                            updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n    \n                            if(updatedDealerHandValue < 17){\n                                drawCardforDealer();\n                            }\n                        }\n                }\n    \n                drawCardforDealer();\n                setDealerHand(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n    \n                if(updatedDealerHandValue>playerHandValue && updatedDealerHandValue<=21){\n                    newOutcome=\"DealerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                \n                }else if(updatedDealerHandValue===playerHandValue){\n\n                    newOutcome=\"Push\";\n                    \n                    setGameOutcome(newOutcome);\n\n\n        \n                }else if(updatedDealerHandValue >21){\n                    newOutcome=\"PlayerWins\";\n                    \n                    setGameOutcome(newOutcome);\n\n                }\n                else{\n                    newOutcome=\"PlayerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                }\n                setGameRunning(false);\n            }\n        }\n        }\n        \n    }\n\n    const getCardValue = (rank) =>{\n        const cardsValue = {\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9,\n            'ten': 10,\n            'jack': 10,\n            'queen': 10,\n            'king': 10,\n            'ace': 11,\n        }\n        return cardsValue[rank] || 0;\n    }\n\n    const calculateHandValue = (hand) => {\n        let total = 0;\n        let aceCount = 0;\n\n        hand.forEach(card => {\n            let value = getCardValue(card.rank);\n            if (card.rank === 'ace') {\n                aceCount++;\n            }\n            total += value;\n        })\n        // Adjust score based on how many ace, initial ace value is 11, \n        //    subtract 10 from total score until score is less than 21 \n        //    AND number of aces more than 0\n        while (total > 21 && aceCount > 0) {\n            total -= 10;\n            aceCount -= 1;\n        }\n\n        return total;\n    }\n\n    useEffect(()=>{\n        \n    },[previousBet]);\n    useEffect(()=>{\n        if(gameResultsCount.totalGamesPlayed){\n            const newWidth = (gameResultsCount.totalGamesPlayed)/10*100;\n            setProgressBarWidth(newWidth);\n        }\n    },[gameResultsCount.totalGamesPlayed]);\n\n    // useEffect(() => {\n    //     if (playerHand.length > 0) {\n    //         const newPlayerHandValue = calculateHandValue(playerHand);\n    //         setPlayerHandValue(newPlayerHandValue);\n    \n    //         // Move the logic to determine if the game should proceed to handleStand or another function here\n    //         if (newPlayerHandValue > 21) {\n    //             setGameOutcome(\"DealerWins Bust\");\n    //             // Additional logic for dealer's turn can go here\n    //         } else {\n    //             return;\n    //         }\n    //     }\n    // }, [playerHand]); // Only re-run the effect if playerHand changes\n    \n    useEffect(() => {\n        if(playerHand.length>0){\n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n        }\n        if(dealerHand.length>0){\n            const dealerHandValue = calculateHandValue(dealerHand);\n            setDealerHandValue(dealerHandValue);\n        }\n \n    }, [playerHand,dealerHand]);\n\n    useEffect(() => {\n        if (gameOutcome || gameOutcome1 || gameOutcome2) {\n            handleGameResult();\n        }\n        }, [gameOutcome, gameOutcome1, gameOutcome2]);\n\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        if (bet > 0) {\n            setGameMessage(`$${bet}`);\n        }\n    }, [bet]);\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(endGameTimeout.current);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n\n        console.log(\"useEffect, playerChips changed to:\",playerChips);\n        console.log(\"useEffect,bet is set to:\",bet);\n        \n\n    }, [bet, playerChips]);\n\n    useEffect(()=>{\n        if (hand1TurnFinished && hand2TurnFinished) {\n            \n            // Now you can safely perform actions that depend on both hands being finished.\n            setStandPressed(true);\n            handleStand();\n            // Any additional logic that needs to run after both hands are finished can go here.\n        }\n    },[hand1TurnFinished,hand2TurnFinished])\n\n    \n    return (\n        <>\n            <Header\n            playerHandValue={playerHandValue}\n            dealerHandValue={dealerHandValue}\n            playerChips={playerChips}\n            progressBarWidth={progressBarWidth}\n            result={result}\n            />\n            \n\n            <div className=\"game-area\">\n                <div id='score-bubble'>\n                    <div id=\"dealer-score-bubble\" \n                        style={\n                        {visibility: showScores ? 'visible' : 'hidden'}}>\n                        {dealerHand[1] && dealerHand[1].isFaceDown ? dealerFirstCardValue : dealerHandValue}\n                    </div>\n                </div>\n                \n                <div id=\"dealer-message-box\">\n                    <div id=\"dealerhand-fixedbox\">\n                        <Player hand={dealerHand} isDealer={true} />\n                    </div>\n\n                    <div className=\"message-container\">\n                        <div id=\"message-box\">{gameMessage}</div>\n                    </div>\n                </div>\n                \n\n                {\n                twoHands ? (\n                    <div id=\"player-2hands-box\">\n                        \n                        <div id=\"player-hand1\">\n                            \n                            <Player hand={playerHand1} isDealer={false} />\n                            \n                            <div id='score-bubble'>\n                                <div id=\"player1-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                    {playerHand1Value}\n                                </div>\n                            </div>\n                            <div id=\"split-buttons-box\">\n                                <img    \n                                        src={btnStand} \n                                        className={`split-btn-stand ${(standPressed || hand1TurnFinished) ? 'disabled' : ''}`}\n                                        alt='stand-button' \n                                        title=\"Stand\"\n                                        onClick={(!standPressed && !hand1TurnFinished)? ()=>handleStand(playerHand1Value,\"hand1\") : undefined}\n                                        style={{cursor: (standPressed || hand1TurnFinished)?'not-allowed':'pointer'}}\n                                    \n                                />\n                                \n                                <img    \n                                        src={btnHit} \n                                        className={`split-btn-hit ${(standPressed || hand1TurnFinished) ? 'disabled': ''}`}\n                                        alt='hit-button' \n                                        title=\"Hit\"\n                                        onClick={(!standPressed && !hand1TurnFinished) ? ()=>handleHit(\"hand1\") : undefined}\n                                        style={{cursor:((standPressed || hand1TurnFinished)) ? 'not-allowed':'pointer'}}\n                            \n                                />\n                            \n                            </div>\n                        </div>\n\n                        <div id=\"player-hand2\">\n                            \n                            <Player hand={playerHand2} isDealer={false} /> \n\n                            <div id='score-bubble'>\n                                <div id=\"player2-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>\n                                    {playerHand2Value}\n                                </div>\n                            </div>\n                            <div \n                                id=\"split-buttons-box\" >\n\n                                <img    \n                                        src={btnStand} \n                                        className={`split-btn-stand ${(standPressed || hand2TurnFinished)? 'disabled' : ''}`}\n                                        alt='stand-button' \n                                        title=\"Stand\"\n                                        onClick={(!standPressed && !hand2TurnFinished) ? ()=>handleStand(playerHand2Value,\"hand2\") : undefined}\n                                        style={{cursor: (standPressed || hand2TurnFinished)?'not-allowed':'pointer'}}\n\n                                />\n                            \n                                \n                                <img    \n                                        src={btnHit} \n                                        className={`split-btn-hit ${(standPressed || hand2TurnFinished) ? 'disabled': ''}`}\n                                        alt='hit-button' \n                                        title=\"Hit\"\n                                        onClick={(!standPressed && !hand2TurnFinished)? ()=>handleHit(\"hand2\") : undefined}\n                                        style={{cursor:(standPressed || hand1TurnFinished) ? 'not-allowed':'pointer'}}\n                            \n                                />\n                            \n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div id=\"player-hand-box\">\n                            \n                            <Player hand={playerHand} isDealer={false} />\n                            \n                            <div id='score-bubble'>\n                                <div id=\"player-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                    {playerHandValue}\n                                </div>\n                            </div>\n                        \n                    </div>\n                )}\n            </div>\n            \n            <div id='bet-main-container'>\n                    <div id='bet-container-box'\n                        style={{\n                        visibility: !gameRunning ? 'visible' : 'hidden', \n                        display: 'flex', \n                        gap: '8px', \n                        justifyContent: 'center',\n                        position:'relative',\n                        }}\n                    \n                        >\n                        \n                    \n                        {Object.entries(betChips).map(([chipType, { imgSrc, count, position }], index) => (\n                            Array.from({ length: count }).map((_, chipIndex) => (\n                                <img \n                                    key={`${chipType}-${chipIndex}`}\n                                    src={imgSrc}\n                                    alt={`Chip of ${chipType.replace('chip', '')} value`} \n                                    className='bet-chip-img'\n                                    style={{ \n                                        position: 'absolute', \n                                        // transform:'translateY(15px)',\n                                        bottom: position + chipIndex * 5 -25,\n                                        left: `calc(50% + ${index * (chipWidth + gap) - totalWidth / 2}px)`\n                                    }} \n                                />\n                            ))\n                        ))}    \n                    </div>\n            </div>\n\n\n            <Controls\n            handleHit={handleHit}\n            handleStand={handleStand}\n            handleDouble={handleDouble}\n            onNewGame={handleNewGame}\n            gameRunning={gameRunning}\n            onBetPlaced={onBetPlaced}\n            bet={bet}\n            buttonsHidden={buttonsHidden}\n            handleChipClick={handleChipClick}\n            standPressed={standPressed}\n            splitAvailable={splitAvailable}\n            handleSplit={handleSplit}\n            hitPressed={hitPressed}\n            twoHands={twoHands}\n            setPreviousBet={setPreviousBet}\n            clearBet={clearBet}\n            previousBet={previousBet}\n            setBet={setBet}\n            setBetChips={setBetChips}\n            playerChips={playerChips}\n\n            />\n        </>\n    );\n};\nexport default GameBoard;","import React from 'react'\nimport LOGO from './images/logo-blackjack.png'\nconst LoadingOverlay = ({isVisible, style}) => {\n    if (!isVisible) {\n        return null;\n    }\n\n    return(\n        <div className='loading-page'style={style}>\n        <img src={LOGO} className=\"logo-img\" alt=\"logo loading\"/>\n        <div className='loading'></div>\n        </div>\n    )\n}\nexport default LoadingOverlay","import React,{useEffect,useState} from 'react';\nimport './blackjack.css';\nimport GameBoard from './GameBoard';\nimport LoadingOverlay from './LoadingOverlay'\n\nconst BlackJack = () => {\n    const [isLoading,setIsLoading] = useState(true);\n    // const [isFlipped, setIsFlipped] = useState(false);\n    const [opacity, setOpacity] = useState(1);\n    // const [zIndex, setZIndex] = useState(-1);\n    const [isGameActive, setIsGameActive] = useState(false);\n\n    const handleGameRunningChange = (isRunning) => {\n      setIsGameActive(isRunning); // Use the renamed state setter\n  };\n  \n\n    // const toggleFlip = () => {\n    //     if (!isGameActive) { // Use the renamed state variable\n    //         setIsFlipped(!isFlipped);\n    //         setTimeout(() => {\n    //             setOpacity(opacity === 0.45 ? 1 : 0.45);\n    //             setZIndex(zIndex === -1 ? 1 : -1);\n    //         }, 300);\n    //     }\n    // };\n    useEffect(() => {\n        // Start the fade-out effect slightly before hiding the overlay\n        const fadeOutTimer = setTimeout(() => {\n          // Assuming you have a method to change the overlay's opacity\n          // This could be directly via CSS classes or inline styles\n          setOpacity(0); // This assumes your LoadingOverlay responds to opacity changes\n        }, 4000); // Start fade out slightly before removing the overlay\n      \n        const removeOverlayTimer = setTimeout(() => {\n            setIsLoading(false);\n          }, 5000); // 4 seconds + 1 second of fade-out\n      \n        return () => {\n            clearTimeout(fadeOutTimer);\n            clearTimeout(removeOverlayTimer); \n        };\n      }, []);\n\n    return (\n        <>\n            {/* <div id=\"container\" className={isFlipped ? 'flipped' : ''} onClick={toggleFlip} style={{'--bg-opacity': opacity, '--z-index': zIndex}}> */}\n            <div id=\"container\">\n                \n                <LoadingOverlay isVisible={isLoading} style={{ opacity: opacity }}  />\n                <GameBoard onGameRunningChange={handleGameRunningChange} />\n                {/* <GameBoard/> */}\n            </div>\n        </>\n    );\n};\n\nexport default BlackJack;\n","// import React,{ useState, useEffect } from \"react\"\nimport React from 'react'\nimport './App.css'\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Footer from \"./Footer\";\n// import Bootstrap from \"./Boot\";\n// import './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n// import './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \nimport BlackJack from './BlackJack/BlackJack'\n\n\nexport default function App() {\n\n  \n//   const [isLoading, setIsLoading] = useState(true); \n//   const [darkMode, setDarkMode] = useState(false);\n\n\n//   function toggleDarkMode() {\n//     setDarkMode(!darkMode);\n//   }\n//   useEffect(() => {\n//     document.body.style.backgroundColor = darkMode ? '#23252C' : '#ccc';\n//     document.body.style.color = darkMode ? '#ccc' : '#23252C';\n//   }, [darkMode]);\n\n//   useEffect(() => {\n//     if (darkMode) {\n//         document.body.classList.add(\"dark-mode\");\n//     } else {\n//         document.body.classList.remove(\"dark-mode\");\n//     }\n// }, [darkMode]);\n\n\n\n\n    return (\n      <>\n      \n\n      <BlackJack/>\n     \n        {/* <Header/>\n        <Main/>\n        <Footer/> */}\n        \n      </> \n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \n// import $ from 'jquery'; \n// import Popper from 'popper.js'; \nimport './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}