{"version":3,"sources":["BlackJack/images/vegas-back2.png","BlackJack/images/stand-button2.png","BlackJack/images/hit-button2.png","BlackJack/images/logo-blackjack.png","BlackJack/images/ace_of_hearts.png","BlackJack/images/2_of_hearts.png","BlackJack/images/3_of_hearts.png","BlackJack/images/4_of_hearts.png","BlackJack/images/5_of_hearts.png","BlackJack/images/6_of_hearts.png","BlackJack/images/7_of_hearts.png","BlackJack/images/8_of_hearts.png","BlackJack/images/9_of_hearts.png","BlackJack/images/10_of_hearts.png","BlackJack/images/jack_of_hearts.png","BlackJack/images/queen_of_hearts.png","BlackJack/images/king_of_hearts.png","BlackJack/images/ace_of_diamonds.png","BlackJack/images/2_of_diamonds.png","BlackJack/images/3_of_diamonds.png","BlackJack/images/4_of_diamonds.png","BlackJack/images/5_of_diamonds.png","BlackJack/images/6_of_diamonds.png","BlackJack/images/7_of_diamonds.png","BlackJack/images/8_of_diamonds.png","BlackJack/images/9_of_diamonds.png","BlackJack/images/10_of_diamonds.png","BlackJack/images/jack_of_diamonds.png","BlackJack/images/queen_of_diamonds.png","BlackJack/images/king_of_diamonds.png","BlackJack/images/ace_of_spades.png","BlackJack/images/2_of_spades.png","BlackJack/images/3_of_spades.png","BlackJack/images/4_of_spades.png","BlackJack/images/5_of_spades.png","BlackJack/images/6_of_spades.png","BlackJack/images/7_of_spades.png","BlackJack/images/8_of_spades.png","BlackJack/images/9_of_spades.png","BlackJack/images/10_of_spades.png","BlackJack/images/jack_of_spades.png","BlackJack/images/queen_of_spades.png","BlackJack/images/king_of_spades.png","BlackJack/images/ace_of_clubs.png","BlackJack/images/2_of_clubs.png","BlackJack/images/3_of_clubs.png","BlackJack/images/4_of_clubs.png","BlackJack/images/5_of_clubs.png","BlackJack/images/6_of_clubs.png","BlackJack/images/7_of_clubs.png","BlackJack/images/8_of_clubs.png","BlackJack/images/9_of_clubs.png","BlackJack/images/10_of_clubs.png","BlackJack/images/jack_of_clubs.png","BlackJack/images/queen_of_clubs.png","BlackJack/images/king_of_clubs.png","BlackJack/images/5-chip-v2.png","BlackJack/images/10-chip-v2.png","BlackJack/images/25-chip-v2.png","BlackJack/images/50-chip-v2.png","BlackJack/images/100-chip-v2.png","BlackJack/images/250-chip-v2.png","BlackJack/images/double-button2.png","BlackJack/images/clear-button2.png","BlackJack/images/bet-button2.png","BlackJack/images/split-button.png","BlackJack/images/background1.png","BlackJack/Deck.js","BlackJack/Card.js","BlackJack/Player.js","BlackJack/Controls.js","BlackJack/Header.js","BlackJack/GameBoard.js","BlackJack/LoadingOverlay.js","BlackJack/BlackJack.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Deck","constructor","this","cards","createDeck","suits","ranks","deck","suit","rank","push","shuffleDeck","i","length","random","Math","floor","drawCard","pop","cardImages","heartsAce","heartsTwo","heartsThree","heartsFour","heartsFive","heartsSix","heartsSeven","heartsEight","heartsNine","heartsTen","heartsJack","heartsQueen","heartsKing","diamondsAce","diamondsTwo","diamondsThree","diamondsFour","diamondsFive","diamondsSix","diamondsSeven","diamondsEight","diamondsNine","diamondsTen","diamondsJack","diamondsQueen","diamondsKing","spadesAce","spadesTwo","spadesThree","spadesFour","spadesFive","spadesSix","spadesSeven","spadesEight","spadesNine","spadesTen","spadesJack","spadesQueen","spadesKing","clubsAce","clubsTwo","clubsThree","clubsFour","clubsFive","clubsSix","clubsSeven","clubsEight","clubsNine","clubsTen","clubsJack","clubsQueen","clubsKing","cardBack","Card","_ref","isFaceDown","concat","React","createElement","className","src","alt","Player","hand","isDealer","Fragment","id","map","card","index","key","Controls","onNewGame","handleStand","handleDouble","handleHit","gameRunning","onBetPlaced","bet","buttonsHidden","handleChipClick","standPressed","handleSplit","splitAvailable","hitPressed","twoHands","chips","value","img","chip5","chip10","chip25","chip50","chip100","chip250","btnStand","title","onClick","undefined","style","cursor","btnDouble","btnSplit","btnHit","btnBet","btnClear","height","overflow","visibility","display","gap","justifyContent","transform","chip","event","Header","playerHandValue","dealerHandValue","result","playerChips","BackCard","GameBoard","onGameRunningChange","setDeck","useState","dealerHand","setDealerHand","playerHand","setPlayerHand","setGameRunning","setPlayerHandValue","setDealerHandValue","setPlayerChips","setBet","gameMessage","setGameMessage","gameOutcome","setGameOutcome","gameOutcome1","setGameOutcome1","gameOutcome2","setGameOutcome2","showScores","setShowScores","newRound","setNewRound","endGameTimeout","useRef","gamePause","setGamePause","setButtonsHidden","betChips","setBetChips","totalChipTypes","Object","keys","totalWidth","dealerFirstCardValue","setDealerFirstCardValue","isFirstRender","setStandPressed","setSplitAvailable","playerHand1","setPlayerHand1","playerHand2","setPlayerHand2","setTwoHands","playerHand1Value","setPlayerHand1Value","playerHand2Value","setPlayerHand2Value","setHitPressed","betHand1","setBetHand1","betHand2","setBetHand2","hand1TurnFinished","setHand1TurnFinished","hand2TurnFinished","setHand2TurnFinished","splitPressed","setSplitPressed","endGame","current","setTimeout","clearTimeout","newHandValue","arguments","updatedDealerHand","updatedDealerHandValue","calculateHandValue","drawCardforDealer","newCard","newHand","finishDealerTurn","finalDealerHand","finalDealerHandValue","outcome1","outcome2","outcome","newOutcome","updatedPlayerHand1","updatedPlayerHand2","updatedPlayerHand","total","aceCount","forEach","handleGameResult","finalBet","outcomeMessage","outcomeMessage1","outcomeMessage2","winAmount","prevChips","useEffect","newPlayerHandValue","position","entries","_ref2","chipType","imgSrc","count","Array","from","_","chipIndex","bottom","left","prevBet","handleNewGame","newDeck","playerFirstCard","playerSecondCard","dealerFirstCard","dealerSecondCard","dealerHandValueOneCard","amount","prev","stopPropagation","currentChips","newChips","playerHand1SecondCard","playerHand2SecondCard","LoadingOverlay","isVisible","top","right","alignItems","backgroundColor","zIndex","LOGO","IMG","BlackJack","isLoading","setIsLoading","isFlipped","setIsFlipped","opacity","setOpacity","setZIndex","isGameActive","setIsGameActive","timer","isRunning","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,4C,kBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,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","file":"static/js/main.3d630def.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vegas-back2.6fd38ed5.png\";","module.exports = __webpack_public_path__ + \"static/media/stand-button2.b6985f69.png\";","module.exports = __webpack_public_path__ + \"static/media/hit-button2.2121fae0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-blackjack.96aa3714.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_hearts.41453bfa.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_hearts.f97ad85b.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_hearts.1c16fe10.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_hearts.5ad913da.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_hearts.8f6a2068.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_hearts.9cd2258c.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_hearts.a9afa10f.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_hearts.e6c01b13.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_hearts.cdb8fda5.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_hearts.2e6327a6.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_hearts.260cdba6.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_hearts.cf894646.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_hearts.37b5b9d7.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_diamonds.60b16fda.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_diamonds.0b5b5249.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_diamonds.b529e1c1.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_diamonds.58bd0a63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_diamonds.e27b4b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_diamonds.ee5053d4.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_diamonds.df3e8e93.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_diamonds.8afee604.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_diamonds.86608eb9.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_diamonds.4324d712.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_diamonds.ac2092c1.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_diamonds.d5647c19.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_diamonds.1a5882a6.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_spades.ce4f163f.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_spades.2354275d.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_spades.ad02dc95.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_spades.df185c63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_spades.aa8a0720.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_spades.5d221b2a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_spades.c0f5e5f9.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_spades.74766755.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_spades.e5b29fde.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_spades.2401fe36.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_spades.92aff044.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_spades.6d100fc3.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_spades.9b18a729.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_clubs.07d1c180.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_clubs.c83a7af4.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_clubs.23a7a6ac.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_clubs.02deab49.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_clubs.3781bf44.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_clubs.9c2fdf6a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_clubs.112be1df.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_clubs.6ed0b85e.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_clubs.784ea770.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_clubs.c29b28f3.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_clubs.1861c1e4.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_clubs.9e84dd75.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_clubs.2ad9bff3.png\";","module.exports = __webpack_public_path__ + \"static/media/5-chip-v2.5a524f75.png\";","module.exports = __webpack_public_path__ + \"static/media/10-chip-v2.3a023e24.png\";","module.exports = __webpack_public_path__ + \"static/media/25-chip-v2.c7981237.png\";","module.exports = __webpack_public_path__ + \"static/media/50-chip-v2.b270a5eb.png\";","module.exports = __webpack_public_path__ + \"static/media/100-chip-v2.56f3f00f.png\";","module.exports = __webpack_public_path__ + \"static/media/250-chip-v2.b303ef66.png\";","module.exports = __webpack_public_path__ + \"static/media/double-button2.ae841ef6.png\";","module.exports = __webpack_public_path__ + \"static/media/clear-button2.00626382.png\";","module.exports = __webpack_public_path__ + \"static/media/bet-button2.0ae68190.png\";","module.exports = __webpack_public_path__ + \"static/media/split-button.97e0472c.png\";","module.exports = __webpack_public_path__ + \"static/media/background1.0a99641d.png\";","class Deck{\n    constructor(){\n        this.cards = this.createDeck();\n    }\n\n    createDeck(){\n        const suits = [\"hearts\", \"diamonds\",\"spades\",\"clubs\"];\n        const ranks = [\"ace\", \"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"jack\",\"queen\",\"king\"];\n        const deck = [];\n        \n        for (const suit of suits){\n            for(const rank of ranks){\n                deck.push({suit,rank});\n            }\n        }\n        return deck;\n    }\n    \n    shuffleDeck(){\n        for(let i = this.cards.length - 1; i>0;i-- ){\n            const random = Math.floor(Math.random()*(i+1));\n            [this.cards[i],this.cards[random]] = [this.cards[random],this.cards[i]];\n        }\n    }\n\n    drawCard(){\n        return this.cards.pop();\n    }\n}\nexport default Deck;","import React from 'react'\nimport cardBack from './images/vegas-back2.png';\nimport heartsAce from './images/ace_of_hearts.png';\nimport heartsTwo from './images/2_of_hearts.png';\nimport heartsThree from './images/3_of_hearts.png';\nimport heartsFour from './images/4_of_hearts.png';\nimport heartsFive from './images/5_of_hearts.png';\nimport heartsSix from './images/6_of_hearts.png';\nimport heartsSeven from './images/7_of_hearts.png';\nimport heartsEight from './images/8_of_hearts.png';\nimport heartsNine from './images/9_of_hearts.png';\nimport heartsTen from './images/10_of_hearts.png';\nimport heartsJack from './images/jack_of_hearts.png';\nimport heartsQueen from './images/queen_of_hearts.png';\nimport heartsKing from './images/king_of_hearts.png';\n\nimport diamondsAce from './images/ace_of_diamonds.png';\nimport diamondsTwo from './images/2_of_diamonds.png';\nimport diamondsThree from './images/3_of_diamonds.png';\nimport diamondsFour from './images/4_of_diamonds.png';\nimport diamondsFive from './images/5_of_diamonds.png';\nimport diamondsSix from './images/6_of_diamonds.png';\nimport diamondsSeven from './images/7_of_diamonds.png';\nimport diamondsEight from './images/8_of_diamonds.png';\nimport diamondsNine from './images/9_of_diamonds.png';\nimport diamondsTen from './images/10_of_diamonds.png';\nimport diamondsJack from './images/jack_of_diamonds.png';\nimport diamondsQueen from './images/queen_of_diamonds.png';\nimport diamondsKing from './images/king_of_diamonds.png';\n\nimport spadesAce from './images/ace_of_spades.png';\nimport spadesTwo from './images/2_of_spades.png';\nimport spadesThree from './images/3_of_spades.png';\nimport spadesFour from './images/4_of_spades.png';\nimport spadesFive from './images/5_of_spades.png';\nimport spadesSix from './images/6_of_spades.png';\nimport spadesSeven from './images/7_of_spades.png';\nimport spadesEight from './images/8_of_spades.png';\nimport spadesNine from './images/9_of_spades.png';\nimport spadesTen from './images/10_of_spades.png';\nimport spadesJack from './images/jack_of_spades.png';\nimport spadesQueen from './images/queen_of_spades.png';\nimport spadesKing from './images/king_of_spades.png';\n\nimport clubsAce from './images/ace_of_clubs.png';\nimport clubsTwo from './images/2_of_clubs.png';\nimport clubsThree from './images/3_of_clubs.png';\nimport clubsFour from './images/4_of_clubs.png';\nimport clubsFive from './images/5_of_clubs.png';\nimport clubsSix from './images/6_of_clubs.png';\nimport clubsSeven from './images/7_of_clubs.png';\nimport clubsEight from './images/8_of_clubs.png';\nimport clubsNine from './images/9_of_clubs.png';\nimport clubsTen from './images/10_of_clubs.png';\nimport clubsJack from './images/jack_of_clubs.png';\nimport clubsQueen from './images/queen_of_clubs.png';\nimport clubsKing from './images/king_of_clubs.png';\n\nconst cardImages = {\n    \"hearts-ace\": heartsAce,\n     \"hearts-two\": heartsTwo,\n     \"hearts-three\":heartsThree,\n     \"hearts-four\":heartsFour ,\n     \"hearts-five\":heartsFive ,\n     \"hearts-six\":heartsSix ,\n     \"hearts-seven\":heartsSeven ,\n     \"hearts-eight\":heartsEight, \n     \"hearts-nine\":heartsNine ,\n     \"hearts-ten\":heartsTen ,\n     \"hearts-jack\":heartsJack ,\n     \"hearts-queen\":heartsQueen ,\n     \"hearts-king\":heartsKing ,\n     \n     \"diamonds-ace\": diamondsAce,\n     \"diamonds-two\": diamondsTwo,\n     \"diamonds-three\":diamondsThree,\n     \"diamonds-four\":diamondsFour ,\n     \"diamonds-five\":diamondsFive ,\n     \"diamonds-six\":diamondsSix ,\n     \"diamonds-seven\":diamondsSeven ,\n     \"diamonds-eight\":diamondsEight, \n     \"diamonds-nine\":diamondsNine ,\n     \"diamonds-ten\":diamondsTen ,\n     \"diamonds-jack\":diamondsJack ,\n     \"diamonds-queen\":diamondsQueen ,\n     \"diamonds-king\":diamondsKing ,\n    \n     \"spades-ace\": spadesAce,\n     \"spades-two\": spadesTwo,\n     \"spades-three\":spadesThree,\n     \"spades-four\":spadesFour ,\n     \"spades-five\":spadesFive ,\n     \"spades-six\":spadesSix ,\n     \"spades-seven\":spadesSeven ,\n     \"spades-eight\":spadesEight, \n     \"spades-nine\":spadesNine ,\n     \"spades-ten\":spadesTen ,\n     \"spades-jack\":spadesJack ,\n     \"spades-queen\":spadesQueen ,\n     \"spades-king\":spadesKing ,\n    \n     \"clubs-ace\": clubsAce,\n     \"clubs-two\": clubsTwo,\n     \"clubs-three\":clubsThree,\n     \"clubs-four\":clubsFour ,\n     \"clubs-five\":clubsFive ,\n     \"clubs-six\":clubsSix ,\n     \"clubs-seven\":clubsSeven ,\n     \"clubs-eight\":clubsEight, \n     \"clubs-nine\":clubsNine ,\n     \"clubs-ten\":clubsTen ,\n     \"clubs-jack\":clubsJack ,\n     \"clubs-queen\":clubsQueen ,\n     \"clubs-king\":clubsKing ,\n     \"back\": cardBack,\n  };\n\n\nconst Card = ({suit,rank, isFaceDown}) => {\n  const cardImage = isFaceDown ? cardBack : cardImages[`${suit}-${rank}`];\n  \n    return (\n      <div className=\"card-box\">\n      <div className={`card-content ${!isFaceDown ? 'flip' : ''}`}>\n        <div className=\"card-front\">\n          <img src={cardImages[`${suit}-${rank}`]} alt={`${rank} of ${suit}`} />\n        </div>\n        <div className=\"card-back\">\n          <img src={cardBack} alt=\"Card Back\" />\n        </div>\n      </div>\n    </div>\n    )\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card';\nimport PropTypes from 'prop-types';\n\nconst Player = ({hand,isDealer}) => {\n\n\n\n  return (\n    <>\n        <div className={`${isDealer ? 'dealer-hand' : 'player-hand'}`}>\n            {hand.length > 0 ? (\n            <div id=\"hand\">\n            {hand.map((card, index) => (\n                <Card key={index} suit={card.suit} rank={card.rank} isFaceDown={card.isFaceDown} />\n            ))}\n            </div>\n             ) : (\n            <>\n            </>\n        )}\n        </div>\n\n    </>\n  );\n}\n\nPlayer.propTypes = {\n    hand: PropTypes.array,\n    isDealer: PropTypes.bool,\n}\n\nexport default Player","import React from 'react';\nimport chip5 from './images/5-chip-v2.png';\nimport chip10 from './images/10-chip-v2.png';\nimport chip25 from './images/25-chip-v2.png';\nimport chip50 from './images/50-chip-v2.png';\nimport chip100 from './images/100-chip-v2.png';\nimport chip250 from './images/250-chip-v2.png';\nimport btnStand from './images/stand-button2.png';\nimport btnDouble from './images/double-button2.png';\nimport btnHit from './images/hit-button2.png';\nimport btnClear from './images/clear-button2.png';\nimport btnBet from './images/bet-button2.png';\nimport btnSplit from './images/split-button.png';\n\nconst Controls = ({ onNewGame, \n                    handleStand, \n                    handleDouble, \n                    handleHit, \n                    gameRunning, \n                    onBetPlaced,\n                    bet,\n                    buttonsHidden,\n                    handleChipClick,\n                    standPressed,\n                    handleSplit,\n                    splitAvailable,\n                    hitPressed,\n                    twoHands,\n                    }) => \n    {\n    const chips = [\n        { value: 5, img: chip5 },\n        { value: 10, img: chip10 },\n        { value: 25, img: chip25 },\n        { value: 50, img: chip50 },\n        { value: 100, img: chip100 },\n        { value: 250, img: chip250 },\n    ];\n\n    return (\n        <>\n        \n            <div id='buttons-container'>\n                {gameRunning ? (\n                    <>\n                        {!buttonsHidden && (\n                            <>\n                            <img    \n                                    src={btnStand} \n                                    className={`btn-stand ${standPressed ? 'disabled' : ''}`}\n                                    alt='stand-button' \n                                    title=\"Stand\"\n                                    onClick={!standPressed ? ()=>handleStand() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnDouble}\n                                    className={`btn-double ${standPressed || hitPressed ? 'disabled' : ''}`}\n                                    alt='double-button' \n                                    title=\"Double\"\n                                    onClick={!standPressed ? ()=>handleDouble() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnSplit} \n                                    className={`btn-split ${(standPressed || !splitAvailable || hitPressed )? 'disabled': ''}`}\n                                    alt='split-button' \n                                    title=\"Split\"\n                                    onClick={() => !standPressed && handleSplit()}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnHit} \n                                    className={`btn-hit ${standPressed ? 'disabled': ''}`}\n                                    alt='hit-button' \n                                    title=\"Hit\"\n                                    onClick={!standPressed ? ()=>handleHit() : undefined}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            </>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        <img \n                            src={btnBet} \n                            className='btn-new-game' \n                            alt='bet-button' \n                            title=\"Place A Bet\"\n                            onClick={() => bet === 0 ? onBetPlaced(0):onNewGame()}\n                        />\n                        <img \n                            src={btnClear} \n                            className='btn-clear-bet' \n                            alt='clear-button' \n                            title=\"Clear\"\n                            onClick={() => onBetPlaced(0)}\n                        />\n                    </>\n                )}\n            </div>\n            \n            <div id='chips-row-wrapper-arrows' style={{\n                                        height: 'auto', \n                                        overflow: 'hidden'}}>\n                <div id='pointer-row-animation' style={{\n                                                visibility: !gameRunning ? 'visible' : 'hidden', \n                                                display: 'flex', \n                                                gap: '40px', \n                                                justifyContent: 'center', \n                                                transform: 'translateY(3px)'}}>\n\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                </div>\n            </div>\n            <div id='chips-row-wrapper' style={{ visibility: gameRunning ? 'hidden' : 'visible' }}>\n\n                {chips.map((chip, index) => (\n                <img key={index}\n                    src={chip.img}\n                    alt={`Chip ${chip.value}`}\n                    title={`$${chip.value}`}\n                    className='chip-img'\n                    onClick={(event) => {\n                        onBetPlaced(chip.value); \n                        handleChipClick(chip.value, chip.img, event);\n                    }}\n                    style={{ cursor: 'pointer' }} />\n                ))}\n                \n            </div>  \n        </>\n    );\n};\n\nexport default Controls;","import React from 'react'\nimport Logo from './images/logo-blackjack.png'\nimport BackCard from './images/vegas-back2.png'\n\nconst Header = ({playerHandValue,dealerHandValue,result,bet,playerChips}) => {\n  return (\n    <>\n      <div id='blackjack-header-container'>\n        <div id='chips-count'>{`$ ${playerChips}`}</div>\n        <div id='games-count'></div>\n        <div id='game-settings'>⚙️</div>\n      </div>\n      <div id='deck-dealer-row'>\n        <div id='discard-tray'>{<img id='card-image-left-corner' alt='back-image' src={BackCard} />}</div>\n        <div id='new-deck'>{<img id='card-image-right-corner' alt='back-image' src={BackCard} />}</div>\n      </div>\n    </>\n    \n  )\n}\n\nexport default Header","    import React, { useEffect, useState,useRef } from \"react\";\n        import Deck from './Deck';\n        import Player from './Player';\n        import Controls from \"./Controls\";\n        import Header from \"./Header\";\n        import btnStand from './images/stand-button2.png';\n        import btnHit from './images/hit-button2.png';\n    \n\n\n\n        const GameBoard = ({ onGameRunningChange }) => {\n\n        const [deck, setDeck] = useState(null);\n        const [dealerHand, setDealerHand] = useState([]);\n        const [playerHand, setPlayerHand] = useState([]);\n        const [gameRunning, setGameRunning] = useState(false);\n        const [playerHandValue, setPlayerHandValue] = useState(0);\n        const [dealerHandValue, setDealerHandValue] = useState(0);\n        const [playerChips, setPlayerChips] = useState(1000);\n        const [bet, setBet] = useState(0);\n        const [gameMessage, setGameMessage] = useState(\"Place A Bet\");\n        const [gameOutcome, setGameOutcome] = useState(\"\");\n        const [gameOutcome1, setGameOutcome1] = useState(\"\");\n        const [gameOutcome2, setGameOutcome2] = useState(\"\");\n        const [showScores, setShowScores] = useState(false);\n        const [newRound, setNewRound] = useState(false);\n        const endGameTimeout = useRef();\n        const [gamePause,setGamePause] = useState(false);\n        const [buttonsHidden,setButtonsHidden] = useState(false);\n        const [betChips,setBetChips] = useState([]);\n        const chipWidth = 40;\n        const gap = 0.1;\n        const totalChipTypes = Object.keys(betChips).length;\n        const totalWidth = totalChipTypes * chipWidth + (totalChipTypes - 1) * gap;\n        const [dealerFirstCardValue,setDealerFirstCardValue] = useState(0);\n        const isFirstRender = useRef(true);\n        const [standPressed, setStandPressed] = useState(false);\n        const [splitAvailable,setSplitAvailable] = useState(false);\n        const [playerHand1,setPlayerHand1] = useState([]);\n        const [playerHand2,setPlayerHand2] = useState([]);\n        const [twoHands,setTwoHands] = useState(false);\n        const [playerHand1Value,setPlayerHand1Value]= useState(0);\n        const [playerHand2Value,setPlayerHand2Value]=useState(0);\n        const [hitPressed,setHitPressed] = useState(false);\n        const [betHand1,setBetHand1] = useState(0);\n        const [betHand2,setBetHand2] = useState(0);\n        const [hand1TurnFinished,setHand1TurnFinished] = useState(false);\n        const [hand2TurnFinished,setHand2TurnFinished] = useState(false);\n        const [splitPressed,setSplitPressed] = useState(false);\n    \n        const handleSplit = ()=>{\n            \n            if (playerChips >= bet && !gamePause)\n            {\n                setButtonsHidden(true);\n                setSplitPressed(true);\n                const betHand1 = bet;\n                const betHand2 = bet;\n                setBetHand1(betHand1);\n                setBetHand2(betHand2);\n                setPlayerChips(playerChips-bet);\n                \n                const newDeck = deck;\n                const playerHand1SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n                const playerHand2SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n                const playerHand1 = [playerHand[0],playerHand1SecondCard];\n                const playerHand2 = [playerHand[1],playerHand2SecondCard];\n                setPlayerHand1(playerHand1);\n                setPlayerHand2(playerHand2);\n                setTwoHands(true);\n                setPlayerHand([]);\n                setTimeout(()=>{\n                    setPlayerHand1(playerHand1.map(card => ({...card,isFaceDown: false})))\n                    setPlayerHand2(playerHand2.map(card => ({...card,isFaceDown: false})))\n                },500);\n                const playerHand1Value = calculateHandValue(playerHand1);\n                const playerHand2Value = calculateHandValue(playerHand2);\n                setPlayerHand1Value(playerHand1Value);\n                setPlayerHand2Value(playerHand2Value);\n                setPlayerHandValue(0);\n                \n                if(playerHand1Value===21 && playerHand2Value ===21){\n                    let gameMessage = `Wow! Two BlackJack... you won $${betHand1*2.5+betHand2*2.5}`;\n                    setPlayerChips(playerChips+betHand1*2.5+betHand2*2.5);\n                    setGameMessage(gameMessage);\n                    endGame();\n                }else{\n                    //checking turn for hand2 during split\n                    if(playerHand2Value === 21){\n                        let resultHand2 = `Hand2 BlackJack you won ${betHand2*2.5}`;\n                        setBetHand2(betHand2*2.5);\n                        setHand2TurnFinished(true);\n                    }else{\n                        let gameMessage = \"What do you want to do?\\nHit or Stand\"\n                        setGameMessage(gameMessage);\n                    }\n                    //checking turn for hand1 during split\n                    if(playerHand1Value === 21){\n                        let resultHand1 = `Hand1 BlackJack you won ${betHand1*2.5}`;\n                        setBetHand1(betHand1*2.5);\n                        setHand1TurnFinished(true);\n                    }\n                    else{\n                        let gameMessage = \"What do you want to do?\\nHit or Stand\"\n                        setGameMessage(gameMessage);\n\n                    }\n                    \n\n                }\n            }else{\n                setGameMessage(\"Not enough chips for split...\");\n                return;\n            }\n            \n\n\n        }\n        const handleChipClick = (amount, imgSrc, event) => {\n            event.stopPropagation();\n            \n    \n            setBetChips(currentChips => {\n                // Create a new object to avoid direct state mutation\n                const newChips = { ...currentChips };\n                const chipType = `chip${amount}`;\n    \n                if (newChips[chipType]) {\n                    newChips[chipType].count += 1;\n                    // Adjust position logic as necessary\n                    // newChips[chipType].position += 10; \n                } else {\n                    newChips[chipType] = { imgSrc, count: 1, position: 0 };\n                }\n    \n                return newChips;\n            });\n        };\n\n        const onBetPlaced = (amount) => {\n            if (gamePause) {\n                setGameMessage(\"Game Paused...\");\n                return;\n            }else if (amount === 0) {\n                setPlayerChips(prev => prev + bet);\n                setGameMessage(\"Place A Bet...\");\n                setBet(0);\n                setBetChips([]);\n            }else if (!gameRunning && playerChips >= amount) {\n                setBet(prevBet => prevBet + amount);\n                setPlayerChips(prevChips => prevChips - amount);\n                \n            } else {\n                return;\n            }\n        };\n        \n        function resetBet(){\n            if(bet!==0){\n                \n                setPlayerChips(playerChips + bet);\n                \n                setBet(0);\n                setBetChips([]);\n            }\n        };\n            \n       \n        \n        const handleNewGame = () => {\n            setSplitAvailable(false);\n            setHand1TurnFinished(false);\n            setHand2TurnFinished(false);\n            setSplitPressed(false);\n            setHitPressed(false);\n            setButtonsHidden(false);\n            setNewRound(true);\n            setGameRunning(true);\n            setShowScores(true);\n            setGameMessage(`Your bet is ${bet}`);\n            const newDeck = new Deck();\n            newDeck.shuffleDeck();\n            setDeck(newDeck);\n            \n            \n            \n            \n            const playerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n\n            setPlayerHand([playerFirstCard, playerSecondCard]);\n            setDealerHand([dealerFirstCard, dealerSecondCard]);\n            \n            \n\n            setTimeout(() => {\n                // Flip all player's cards\n                setPlayerHand(playerHand.map(card => ({ ...card, isFaceDown: false })));\n                \n                // Flip 1st dealercards\n                setDealerHand(dealerHand.map((card, index) => \n                    index === 0 ? { ...card, isFaceDown: false } : card // Flip only the first card\n                ));\n                if(playerFirstCard.rank === playerSecondCard.rank ){\n                    setSplitAvailable(true);\n                };\n            }, 500); // Adjust this delay as needed\n\n            const playerHand = [playerFirstCard,playerSecondCard];\n            setPlayerHand(playerHand);\n        \n            const dealerHand = [dealerFirstCard,{...dealerSecondCard,isFaceDown: true }];\n            setDealerHand(dealerHand);\n            \n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n            const dealerHandValue = calculateHandValue(dealerHand);\n            \n            const dealerHandValueOneCard = calculateHandValue([dealerFirstCard]);\n            setDealerFirstCardValue(dealerHandValueOneCard);\n\n            //checking for blackjack or 2 blackjacks\n            let newOutcome; \n\n            if(playerHandValue===21 && dealerHandValue === 21){\n                \n            \n            setTimeout(()=>{\n                newOutcome = \"Push\";\n                \n                setGameOutcome(newOutcome);\n                const updatedDealerHand = dealerHand.map(card => ({\n                    ...card,\n                    isFaceDown: false,\n                }));\n                setDealerHand(updatedDealerHand);\n                setDealerHandValue(dealerHandValueOneCard);\n            },500);   \n                \n\n            }else if(playerHandValue ===21){\n                setTimeout(()=>{\n                    newOutcome=\"PlayerWins BlackJack\";\n                    setGameOutcome(newOutcome);\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown: false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(dealerHandValueOneCard);\n                },500);\n\n                \n\n            }else if(dealerHandValue ===21){\n\n                \n\n                setTimeout(()=>{\n                    newOutcome=\"DealerWins BlackJack\";\n                    setGameOutcome(newOutcome);;\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown:false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(dealerHandValueOneCard);\n                },500);\n            \n                \n\n            }else{\n                setDealerHandValue(dealerHandValueOneCard);\n            }         \n            \n        };\n\n        const endGame = () => {\n                setGamePause(true);\n                \n                endGameTimeout.current = setTimeout(() => {\n                    setSplitAvailable(false);\n                    setHand1TurnFinished(false);\n                    setHand2TurnFinished(false);\n                    setSplitPressed(false);\n                    setDealerHand([]);\n                    setPlayerHand([]);\n                    setGameOutcome(\"\");\n                    setGameOutcome1(\"\");\n                    setGameOutcome2(\"\");\n                    setGameMessage(\"Place A Bet...\");\n                    setShowScores(false);\n                    setGameRunning(false);\n                    setHitPressed(false);\n                    setTwoHands(false);\n                    setStandPressed(false);\n                    setButtonsHidden(true);\n                    setBet(0);\n                    setBetChips([]);\n                    setGamePause(false);\n                    clearTimeout(endGameTimeout.current);\n                }, 3000);\n        };\n            \n        const handleStand = (newHandValue = playerHandValue,hand = null) => {\n                \n                if(splitPressed){\n\n                    if(hand===\"hand1\" && standPressed == false){\n                        const playerHand1Value = newHandValue;\n                        \n                        setHand1TurnFinished(true);\n                    }\n                    if(hand===\"hand2\" && standPressed == false){\n                        const playerHand2Value = newHandValue;\n                        \n                        setHand2TurnFinished(true);\n                    }\n                    \n                    if(hand1TurnFinished&&hand2TurnFinished){\n                       \n                        setTimeout(()=>{ \n                            let updatedDealerHand = dealerHand.map((card, index) => ({\n                                ...card,\n                                isFaceDown: index === 1 ? false : card.isFaceDown,\n                            }));\n                            setDealerHand(updatedDealerHand);\n                            \n                        //Recalculate dealerHand value and display it by using setTmeout\n                            let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                        \n                            setDealerHandValue(updatedDealerHandValue);\n                            \n                            if(playerHand1Value>21 && playerHand2Value>21){\n                                setGameMessage(\"Bust... Dealer Wins!\");\n                                endGame();\n                                return;\n                            }\n                            const drawCardforDealer = () => {\n                        //check handValue, drawCard until handValue is 17 or higher\n                                if (updatedDealerHandValue < 17 && deck){\n                                    //delay to draw card by 1.5 seconds, card with facedown\n                                    setTimeout(() => {\n                                        const newCard = { ...deck.drawCard(), isFaceDown: true };\n                                        updatedDealerHand = [...updatedDealerHand, newCard];\n                                        setDealerHand(updatedDealerHand);\n                                        //delay displaying last card with face up by 1 seconds\n                                        setTimeout(()=>{\n                                            const newHand = [...updatedDealerHand];\n                                            newHand[newHand.length - 1].isFaceDown = false; \n                                            setDealerHand(newHand);\n                                            \n                                            updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                            setDealerHandValue(updatedDealerHandValue);\n                                        },500);\n                                            \n                                    }, 500);\n        \n                                    setTimeout(()=>{\n                                        if(updatedDealerHandValue < 17){\n                                            setTimeout(()=>{\n                                                drawCardforDealer();\n                                            },1500);\n                                            \n                                        }else {\n                                            setTimeout(()=>{\n                                                finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                            },1500);\n                                            \n                                        }\n                                    },1500);\n                                        \n                                    }else{\n                                        setTimeout(()=>{\n                                            \n                                            finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                        },500);\n                                        \n                                    }\n                            }\n                            \n                            setTimeout(()=>{\n                                drawCardforDealer();\n                            },1500);\n                            \n                        },1000);\n                    }\n                }else{\n                    setStandPressed(true);\n                    // Make 2nd dealer card visible, after 1 second delay\n                setTimeout(()=>{ \n                    let updatedDealerHand = dealerHand.map((card, index) => ({\n                        ...card,\n                        isFaceDown: index === 1 ? false : card.isFaceDown,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    \n                //Recalculate dealerHand value and display it by using setTmeout\n                    let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                \n                    setDealerHandValue(updatedDealerHandValue);\n                \n                    const drawCardforDealer = () => {\n                //check handValue, drawCard until handValue is 17 or higher\n                        if (updatedDealerHandValue < 17 && deck){\n                            //delay to draw card by 1.5 seconds, card with facedown\n                            setTimeout(() => {\n                                const newCard = { ...deck.drawCard(), isFaceDown: true };\n                                updatedDealerHand = [...updatedDealerHand, newCard];\n                                setDealerHand(updatedDealerHand);\n                                //delay displaying last card with face up by 1 seconds\n                                setTimeout(()=>{\n                                    const newHand = [...updatedDealerHand];\n                                    newHand[newHand.length - 1].isFaceDown = false; \n                                    setDealerHand(newHand);\n                                    \n                                    updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                    setDealerHandValue(updatedDealerHandValue);\n                                },500);\n                                    \n                            }, 1000);\n\n                            setTimeout(()=>{\n                                if(updatedDealerHandValue < 17){\n                                    setTimeout(()=>{\n                                        drawCardforDealer();\n                                    },1500);\n                                    \n                                }else {\n                                    setTimeout(()=>{\n                                        finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                    },1500);\n                                    \n                                }\n                            },1500);\n                                \n                            }else{\n                                setTimeout(()=>{\n                                    \n                                    finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                },500);\n                                \n                            }\n                    }\n                    \n                    setTimeout(()=>{\n                        drawCardforDealer();\n                    },1500);\n                    \n                },1000);\n                }\n        }\n\n        const finishDealerTurn = (finalDealerHand,finalDealerHandValue,newHandValue=playerHandValue) => {\n            \n            setTimeout(()=>{\n                setDealerHand(finalDealerHand);\n                setDealerHandValue(finalDealerHandValue);\n            \n                if (splitPressed){\n                    let outcome1=\"\";\n                    let outcome2=\"\";\n                    //playerHand1 outcome\n                    if (finalDealerHandValue > 21) {\n                        outcome1 = \"PlayerWins Bust\";\n                \n                    } else if (playerHand1Value > 21) {\n                        outcome1 = \"DealerWins Bust\";\n                \n                    } else if (playerHand1Value === 21 && finalDealerHandValue !== 21) {\n                        outcome1 = \"PlayerWins\";\n\n                    } else if (finalDealerHandValue === 21 && playerHand1Value !== 21) {\n                        outcome1 = \"DealerWins\";\n        \n                    } else if (playerHand1Value > finalDealerHandValue) {\n                        outcome1 = \"PlayerWins\";\n                \n                    } else if (finalDealerHandValue > playerHand1Value) {\n                        outcome1 = \"DealerWins\";\n\n                    } else {\n                        outcome1 = \"Push\";\n                    }\n                    //playerHand2 outcome\n                    if (finalDealerHandValue > 21) {\n                        outcome2 = \"PlayerWins Bust\";\n                \n                    } else if (playerHand2Value > 21) {\n                        outcome2 = \"DealerWins Bust\";\n                \n                    } else if (playerHand2Value === 21 && finalDealerHandValue !== 21) {\n                        outcome2 = \"PlayerWins\";\n\n                    } else if (finalDealerHandValue === 21 && playerHand2Value !== 21) {\n                        outcome2 = \"DealerWins\";\n        \n                    } else if (playerHand2Value > finalDealerHandValue) {\n                        outcome2 = \"PlayerWins\";\n                \n                    } else if (finalDealerHandValue > playerHand2Value) {\n                        outcome2 = \"DealerWins\";\n\n                    } else {\n                        outcome2 = \"Push\";\n                    }\n                    \n\n                    setGameOutcome1(outcome1);\n                    setGameOutcome2(outcome2);\n                }else{\n                    let outcome=\"\";\n                    if (finalDealerHandValue > 21) {\n                        outcome = \"PlayerWins Bust\";\n                \n                    } else if (newHandValue > 21) {\n                        outcome = \"DealerWins Bust\";\n                \n                    } else if (newHandValue === 21 && finalDealerHandValue !== 21) {\n                        outcome = \"PlayerWins\";\n\n                    } else if (finalDealerHandValue === 21 && newHandValue !== 21) {\n                        outcome = \"DealerWins\";\n        \n                    } else if (newHandValue > finalDealerHandValue) {\n                        outcome = \"PlayerWins\";\n                \n                    } else if (finalDealerHandValue > newHandValue) {\n                        outcome = \"DealerWins\";\n\n                    } else {\n                        outcome = \"Push\";\n                    }\n\n                    setGameOutcome(outcome);\n                }\n            },500);\n            \n        };\n        \n\n        const handleDouble = () =>{\n            \n                // Check if doubling down is allowed (typically, you can only double down on your first two cards)\n                if (playerHand.length !== 2) {\n                    setGameMessage(\"Doubling down is not allowed at this time.\");\n                    return;\n                }\n                setStandPressed(true);\n                // Check if the player has enough chips to double the bet\n                if (playerChips >= bet && !gamePause) {\n                    setPlayerChips((prevChips) => prevChips - bet); // Deduct the additional bet amount from player's chips\n                    setBet((prevBet) => prevBet * 2); // Double the bet\n                    \n                    // Draw one additional card for the player and add it to their hand\n                        setTimeout(() => {\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand = [...playerHand, newCard];\n                            setPlayerHand(updatedPlayerHand);\n                            //delay displaying last card with face up by 0.5 seconds\n                            setTimeout(()=>{\n                                const newHand = [...updatedPlayerHand];\n                                newHand[newHand.length - 1].isFaceDown = false; \n                                setPlayerHand(newHand);\n\n                                const newPlayerHandValue = calculateHandValue(newHand);\n                                \n                                setPlayerHandValue(newPlayerHandValue);\n                                // Check if the player is bust after doubling down\n                                setTimeout(()=>{\n                                    if (newPlayerHandValue > 21) {\n                                    const updatedDealerHand = dealerHand.map((card, index) => ({\n                                        ...card,\n                                        isFaceDown: index === 1 ? false : card.isFaceDown,\n                                    }));\n                                    setDealerHand(updatedDealerHand);\n                                    setGameOutcome(\"DealerWins Bust\");\n                                } else {\n                                    handleStand(newPlayerHandValue);\n                                } \n                                },500);\n                            },500);\n                        }, 500);}\n                        else {\n                            // Not enough chips or game is paused\n                            setGameMessage(\"Not enough chips to double down.\");\n                        }\n\n        };\n\n        const handleHit = (hand = null) =>{\n            let outcome1;\n            let outcome2;\n            if(splitPressed){\n                if(hand1TurnFinished && hand2TurnFinished){\n                    let newOutcome =\"DealerWins\";\n                \n                    let updatedDealerHand = dealerHand.map((card, index) => ({\n                        ...card,\n                        isFaceDown: index === 1 ? false : card.isFaceDown,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                    setDealerHandValue(updatedDealerHandValue);\n                    setGameOutcome(newOutcome);\n                    setGameMessage(\"Bust... Dealer Wins!\");\n                    endGame();\n                }else{\n                    if(hand===\"hand1\"){\n                        if(hand1TurnFinished){\n                            return;\n                        }else{\n                            if(playerHand1Value ===21){\n                                setHand1TurnFinished(true);\n                                return;\n                            }else\n                            if(deck.cards.length > 0){\n                                const newCard = { ...deck.drawCard(), isFaceDown: true };\n                                const updatedPlayerHand1 = [...playerHand1, newCard];\n                \n                                setPlayerHand1(updatedPlayerHand1);\n                \n                                setTimeout(() => {\n                                    const newHand = [...updatedPlayerHand1];\n                                    newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                    setPlayerHand1(newHand);\n                                },500);\n                                const playerHand1Value = calculateHandValue(updatedPlayerHand1);\n                            \n                                setPlayerHand1Value(playerHand1Value);\n                                if(playerHand1Value > 21){\n                                    outcome1 = \"DealerWins Bust\";\n                                    setHand1TurnFinished(true);\n                                    setGameOutcome1(outcome1);\n                                    return;\n                                }\n                            }\n                        }\n                        \n                    }else if(hand===\"hand2\"){\n                        if(hand2TurnFinished){\n                            return;\n                        }else{\n                            if(playerHand2Value ===21){\n                                setHand1TurnFinished(true);\n                                return;\n                            }else\n                            if(deck.cards.length > 0){\n                                const newCard = { ...deck.drawCard(), isFaceDown: true };\n                                const updatedPlayerHand2 = [...playerHand2, newCard];\n                \n                                setPlayerHand2(updatedPlayerHand2);\n                \n                                setTimeout(() => {\n                                    const newHand = [...updatedPlayerHand2];\n                                    newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                    setPlayerHand2(newHand);\n                                },500);\n                                const playerHand2Value = calculateHandValue(updatedPlayerHand2);\n                            \n                                setPlayerHand2Value(playerHand2Value);\n                                if(playerHand2Value > 21){\n                                    outcome2 = \"DealerWins Bust\";\n                                    setHand2TurnFinished(true);\n                                    setGameOutcome1(outcome2);\n                                    return;\n                                }\n                            }\n                        }\n                        \n                    }    \n                }\n                \n            }else{\n                setHitPressed(true);\n                if(deck.cards.length > 0){\n                const newCard = { ...deck.drawCard(), isFaceDown: true };\n                const updatedPlayerHand = [...playerHand, newCard];\n\n                setPlayerHand(updatedPlayerHand);\n\n                setTimeout(() => {\n                    const newHand = [...updatedPlayerHand];\n                    newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                    setPlayerHand(newHand);\n                },500);\n\n                const playerHandValue = calculateHandValue(updatedPlayerHand);\n                \n                setPlayerHandValue(playerHandValue);\n                let newOutcome;\n\n                if(playerHandValue>21){\n                    newOutcome =\"DealerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                \n                    let updatedDealerHand = dealerHand.map((card, index) => ({\n                        ...card,\n                        isFaceDown: index === 1 ? false : card.isFaceDown,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                    setDealerHandValue(updatedDealerHandValue);\n                }else if(playerHandValue ===21){\n            \n                    let updatedDealerHand = dealerHand.map((card, index) => ({\n                        ...card,\n                        isFaceDown: index === 1 ? false : card.isFaceDown,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    //Recalculate dealerHand value and display it by using setTmeout\n                    let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                    setDealerHandValue(updatedDealerHandValue);\n        \n                    const drawCardforDealer = () => {\n                        if (updatedDealerHandValue < 17 && deck){\n                                const newCard = deck.drawCard();\n                                updatedDealerHand = [...updatedDealerHand,newCard];\n                                updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n        \n                                if(updatedDealerHandValue < 17){\n                                    drawCardforDealer();\n                                }\n                            }\n                    }\n        \n                    drawCardforDealer();\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(updatedDealerHandValue);\n        \n                    if(updatedDealerHandValue>playerHandValue && updatedDealerHandValue<=21){\n                        newOutcome=\"DealerWins\";\n                        \n                        setGameOutcome(newOutcome);\n                    \n                    }else if(updatedDealerHandValue===playerHandValue){\n\n                        newOutcome=\"Push\";\n                        \n                        setGameOutcome(newOutcome);\n\n\n            \n                    }else if(updatedDealerHandValue >21){\n                        newOutcome=\"PlayerWins\";\n                        \n                        setGameOutcome(newOutcome);\n\n                    }\n                    else{\n                        newOutcome=\"PlayerWins\";\n                        \n                        setGameOutcome(newOutcome);\n                    }\n                    setGameRunning(false);\n                }\n            }\n            }\n            \n        }\n\n        const getCardValue = (rank) =>{\n            const cardsValue = {\n                'two': 2,\n                'three': 3,\n                'four': 4,\n                'five': 5,\n                'six': 6,\n                'seven': 7,\n                'eight': 8,\n                'nine': 9,\n                'ten': 10,\n                'jack': 10,\n                'queen': 10,\n                'king': 10,\n                'ace': 11,\n            }\n            return cardsValue[rank] || 0;\n        }\n\n        const calculateHandValue = (hand) => {\n            let total = 0;\n            let aceCount = 0;\n\n            hand.forEach(card => {\n                let value = getCardValue(card.rank);\n                if (card.rank === 'ace') {\n                    aceCount++;\n                }\n                total += value;\n            })\n            // Adjust score based on how many ace, initial ace value is 11, \n            //    subtract 10 from total score until score is less than 21 \n            //    AND number of aces more than 0\n            while (total > 21 && aceCount > 0) {\n                total -= 10;\n                aceCount -= 1;\n            }\n\n            return total;\n        }\n\n        function handleGameResult() {\n            const finalBet = bet; // Capture the bet amount before it gets reset\n        \n            let outcomeMessage;\n            let outcomeMessage1;\n            let outcomeMessage2;\n            let winAmount = 0;\n            if(splitPressed){\n                if(gameOutcome2===\"\" || gameOutcome1 ===\"\"){\n                    return;\n                }else{\n                    switch(gameOutcome1) {\n                        case \"PlayerWins BlackJack\":\n                            outcomeMessage1 = `BlacJack 1st hand, win: ${betHand1*1.5}`;\n                            winAmount = betHand1 + betHand1 * 1.5; \n                            break;\n                        case \"DealerWins BlackJack\":\n                            outcomeMessage1 = `BlacJack, Dealer wins...1st hand -$${betHand1}`;\n                            break;\n                        case \"DealerWins Bust\":\n                            outcomeMessage1 = `Bust! Dealer Wins! 1st hand  -$${betHand1}`;\n                            break;\n                        case \"DealerWins\":\n                            outcomeMessage1 = `Dealer Wins...1st hand -$${betHand1}`;\n                            break;\n                        case \"PlayerWins Bust\":\n                            outcomeMessage1 = `Dealer Bust...1st hand Win! +$${betHand1}`;\n                            winAmount = betHand1 * 2; \n                            break;\n                        case \"PlayerWins\":\n                            outcomeMessage1 = `1st Hand Win! +$${betHand1}!`;\n                            winAmount = betHand1 * 2; \n                            break;\n                        case \"Push\":\n                            outcomeMessage1 = `Push! 1st Hand Tie... Bet returned: $${betHand1}`;\n                            winAmount = betHand1; // The bet is returned to the player\n                            break;\n                        default:\n                            outcomeMessage1 = \"Unknown outcome.\";\n                            break;\n                    }\n                    switch(gameOutcome2) {\n                        case \"PlayerWins BlackJack\":\n                            outcomeMessage2 = `BlacJack 2nd hand, win: ${betHand2*1.5}`;\n                            winAmount = winAmount + betHand2 + betHand2 * 1.5; \n                            break;\n                        case \"DealerWins BlackJack\":\n                            outcomeMessage2 = `BlacJack, Dealer wins...2nd hand -$${betHand2}`;\n                            break;\n                        case \"DealerWins Bust\":\n                            outcomeMessage2 = `Bust! Dealer Wins! 2nd hand  -$${betHand2}`;\n                            break;\n                        case \"DealerWins\":\n                            outcomeMessage2 = `Dealer Wins...2nd hand -$${betHand2}`;\n                            break;\n                        case \"PlayerWins Bust\":\n                            outcomeMessage2 = `Dealer Bust...2nd hand Win! +$${betHand2}`;\n                            winAmount = winAmount+betHand2 * 2; \n                            break;\n                        case \"PlayerWins\":\n                            outcomeMessage2 = `2nd Hand Win! +$${betHand2}!`;\n                            winAmount = winAmount+betHand2 * 2; \n                            break;\n                        case \"Push\":\n                            outcomeMessage2 = `Push! 1st Hand Tie... Bet returned: $${betHand2}`;\n                            winAmount = winAmount+betHand2; // The bet is returned to the player\n                            break;\n                        default:\n                            outcomeMessage2 = \"Unknown outcome.\";\n                            break;\n                    }\n                    let finalMessage = outcomeMessage1 + \" \" +outcomeMessage2+\"total win: \"+winAmount;\n                    setGameMessage(finalMessage);\n                }\n            }else{\n                switch(gameOutcome) {\n                    case \"PlayerWins BlackJack\":\n                        outcomeMessage = `BlacJack, You Won +$${finalBet*1.5}!!!`;\n                        winAmount = finalBet + finalBet * 1.5; \n                        break;\n                    case \"DealerWins BlackJack\":\n                        outcomeMessage = `BlacJack, Dealer wins... -$${finalBet}`;\n                        break;\n                    case \"DealerWins Bust\":\n                        outcomeMessage = `Bust! Dealer Wins! -$${finalBet}`;\n                        break;\n                    case \"DealerWins\":\n                        outcomeMessage = `Dealer Wins... -$${finalBet}`;\n                        break;\n                    case \"PlayerWins Bust\":\n                        outcomeMessage = `Dealer Bust... Player Wins! +$${finalBet}`;\n                        winAmount = finalBet * 2; \n                        break;\n                    case \"PlayerWins\":\n                        outcomeMessage = `You Won +$${finalBet}!`;\n                        winAmount = finalBet * 2; \n                        break;\n                    case \"Push\":\n                        outcomeMessage = `Push! Tie... Bet returned: $${finalBet}`;\n                        winAmount = finalBet; // The bet is returned to the player\n                        break;\n                    default:\n                        outcomeMessage = \"Unknown outcome.\";\n                        break;\n                }\n            \n                setGameMessage(outcomeMessage);\n\n            }\n            if (winAmount > 0) {\n                setPlayerChips(prevChips => prevChips + winAmount);\n            }\n            endGame();\n        }\n        \n        useEffect(() => {\n            if (playerHand.length > 0) {\n                const newPlayerHandValue = calculateHandValue(playerHand);\n                setPlayerHandValue(newPlayerHandValue);\n        \n                // Move the logic to determine if the game should proceed to handleStand or another function here\n                if (newPlayerHandValue > 21) {\n                    setGameOutcome(\"DealerWins Bust\");\n                    // Additional logic for dealer's turn can go here\n                } else {\n                    // Since handleStand might rely on updated hand value, ensure it's called here or in response to updated state\n                    // handleStand();\n                }\n            }\n        }, [playerHand]); // Only re-run the effect if playerHand changes\n        \n        useEffect(() => {\n            \n            const playerHandValue = calculateHandValue(playerHand);\n        \n            const dealerHandValue = calculateHandValue(dealerHand);\n        \n            setPlayerHandValue(playerHandValue);\n            setDealerHandValue(dealerHandValue);\n        }, [playerHand,dealerHand]);\n    \n        useEffect(() => {\n\n            if (isFirstRender.current) {\n                isFirstRender.current = false;\n                return;\n            }\n            if(splitPressed){\n                \n                handleGameResult();\n            }else if(gameOutcome) {\n                \n                handleGameResult();\n            }\n            \n        }, [gameOutcome,gameOutcome1,gameOutcome2]);\n\n        useEffect(() => {\n            if (isFirstRender.current) {\n                isFirstRender.current = false;\n                return;\n            }\n            if (bet > 0) {\n                setGameMessage(`Bet of $${bet}`);\n            }\n        }, [bet]);\n    \n        useEffect(() => {\n            return () => {\n                clearTimeout(endGameTimeout.current);\n            };\n        }, []);\n\n        useEffect(() => {\n            if (isFirstRender.current) {\n                isFirstRender.current = false;\n                return;\n            }\n            \n        }, [bet, playerChips]);\n\n        useEffect(()=>{\n            if (hand1TurnFinished && hand2TurnFinished) {\n                \n                // Now you can safely perform actions that depend on both hands being finished.\n                setStandPressed(true);\n                handleStand();\n                // Any additional logic that needs to run after both hands are finished can go here.\n            }\n        },[hand1TurnFinished,hand2TurnFinished])\n\n        return (\n            <>\n                <Header\n                playerHandValue={playerHandValue}\n                dealerHandValue={dealerHandValue}\n                playerChips={playerChips}\n                />\n                \n\n                <div className=\"game-area\">\n                    <div id='score-bubble'>\n                        <div id=\"dealer-score-bubble\" \n                            style={\n                            {visibility: showScores ? 'visible' : 'hidden'}}>\n                            {dealerHand[1] && dealerHand[1].isFaceDown ? dealerFirstCardValue : dealerHandValue}\n                        </div>\n                    </div>\n                    \n                    <div id=\"dealer-message-box\">\n                        <div id=\"dealerhand-fixedbox\">\n                            <Player hand={dealerHand} isDealer={true} />\n                        </div>\n \n                        <div className=\"message-container\">\n                            <div className=\"message-box\">{gameMessage}</div>\n                        </div>\n                    </div>\n                    \n\n                    {\n                    twoHands ? (\n                        <div id=\"player-2hands-box\">\n                            \n                            <div id=\"player-hand1\">\n                                \n                                <Player hand={playerHand1} isDealer={false} />\n                                \n                                <div id='score-bubble'>\n                                    <div id=\"player1-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                        {playerHand1Value}\n                                    </div>\n                                </div>\n                                <div id=\"split-buttons-box\">\n                                    <img    \n                                            src={btnStand} \n                                            className={`split-btn-stand ${standPressed ? 'disabled' : ''}`}\n                                            alt='stand-button' \n                                            title=\"Stand\"\n                                            onClick={!standPressed ? ()=>handleStand(playerHand1Value,\"hand1\") : undefined}\n                                            style={{cursor: standPressed?'not-allowed':'pointer'}}\n                                        \n                                    />\n                                    \n                                    <img    \n                                            src={btnHit} \n                                            className={`split-btn-hit ${standPressed ? 'disabled': ''}`}\n                                            alt='hit-button' \n                                            title=\"Hit\"\n                                            onClick={!standPressed ? ()=>handleHit(\"hand1\") : undefined}\n                                            style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                                \n                                    />\n                                \n                                </div>\n                            </div>\n\n                            <div id=\"player-hand2\">\n                                \n                                <Player hand={playerHand2} isDealer={false} /> \n\n                                <div id='score-bubble'>\n                                    <div id=\"player2-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>\n                                        {playerHand2Value}\n                                    </div>\n                                </div>\n                                <div \n                                    id=\"split-buttons-box\" >\n\n                                    <img    \n                                            src={btnStand} \n                                            className={`split-btn-stand ${standPressed ? 'disabled' : ''}`}\n                                            alt='stand-button' \n                                            title=\"Stand\"\n                                            onClick={!standPressed ? ()=>handleStand(playerHand2Value,\"hand2\") : undefined}\n                                            style={{cursor: standPressed?'not-allowed':'pointer'}}\n\n                                    />\n                                \n                                    \n                                    <img    \n                                            src={btnHit} \n                                            className={`split-btn-hit ${standPressed ? 'disabled': ''}`}\n                                            alt='hit-button' \n                                            title=\"Hit\"\n                                            onClick={!standPressed ? ()=>handleHit(\"hand2\") : undefined}\n                                            style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                                \n                                    />\n                                \n                                </div>\n                            </div>\n                        </div>\n                    ) : (\n                        <div id=\"player-hand-box\">\n                                \n                                <Player hand={playerHand} isDealer={false} />\n                                \n                                <div id='score-bubble'>\n                                    <div id=\"player-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                        {playerHandValue}\n                                    </div>\n                                </div>\n                            \n                        </div>\n                    )}\n                </div>\n                \n                <div id='bet-main-container'>\n                        <div id='bet-container-box'\n                            style={{\n                            visibility: !gameRunning ? 'visible' : 'hidden', \n                            display: 'flex', \n                            gap: '8px', \n                            justifyContent: 'center',\n                            position:'relative',\n                            }}\n                        \n                            >\n                            \n                        \n                            {Object.entries(betChips).map(([chipType, { imgSrc, count, position }], index) => (\n                                Array.from({ length: count }).map((_, chipIndex) => (\n                                    <img \n                                        key={`${chipType}-${chipIndex}`}\n                                        src={imgSrc}\n                                        className='bet-chip-img'\n                                        style={{ \n                                            position: 'absolute', \n                                            // transform:'translateY(15px)',\n                                            bottom: position + chipIndex * 5 -25,\n                                            left: `calc(50% + ${index * (chipWidth + gap) - totalWidth / 2}px)`\n                                        }} \n                                    />\n                                ))\n                            ))}    \n                        </div>\n                </div>\n\n\n                <Controls\n                handleHit={handleHit}\n                handleStand={handleStand}\n                handleDouble={handleDouble}\n                onNewGame={handleNewGame}\n                gameRunning={gameRunning}\n                onBetPlaced={onBetPlaced}\n                bet={bet}\n                buttonsHidden={buttonsHidden}\n                handleChipClick={handleChipClick}\n                standPressed={standPressed}\n                splitAvailable={splitAvailable}\n                handleSplit={handleSplit}\n                hitPressed={hitPressed}\n                twoHands={twoHands}\n                />\n            </>\n        );\n    };\n    export default GameBoard;","import React from 'react'\nimport IMG from './images/background1.png'\nimport LOGO from './images/logo-blackjack.png'\nconst LoadingOverlay = ({isVisible}) => {\n    if (!isVisible) {\n        return null;\n    }\n\n    return(\n        <div style={{\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            display: 'flex',\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'rgba(0, 0, 0, 1)', // Semi-transparent overlay\n            zIndex: 100, // Adjust as needed\n            }}>\n        <div>\n        <img src={LOGO} className=\"logo-img\" alt=\"logo loading\"/>\n        <img src={IMG} className=\"casino-img\" alt=\"Loading\"/>\n        </div>\n        \n\n        </div>\n    )\n}\nexport default LoadingOverlay","import React, { useState, useEffect } from 'react';\nimport './blackjack.css';\nimport GameBoard from './GameBoard';\nimport LoadingOverlay from './LoadingOverlay'\n\nconst BlackJack = () => {\n    const [isLoading,setIsLoading] = useState(true);\n    const [isFlipped, setIsFlipped] = useState(false);\n    const [opacity, setOpacity] = useState(0.45); // Initial opacity\n    const [zIndex, setZIndex] = useState(-1);\n    const [isGameActive, setIsGameActive] = useState(false);\n\n    const handleGameRunningChange = (isRunning) => {\n      setIsGameActive(isRunning); // Use the renamed state setter\n  };\n\n    const toggleFlip = () => {\n        if (!isGameActive) { // Use the renamed state variable\n            setIsFlipped(!isFlipped);\n            setTimeout(() => {\n                setOpacity(opacity === 0.45 ? 1 : 0.45);\n                setZIndex(zIndex === -1 ? 1 : -1);\n            }, 300);\n        }\n    };\n    useEffect(()=>{\n        const timer = setTimeout(()=>{\n          setIsLoading(false);\n        },6000);\n      \n        return () => clearTimeout(timer);\n      },[]);\n    return (\n        <>\n            {/* <div id=\"container\" className={isFlipped ? 'flipped' : ''} onClick={toggleFlip} style={{'--bg-opacity': opacity, '--z-index': zIndex}}> */}\n            <div id=\"container\">\n                <LoadingOverlay isVisible={isLoading} />\n                <GameBoard onGameRunningChange={handleGameRunningChange} />\n            </div>\n        </>\n    );\n};\n\nexport default BlackJack;\n","// import React,{ useState, useEffect } from \"react\"\nimport React, { useEffect, useState } from 'react'\nimport './App.css'\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Footer from \"./Footer\";\n// import Bootstrap from \"./Boot\";\n// import './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n// import './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \nimport BlackJack from './BlackJack/BlackJack'\n\n\nexport default function App() {\n\n  \n//   const [isLoading, setIsLoading] = useState(true); \n//   const [darkMode, setDarkMode] = useState(false);\n\n\n//   function toggleDarkMode() {\n//     setDarkMode(!darkMode);\n//   }\n//   useEffect(() => {\n//     document.body.style.backgroundColor = darkMode ? '#23252C' : '#ccc';\n//     document.body.style.color = darkMode ? '#ccc' : '#23252C';\n//   }, [darkMode]);\n\n//   useEffect(() => {\n//     if (darkMode) {\n//         document.body.classList.add(\"dark-mode\");\n//     } else {\n//         document.body.classList.remove(\"dark-mode\");\n//     }\n// }, [darkMode]);\n\n\n\n\n    return (\n      <>\n      \n\n      <BlackJack/>\n     \n        {/* <Header/>\n        <Main/>\n        <Footer/> */}\n        \n      </> \n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \n// import $ from 'jquery'; \n// import Popper from 'popper.js'; \nimport './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}