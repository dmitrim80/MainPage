{"version":3,"sources":["BlackJack/images/stand-button2.png","BlackJack/images/hit-button2.png","BlackJack/images/vegas-back2.png","BlackJack/images/ace_of_hearts.png","BlackJack/images/2_of_hearts.png","BlackJack/images/3_of_hearts.png","BlackJack/images/4_of_hearts.png","BlackJack/images/5_of_hearts.png","BlackJack/images/6_of_hearts.png","BlackJack/images/7_of_hearts.png","BlackJack/images/8_of_hearts.png","BlackJack/images/9_of_hearts.png","BlackJack/images/10_of_hearts.png","BlackJack/images/jack_of_hearts.png","BlackJack/images/queen_of_hearts.png","BlackJack/images/king_of_hearts.png","BlackJack/images/ace_of_diamonds.png","BlackJack/images/2_of_diamonds.png","BlackJack/images/3_of_diamonds.png","BlackJack/images/4_of_diamonds.png","BlackJack/images/5_of_diamonds.png","BlackJack/images/6_of_diamonds.png","BlackJack/images/7_of_diamonds.png","BlackJack/images/8_of_diamonds.png","BlackJack/images/9_of_diamonds.png","BlackJack/images/10_of_diamonds.png","BlackJack/images/jack_of_diamonds.png","BlackJack/images/queen_of_diamonds.png","BlackJack/images/king_of_diamonds.png","BlackJack/images/ace_of_spades.png","BlackJack/images/2_of_spades.png","BlackJack/images/3_of_spades.png","BlackJack/images/4_of_spades.png","BlackJack/images/5_of_spades.png","BlackJack/images/6_of_spades.png","BlackJack/images/7_of_spades.png","BlackJack/images/8_of_spades.png","BlackJack/images/9_of_spades.png","BlackJack/images/10_of_spades.png","BlackJack/images/jack_of_spades.png","BlackJack/images/queen_of_spades.png","BlackJack/images/king_of_spades.png","BlackJack/images/ace_of_clubs.png","BlackJack/images/2_of_clubs.png","BlackJack/images/3_of_clubs.png","BlackJack/images/4_of_clubs.png","BlackJack/images/5_of_clubs.png","BlackJack/images/6_of_clubs.png","BlackJack/images/7_of_clubs.png","BlackJack/images/8_of_clubs.png","BlackJack/images/9_of_clubs.png","BlackJack/images/10_of_clubs.png","BlackJack/images/jack_of_clubs.png","BlackJack/images/queen_of_clubs.png","BlackJack/images/king_of_clubs.png","BlackJack/images/5-chip-v2.png","BlackJack/images/10-chip-v2.png","BlackJack/images/25-chip-v2.png","BlackJack/images/50-chip-v2.png","BlackJack/images/100-chip-v2.png","BlackJack/images/250-chip-v2.png","BlackJack/images/double-button2.png","BlackJack/images/clear-button2.png","BlackJack/images/bet-button2.png","BlackJack/images/split-button.png","BlackJack/images/logo-blackjack.png","BlackJack/Deck.js","BlackJack/Card.js","BlackJack/Player.js","BlackJack/Controls.js","BlackJack/Header.js","BlackJack/GameRecap.js","BlackJack/GameHistory.js","BlackJack/GameBoard.js","BlackJack/LoadingOverlay.js","BlackJack/BlackJack.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Deck","constructor","this","cards","createDeck","suits","ranks","deck","suit","rank","push","shuffleDeck","i","length","random","Math","floor","drawCard","pop","cardImages","heartsAce","heartsTwo","heartsThree","heartsFour","heartsFive","heartsSix","heartsSeven","heartsEight","heartsNine","heartsTen","heartsJack","heartsQueen","heartsKing","diamondsAce","diamondsTwo","diamondsThree","diamondsFour","diamondsFive","diamondsSix","diamondsSeven","diamondsEight","diamondsNine","diamondsTen","diamondsJack","diamondsQueen","diamondsKing","spadesAce","spadesTwo","spadesThree","spadesFour","spadesFive","spadesSix","spadesSeven","spadesEight","spadesNine","spadesTen","spadesJack","spadesQueen","spadesKing","clubsAce","clubsTwo","clubsThree","clubsFour","clubsFive","clubsSix","clubsSeven","clubsEight","clubsNine","clubsTen","clubsJack","clubsQueen","clubsKing","cardBack","Card","_ref","isFaceDown","React","createElement","className","concat","src","alt","Player","hand","isDealer","Fragment","id","map","card","index","key","Controls","onNewGame","handleStand","handleDouble","handleHit","gameRunning","onBetPlaced","bet","buttonsHidden","handleChipClick","standPressed","handleSplit","splitAvailable","hitPressed","twoHands","setPreviousBet","clearBet","previousBet","setBet","setBetChips","playerChips","chips","value","img","chip5","chip10","chip25","chip50","chip100","chip250","btnDouble","title","onClick","undefined","style","cursor","btnStand","btnHit","btnSplit","btnBet","btnClear","height","overflow","visibility","display","gap","justifyContent","transform","chip","event","Header","playerHandValue","dealerHandValue","result","progressBarWidth","width","role","aria-label","GameRecap","gameResultsCount","results","fontSize","totalGamesPlayed","gamesWon","gamesLoss","numberOfTie","numberOfBusts","numberOfBlackJacksByPlayer","numberOfBlackJacksByDealer","numberOfSplitsAvailable","numberOfsplitsPlayed","totalAmountOfBetsLost","numberOfWinsWith2Cards","totalAmountOfBets","totalAmountOfBetsWon","GameHistory","gameRoundsHistory","slice","reverse","round","roundNumber","dealerHand","join","playerHand","outcome","GameBoard","onGameRunningChange","setDeck","useState","setDealerHand","dealerHandText","setDealerHandText","setPlayerHand","playerHandText","setPlayerHandText","setGameRunning","setButtonsHidden","setPlayerHandValue","setDealerHandValue","setPlayerChips","gameMessage","setGameMessage","gameOutcome","setGameOutcome","gameOutcome1","setGameOutcome1","gameOutcome2","setGameOutcome2","showScores","setShowScores","endGameTimeout","useRef","gamePause","setGamePause","betChips","totalChipTypes","Object","keys","totalWidth","dealerFirstCardValue","setDealerFirstCardValue","isFirstRender","setStandPressed","setSplitAvailable","playerHand1","setPlayerHand1","playerHand2","setPlayerHand2","setTwoHands","playerHand1Value","setPlayerHand1Value","playerHand2Value","setPlayerHand2Value","setHitPressed","betHand1","setBetHand1","betHand2","setBetHand2","hand1TurnFinished","setHand1TurnFinished","hand2TurnFinished","setHand2TurnFinished","splitPressed","setSplitPressed","gamesCount","setGamesCount","setResult","setProgressBarWidth","setRoundNumber","roundOutcome","setRoundOutcome","setGameRoundsHistory","setGameResultsCount","numberOfDoubles","cardToString","convertHandToText","playerWins","prevState","playerLoss","playerPush","playerBlackJack","dealerBlackJack","playerBusts","winWithOutHit","currentBet","playerBetsWon","betWon","betsWon","playerBetsLost","betLost","betsLost","newBet","sendingPreviousBet","arguments","prev","prevBet","prevChips","asignPreviousBet","endGame","roundResults","newRoundResults","prevHistory","prevRoundNumber","prevResult","count","current","setTimeout","clearTimeout","newHandValue","updatedDealerHand","updatedDealerHandValue","calculateHandValue","drawCardforDealer","newCard","newHand","finishDealerTurn","finalDealerHand","finalDealerHandValue","outcome1","outcome2","newOutcome","updatedPlayerHand1","updatedPlayerHand2","updatedPlayerHand","total","aceCount","forEach","useEffect","newPlayerHandText","newDealerHandText","newWidth","timeoutId","handleGameResult","splitHand1","betOneHand","bet1","bet2","betOutcome","bet1Outcome","bet2Outcome","newOutcomeMessage","newOutcomeMessage1","newOutcomeMessage2","position","entries","_ref2","chipType","imgSrc","Array","from","_","chipIndex","replace","bottom","left","console","log","newPlayerHandValue","handleNewGame","newDeck","playerFirstCard","playerSecondCard","dealerFirstCard","dealerSecondCard","dealerHandValueOneCard","amount","stopPropagation","currentChips","newChips","playerHand1SecondCard","playerHand2SecondCard","LoadingOverlay","isVisible","LOGO","BlackJack","isLoading","setIsLoading","opacity","setOpacity","isGameActive","setIsGameActive","fadeOutTimer","removeOverlayTimer","isRunning","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,kBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,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","file":"static/js/main.d37628f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stand-button2.b6985f69.png\";","module.exports = __webpack_public_path__ + \"static/media/hit-button2.2121fae0.png\";","module.exports = __webpack_public_path__ + \"static/media/vegas-back2.6fd38ed5.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_hearts.41453bfa.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_hearts.f97ad85b.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_hearts.1c16fe10.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_hearts.5ad913da.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_hearts.8f6a2068.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_hearts.9cd2258c.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_hearts.a9afa10f.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_hearts.e6c01b13.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_hearts.cdb8fda5.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_hearts.2e6327a6.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_hearts.260cdba6.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_hearts.cf894646.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_hearts.37b5b9d7.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_diamonds.60b16fda.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_diamonds.0b5b5249.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_diamonds.b529e1c1.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_diamonds.58bd0a63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_diamonds.e27b4b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_diamonds.ee5053d4.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_diamonds.df3e8e93.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_diamonds.8afee604.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_diamonds.86608eb9.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_diamonds.4324d712.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_diamonds.ac2092c1.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_diamonds.d5647c19.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_diamonds.1a5882a6.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_spades.ce4f163f.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_spades.2354275d.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_spades.ad02dc95.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_spades.df185c63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_spades.aa8a0720.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_spades.5d221b2a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_spades.c0f5e5f9.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_spades.74766755.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_spades.e5b29fde.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_spades.2401fe36.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_spades.92aff044.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_spades.6d100fc3.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_spades.9b18a729.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_clubs.07d1c180.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_clubs.c83a7af4.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_clubs.23a7a6ac.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_clubs.02deab49.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_clubs.3781bf44.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_clubs.9c2fdf6a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_clubs.112be1df.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_clubs.6ed0b85e.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_clubs.784ea770.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_clubs.c29b28f3.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_clubs.1861c1e4.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_clubs.9e84dd75.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_clubs.2ad9bff3.png\";","module.exports = __webpack_public_path__ + \"static/media/5-chip-v2.5a524f75.png\";","module.exports = __webpack_public_path__ + \"static/media/10-chip-v2.3a023e24.png\";","module.exports = __webpack_public_path__ + \"static/media/25-chip-v2.c7981237.png\";","module.exports = __webpack_public_path__ + \"static/media/50-chip-v2.b270a5eb.png\";","module.exports = __webpack_public_path__ + \"static/media/100-chip-v2.56f3f00f.png\";","module.exports = __webpack_public_path__ + \"static/media/250-chip-v2.b303ef66.png\";","module.exports = __webpack_public_path__ + \"static/media/double-button2.ae841ef6.png\";","module.exports = __webpack_public_path__ + \"static/media/clear-button2.00626382.png\";","module.exports = __webpack_public_path__ + \"static/media/bet-button2.0ae68190.png\";","module.exports = __webpack_public_path__ + \"static/media/split-button.97e0472c.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-blackjack.96aa3714.png\";","class Deck{\n    constructor(){\n        this.cards = this.createDeck();\n    }\n\n    createDeck(){\n        const suits = [\"hearts\", \"diamonds\",\"spades\",\"clubs\"];\n        const ranks = [\"ace\", \"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"jack\",\"queen\",\"king\"];\n        const deck = [];\n        \n        for (const suit of suits){\n            for(const rank of ranks){\n                deck.push({suit,rank});\n            }\n        }\n        return deck;\n    }\n    \n    shuffleDeck(){\n        for(let i = this.cards.length - 1; i>0;i-- ){\n            const random = Math.floor(Math.random()*(i+1));\n            [this.cards[i],this.cards[random]] = [this.cards[random],this.cards[i]];\n        }\n    }\n\n    drawCard(){\n        return this.cards.pop();\n    }\n}\nexport default Deck;","import React from 'react'\nimport cardBack from './images/vegas-back2.png';\nimport heartsAce from './images/ace_of_hearts.png';\nimport heartsTwo from './images/2_of_hearts.png';\nimport heartsThree from './images/3_of_hearts.png';\nimport heartsFour from './images/4_of_hearts.png';\nimport heartsFive from './images/5_of_hearts.png';\nimport heartsSix from './images/6_of_hearts.png';\nimport heartsSeven from './images/7_of_hearts.png';\nimport heartsEight from './images/8_of_hearts.png';\nimport heartsNine from './images/9_of_hearts.png';\nimport heartsTen from './images/10_of_hearts.png';\nimport heartsJack from './images/jack_of_hearts.png';\nimport heartsQueen from './images/queen_of_hearts.png';\nimport heartsKing from './images/king_of_hearts.png';\n\nimport diamondsAce from './images/ace_of_diamonds.png';\nimport diamondsTwo from './images/2_of_diamonds.png';\nimport diamondsThree from './images/3_of_diamonds.png';\nimport diamondsFour from './images/4_of_diamonds.png';\nimport diamondsFive from './images/5_of_diamonds.png';\nimport diamondsSix from './images/6_of_diamonds.png';\nimport diamondsSeven from './images/7_of_diamonds.png';\nimport diamondsEight from './images/8_of_diamonds.png';\nimport diamondsNine from './images/9_of_diamonds.png';\nimport diamondsTen from './images/10_of_diamonds.png';\nimport diamondsJack from './images/jack_of_diamonds.png';\nimport diamondsQueen from './images/queen_of_diamonds.png';\nimport diamondsKing from './images/king_of_diamonds.png';\n\nimport spadesAce from './images/ace_of_spades.png';\nimport spadesTwo from './images/2_of_spades.png';\nimport spadesThree from './images/3_of_spades.png';\nimport spadesFour from './images/4_of_spades.png';\nimport spadesFive from './images/5_of_spades.png';\nimport spadesSix from './images/6_of_spades.png';\nimport spadesSeven from './images/7_of_spades.png';\nimport spadesEight from './images/8_of_spades.png';\nimport spadesNine from './images/9_of_spades.png';\nimport spadesTen from './images/10_of_spades.png';\nimport spadesJack from './images/jack_of_spades.png';\nimport spadesQueen from './images/queen_of_spades.png';\nimport spadesKing from './images/king_of_spades.png';\n\nimport clubsAce from './images/ace_of_clubs.png';\nimport clubsTwo from './images/2_of_clubs.png';\nimport clubsThree from './images/3_of_clubs.png';\nimport clubsFour from './images/4_of_clubs.png';\nimport clubsFive from './images/5_of_clubs.png';\nimport clubsSix from './images/6_of_clubs.png';\nimport clubsSeven from './images/7_of_clubs.png';\nimport clubsEight from './images/8_of_clubs.png';\nimport clubsNine from './images/9_of_clubs.png';\nimport clubsTen from './images/10_of_clubs.png';\nimport clubsJack from './images/jack_of_clubs.png';\nimport clubsQueen from './images/queen_of_clubs.png';\nimport clubsKing from './images/king_of_clubs.png';\n\nconst cardImages = {\n    \"hearts-ace\": heartsAce,\n     \"hearts-two\": heartsTwo,\n     \"hearts-three\":heartsThree,\n     \"hearts-four\":heartsFour ,\n     \"hearts-five\":heartsFive ,\n     \"hearts-six\":heartsSix ,\n     \"hearts-seven\":heartsSeven ,\n     \"hearts-eight\":heartsEight, \n     \"hearts-nine\":heartsNine ,\n     \"hearts-ten\":heartsTen ,\n     \"hearts-jack\":heartsJack ,\n     \"hearts-queen\":heartsQueen ,\n     \"hearts-king\":heartsKing ,\n     \n     \"diamonds-ace\": diamondsAce,\n     \"diamonds-two\": diamondsTwo,\n     \"diamonds-three\":diamondsThree,\n     \"diamonds-four\":diamondsFour ,\n     \"diamonds-five\":diamondsFive ,\n     \"diamonds-six\":diamondsSix ,\n     \"diamonds-seven\":diamondsSeven ,\n     \"diamonds-eight\":diamondsEight, \n     \"diamonds-nine\":diamondsNine ,\n     \"diamonds-ten\":diamondsTen ,\n     \"diamonds-jack\":diamondsJack ,\n     \"diamonds-queen\":diamondsQueen ,\n     \"diamonds-king\":diamondsKing ,\n    \n     \"spades-ace\": spadesAce,\n     \"spades-two\": spadesTwo,\n     \"spades-three\":spadesThree,\n     \"spades-four\":spadesFour ,\n     \"spades-five\":spadesFive ,\n     \"spades-six\":spadesSix ,\n     \"spades-seven\":spadesSeven ,\n     \"spades-eight\":spadesEight, \n     \"spades-nine\":spadesNine ,\n     \"spades-ten\":spadesTen ,\n     \"spades-jack\":spadesJack ,\n     \"spades-queen\":spadesQueen ,\n     \"spades-king\":spadesKing ,\n    \n     \"clubs-ace\": clubsAce,\n     \"clubs-two\": clubsTwo,\n     \"clubs-three\":clubsThree,\n     \"clubs-four\":clubsFour ,\n     \"clubs-five\":clubsFive ,\n     \"clubs-six\":clubsSix ,\n     \"clubs-seven\":clubsSeven ,\n     \"clubs-eight\":clubsEight, \n     \"clubs-nine\":clubsNine ,\n     \"clubs-ten\":clubsTen ,\n     \"clubs-jack\":clubsJack ,\n     \"clubs-queen\":clubsQueen ,\n     \"clubs-king\":clubsKing ,\n     \"back\": cardBack,\n  };\n\n\nconst Card = ({suit,rank, isFaceDown}) => {\n  // const cardImage = isFaceDown ? cardBack : cardImages[`${suit}-${rank}`];\n  \n    return (\n      <div className=\"card-box\">\n      <div className={`card-content ${!isFaceDown ? 'flip' : ''}`}>\n        <div className=\"card-front\">\n          <img src={cardImages[`${suit}-${rank}`]} alt={`${rank} of ${suit}`} />\n        </div>\n        <div className=\"card-back\">\n          <img src={cardBack} alt=\"Card Back\" />\n        </div>\n      </div>\n    </div>\n    )\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card';\nimport PropTypes from 'prop-types';\n\nconst Player = ({hand,isDealer}) => {\n\n\n\n  return (\n    <>\n        <div className={`${isDealer ? 'dealer-hand' : 'player-hand'}`}>\n            {hand.length > 0 ? (\n            <div id=\"hand\">\n            {hand.map((card, index) => (\n                <Card key={index} suit={card.suit} rank={card.rank} isFaceDown={card.isFaceDown} />\n            ))}\n            </div>\n             ) : (\n            <>\n            </>\n        )}\n        </div>\n\n    </>\n  );\n}\n\nPlayer.propTypes = {\n    hand: PropTypes.array,\n    isDealer: PropTypes.bool,\n}\n\nexport default Player","import React from 'react';\nimport chip5 from './images/5-chip-v2.png';\nimport chip10 from './images/10-chip-v2.png';\nimport chip25 from './images/25-chip-v2.png';\nimport chip50 from './images/50-chip-v2.png';\nimport chip100 from './images/100-chip-v2.png';\nimport chip250 from './images/250-chip-v2.png';\nimport btnStand from './images/stand-button2.png';\nimport btnDouble from './images/double-button2.png';\nimport btnHit from './images/hit-button2.png';\nimport btnClear from './images/clear-button2.png';\nimport btnBet from './images/bet-button2.png';\nimport btnSplit from './images/split-button.png';\n\nconst Controls = ({ onNewGame, \n                    handleStand, \n                    handleDouble, \n                    handleHit, \n                    gameRunning, \n                    onBetPlaced,\n                    bet,\n                    buttonsHidden,\n                    handleChipClick,\n                    standPressed,\n                    handleSplit,\n                    splitAvailable,\n                    hitPressed,\n                    twoHands,\n                    setPreviousBet,\n                    clearBet,\n                    previousBet,\n                    setBet,\n                    setBetChips,\n                    playerChips,\n                    }) => \n    {\n    const chips = [\n        { value: 5, img: chip5 },\n        { value: 10, img: chip10 },\n        { value: 25, img: chip25 },\n        { value: 50, img: chip50 },\n        { value: 100, img: chip100 },\n        { value: 250, img: chip250 },\n    ];\n\n    return (\n        <>\n        \n            <div id='buttons-container'>\n                {gameRunning ? (\n                    <>\n                        {!buttonsHidden && (\n                            <>\n                            <img    \n                                    src={btnDouble}\n                                    className={`btn-double ${standPressed || hitPressed ? 'disabled' : ''}`}\n                                    alt='double-button' \n                                    title=\"Double\"\n                                    onClick={!standPressed ? ()=>handleDouble() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnStand} \n                                    className={`btn-stand ${standPressed ? 'disabled' : ''}`}\n                                    alt='stand-button' \n                                    title=\"Stand\"\n                                    onClick={!standPressed ? ()=>handleStand() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnHit} \n                                    className={`btn-hit ${standPressed ? 'disabled': ''}`}\n                                    alt='hit-button' \n                                    title=\"Hit\"\n                                    onClick={!standPressed ? ()=>handleHit() : undefined}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnSplit} \n                                    className={`btn-split ${(standPressed || !splitAvailable || hitPressed )? 'disabled': ''}`}\n                                    alt='split-button' \n                                    title=\"Split\"\n                                    onClick={() => !standPressed && handleSplit()}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            \n                            </>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        <img \n                            src={btnBet} \n                            className='btn-new-game' \n                            alt='bet-button' \n                            title=\"Place A Bet\"\n                            onClick={() => bet === 0 ? onBetPlaced(0):onNewGame()}\n                        />\n                        <img \n                            src={btnClear} \n                            className='btn-clear-bet' \n                            alt='clear-button' \n                            title=\"Clear\"\n                            onClick={() => {\n                                \n                                if(previousBet>0){\n                                    setBetChips([]);\n                                    setPreviousBet(0);\n                                    setBet(0);\n                                }else{\n                                    onBetPlaced(0);\n\n                                    \n                                }\n                                \n                            }}\n                        />\n                    </>\n                )}\n            </div>\n            \n            <div id='chips-row-wrapper-arrows' style={{\n                                        height: 'auto', \n                                        overflow: 'hidden'}}>\n                <div id='pointer-row-animation' style={{\n                                                visibility: !gameRunning ? 'visible' : 'hidden', \n                                                display: 'flex', \n                                                gap: '44px', \n                                                justifyContent: 'center', \n                                                transform: 'translateY(3px)'}}>\n\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                </div>\n            </div>\n            <div id='chips-row-wrapper' style={{ visibility: gameRunning ? 'hidden' : 'visible' }}>\n\n                {chips.map((chip, index) => (\n                <img key={index}\n                    src={chip.img}\n                    alt={`Chip ${chip.value}`}\n                    title={`$${chip.value}`}\n                    className='chip-img'\n                    onClick={(event) => {\n                        if(chip.value > playerChips){\n                            return;\n                        }else{\n                            if(previousBet > 0){\n                                setPreviousBet(0);\n                                setBet(0);\n                                setBetChips([]);\n                                onBetPlaced(chip.value); \n                                handleChipClick(chip.value, chip.img, event);\n                            }else{\n                                onBetPlaced(chip.value); \n                                handleChipClick(chip.value, chip.img, event);\n                            }\n                        }\n                        \n                        \n                    }}\n                    style={{ cursor: 'pointer' }} />\n                ))}\n                \n            </div>  \n        </>\n    );\n};\n\nexport default Controls;","import React from 'react'\n\n\nconst Header = ({playerHandValue,dealerHandValue,result,bet,playerChips,progressBarWidth}) => {\n  return (\n    <>\n      <div id='blackjack-header-container'>\n        <div className='chips-count'>{`$${playerChips}`}</div>\n        <div id='games-count'>\n          <div id='games-count-filler' style={{width:`${progressBarWidth}%`}}></div>\n        </div>\n        {/* <div id='game-result'>{result}</div>  */}\n        <span id='game-settings' role='img' aria-label=\"Settings\">⚙️</span>\n      </div>\n      <div id='deck-dealer-row'>\n        {/* <div id='discard-tray'>{<img id='card-image-left-corner' alt='back-image' src={BackCard} />}</div>\n        <div id='new-deck'>{<img id='card-image-right-corner' alt='back-image' src={BackCard} />}</div> */}\n      </div>\n    </>\n  )\n}\n\nexport default Header","import React from 'react'\n\nconst GameRecap = ({gameResultsCount}) => {\n    const results = gameResultsCount;\n  return (\n    <div id='gamerecap-container'>\n        \n        <div id='gamerecap-element'>\n            <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n            <div id='gamerecap-cell'>Games Won:<br/><br/>{results.gamesWon}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n            <div id='gamerecap-cell'>Games Lost:<br/><br/>{results.gamesLoss}</div>\n            <div id='gamerecap-cell'># of Tied Games:<br/><br/>{results.numberOfTie}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n            <div id='gamerecap-cell'># of Busts:<br/><br/>{results.numberOfBusts}</div>\n            <div id='gamerecap-cell'># of BlackJacks by Player:<br/><br/>{results.numberOfBlackJacksByPlayer}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell'># of BlackJacks by Dealer:<br/><br/>{results.numberOfBlackJacksByDealer}</div>\n            <div id='gamerecap-cell'># of Splits Available:<br/><br/>{results.numberOfSplitsAvailable}</div>\n            \n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell'># of Splits Played:<br/><br/>{results.numberOfsplitsPlayed}</div>\n            <div id='gamerecap-cell'>Amount of Bets Lost:<br/><br/>${results.totalAmountOfBetsLost}</div>\n           \n            \n        </div>\n        <div id='gamerecap-element'>\n             <div id='gamerecap-cell'># of Wins With Two Cards:<br/><br/>{results.numberOfWinsWith2Cards}</div>\n            <div id='gamerecap-cell'>Bets total:<br/><br/>${results.totalAmountOfBets}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n            <div id='gamerecap-cell'>Bets total won:<br/><br/>${results.totalAmountOfBetsWon}</div>\n            <div id='gamerecap-cell'>Number of Doubles Played:<br/><br/>{results.numberOfBusts}</div>\n           \n        </div>\n        \n        \n    </div>\n  )\n}\n\nexport default GameRecap","import React from 'react'\n\nconst GameHistory = ({gameRoundsHistory}) => {\n  return (\n    <div id='gamerecap-container'>\n        <div id='gamerecap-element'>\n            <div id='recap-cell'>Game Results<br/>\n                {gameRoundsHistory && gameRoundsHistory.slice().reverse().map((round, index) => ( \n                    <div key={index}>\n                        \n                        {`---------------------------`}<br/>\n                        {`Round: ${round.roundNumber}`}<br/>\n                        {`Dealer: ${round.dealerHand.join(', ')}`}<br/> \n                        {`Value: ${round.dealerHandValue}`}<br/>\n                        {`Player: ${round.playerHand.join(', ')}`}<br/>\n                        {`Value: ${round.playerHandValue}`}<br/>\n                        {`Outcome: ${round.outcome}`}<br/>\n                    </div>\n                ))}\n            </div>\n        </div>\n    </div>\n  )\n}\n\nexport default GameHistory","import React, { useEffect, useState,useRef } from \"react\";\nimport Deck from './Deck';\nimport Player from './Player';\nimport Controls from \"./Controls\";\nimport Header from \"./Header\";\nimport btnStand from './images/stand-button2.png';\nimport btnHit from './images/hit-button2.png';\nimport GameRecap from \"./GameRecap\";\nimport GameHistory from \"./GameHistory\";\n\nconst GameBoard = ({ onGameRunningChange }) => {\n    const [deck, setDeck] = useState(null);\n    const [dealerHand, setDealerHand] = useState([]);\n    const [dealerHandText,setDealerHandText]=useState([]);\n    const [playerHand, setPlayerHand] = useState([]);\n    const [playerHandText,setPlayerHandText]=useState([]);\n\n    const [gameRunning, setGameRunning] = useState(false);\n    const [buttonsHidden,setButtonsHidden] = useState(false);\n    const [playerHandValue, setPlayerHandValue] = useState(0);\n    const [dealerHandValue, setDealerHandValue] = useState(0);\n    const [playerChips, setPlayerChips] = useState(1000);\n    const [bet, setBet] = useState(0);\n    const [gameMessage, setGameMessage] = useState(\"Place a bet...\");\n    const [gameOutcome, setGameOutcome] = useState(\"\");\n    const [gameOutcome1, setGameOutcome1] = useState(\"\");\n    const [gameOutcome2, setGameOutcome2] = useState(\"\");\n    const [showScores, setShowScores] = useState(false);\n    const endGameTimeout = useRef();\n    const [gamePause,setGamePause] = useState(false);\n    \n    const [betChips,setBetChips] = useState([]);\n    const chipWidth = 40;\n    const gap = 0.1;\n    const [previousBet,setPreviousBet] = useState(0);\n    const totalChipTypes = Object.keys(betChips).length;\n    const totalWidth = totalChipTypes * chipWidth + (totalChipTypes - 1) * gap;\n    const [dealerFirstCardValue,setDealerFirstCardValue] = useState(0);\n    const isFirstRender = useRef(true);\n    const [standPressed, setStandPressed] = useState(false);\n    const [splitAvailable,setSplitAvailable] = useState(true);\n    const [playerHand1,setPlayerHand1] = useState([]);\n    const [playerHand2,setPlayerHand2] = useState([]);\n    const [twoHands,setTwoHands] = useState(false);\n    const [playerHand1Value,setPlayerHand1Value]= useState(0);\n    const [playerHand2Value,setPlayerHand2Value]=useState(0);\n    const [hitPressed,setHitPressed] = useState(false);\n    const [betHand1,setBetHand1] = useState(0);\n    const [betHand2,setBetHand2] = useState(0);\n    const [hand1TurnFinished,setHand1TurnFinished] = useState(false);\n    const [hand2TurnFinished,setHand2TurnFinished] = useState(false);\n    const [splitPressed,setSplitPressed] = useState(false);\n    \n    //counter for progressBar\n    const [gamesCount,setGamesCount] = useState(1);\n    const [result,setResult] = useState(\"\");\n    const [progressBarWidth,setProgressBarWidth] = useState(10);\n    const [roundNumber,setRoundNumber] = useState(1);\n    const [roundOutcome,setRoundOutcome] = useState(\"\");\n    const [gameRoundsHistory, setGameRoundsHistory] = useState([]);\n    const [gameResultsCount, setGameResultsCount] = useState({\n        totalGamesPlayed: 0,\n        gamesWon: 0,\n        gamesLoss: 0,\n        numberOfTie: 0,\n        numberOfBlackJacksByPlayer: 0,\n        numberOfBlackJacksByDealer:0,\n        numberOfSplitsAvailable: 0,\n        numberOfsplitsPlayed:0,\n        numberOfDoubles: 0,\n        numberOfBusts: 0,\n        numberOfWinsWith2Cards: 0,\n        totalAmountOfBets:0,\n        totalAmountOfBetsWon:0,\n        totalAmountOfBetsLost:0,\n        });\n    \n    const cardToString = (card) => {\n        return `${card.rank} of ${card.suit}`;\n        };\n    const convertHandToText = (hand) => {\n        return hand.map(cardToString);\n        };\n\n    const clearBet = () => {\n        // Assuming you want to clear the bet and return the bet amount to the player's chips only if the bet hasn't been played yet\n        if (!gameRunning) {\n            setPlayerChips((prevChips) => prevChips + bet); // Return the current bet amount to the player's chips\n        }\n        setBet(0); // Reset the current bet to 0\n        setPreviousBet(0); // Reset the previous bet to 0\n        // Additional logic as needed\n    };\n\n    // calculates number of games Won\n    const playerWins = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, gamesWon:prevState.gamesWon + 1};\n        });\n    }\n    // calculates number of games Lost\n    const playerLoss = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, gamesLoss:prevState.gamesLoss + 1};\n        });\n    }\n    // calculates number of Tie games.\n    const playerPush = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfTie:prevState.numberOfTie + 1};\n        });\n    }\n    // calculate number of blackjack by player.\n    const playerBlackJack = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfBlackJacksByPlayer: prevState.numberOfBlackJacksByPlayer +1};\n        });\n    }\n    // calculate number of blackjack by dealer.\n    const dealerBlackJack = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfBlackJacksByDealer: prevState.numberOfBlackJacksByDealer +1};\n        });\n    }\n//calculate number of splits available\n    const splitsAvailable = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfSplitsAvailable:prevState.numberOfSplitsAvailable + 1};\n        });\n    }\n    //calculate number of splits played\n    const splitsPlayed = () =>{\n        setGameResultsCount(prevState =>{\n            return{...prevState, numberOfsplitsPlayed:prevState.numberOfsplitsPlayed + 1};\n        });\n    }\n     //calculate number of doubles played\n     const doublesPlayed = () =>{\n        console.log(\"running doublesPlayed inside doublesPlayed\");\n        setGameResultsCount(prevState =>{\n            return{...prevState, numberOfDoubles:prevState.numberOfDoubles + 1};\n        });\n    }\n     //calculates number of Bust games.\n     const playerBusts = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfBusts:prevState.numberOfBusts + 1};\n        });\n    }\n    //calculates number of games won with 2 cards, excluding blackjack\n    const winWithOutHit = () =>{\n        if(!hitPressed){\n            setGameResultsCount(prevState => {\n                return{...prevState,numberOfWinsWith2Cards: prevState.numberOfWinsWith2Cards+1 };\n            });\n        }\n    }\n    //calculates total amount of Bets\n    const totalAmountOfBets = (bet) => {\n        let currentBet = bet;\n        setGameResultsCount(prevState => {\n            return{...prevState,totalAmountOfBets:prevState.totalAmountOfBets + currentBet};\n        });\n    }\n    //calculates total amount of bets won\n    const playerBetsWon = (betWon) =>{\n        let betsWon = betWon;\n        setGameResultsCount(prevState =>{\n            return{...prevState, totalAmountOfBetsWon:prevState.totalAmountOfBetsWon +betsWon};\n        })\n    }\n    //calculates total amount of bets lost\n    const playerBetsLost = (betLost) =>{\n        let betsLost = betLost;\n        setGameResultsCount(prevState =>{\n            return{...prevState, totalAmountOfBetsLost:prevState.totalAmountOfBetsLost -betsLost};\n        })\n    }\n   \n    \n    const updateGameRoundsHistory = (newRoundResults) => {\n        setGameRoundsHistory(prevHistory => [...prevHistory, newRoundResults]);\n      };\n\n    \n    \n\n    const handleGameResult = () => {\n        \n        \n        let splitHand1=\"\";\n        let splitHand2=\"\";\n        let preBet = previousBet;\n        let chips = playerChips;\n        let betOneHand = bet;\n        let bet1 = betHand1;\n        let bet2 = betHand2;\n        let betOutcome = 0;\n        let bet1Outcome=0;\n        let bet2Outcome=0;\n        let newOutcomeMessage =\"\";\n        let newOutcomeMessage1=\"\";\n        let newOutcomeMessage2=\"\";\n        totalAmountOfBets(bet1);\n        totalAmountOfBets(bet2);\n        totalAmountOfBets(bet);\n        // let finalOutcome;\n    \n\n        if(splitPressed){\n            if(gameOutcome2===\"\" || gameOutcome1 ===\"\"){\n                return;\n            }else{\n                switch(gameOutcome1) {\n                    case \"PlayerWins BlackJack\":\n                        newOutcomeMessage1 = `BlackJack 1st hand, win: ${bet1*1.5}`;\n                        bet1Outcome = bet1*2.5;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        playerWins();\n                        playerBlackJack();\n                        playerBetsWon(bet1Outcome);\n                        \n                        break;\n                    case \"DealerWins BlackJack\":\n                        newOutcomeMessage1 = `BlackJack, Dealer wins...1st hand -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        playerLoss();\n                        dealerBlackJack();\n                        playerBetsLost(bet1);\n                        break;\n                    case \"DealerWins Bust\":\n                        newOutcomeMessage1 = `Bust! Dealer Wins! 1st hand  -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        playerLoss();\n                        playerBusts();\n                        playerBetsLost(bet1);\n                        break;\n                    case \"DealerWins\":\n                        newOutcomeMessage1 = `Dealer Wins...1st hand -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        playerLoss();\n                        playerBetsLost(bet1);\n                        break;\n                    case \"PlayerWins Bust\":\n                        newOutcomeMessage1 = `Dealer Bust...1st hand Win! +$${bet1}`;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        bet1Outcome = bet1;\n                        playerWins();\n                        winWithOutHit();\n                        playerBetsWon(bet1Outcome);\n                        break;\n                    case \"PlayerWins\":\n                        newOutcomeMessage1 = `1st Hand Win! +$${bet1}!`;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        bet1Outcome = bet1;\n                        playerWins();\n                        winWithOutHit();\n                        playerBetsWon(bet1Outcome);\n                        break;\n                    case \"Push\":\n                        newOutcomeMessage1 = `Push! 1st Hand Tie... Bet returned: $${bet1}`;\n                        splitHand1 = \"1st Hand - Push\";\n                        bet1Outcome = 0;\n                        playerPush();\n                        break;\n                    default:\n                        newOutcomeMessage1 = \"Unknown outcome.\";\n                        splitHand1 = \"1st Hand - Unknown\";\n                        break;\n                }\n                switch(gameOutcome2) {\n                    case \"PlayerWins BlackJack\":\n                        newOutcomeMessage2 = `BlackJack 2nd hand, win: ${bet2*1.5}`;\n                        bet2Outcome = bet2*2.5;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        playerWins();\n                        playerBlackJack();\n                        playerBetsWon(bet2Outcome);\n                \n                        break;\n                    case \"DealerWins BlackJack\":\n                        newOutcomeMessage2 = `BlackJack, Dealer wins...2nd hand -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        playerLoss();\n                        dealerBlackJack();\n                        playerBetsLost(bet2);\n                        break;\n                    case \"DealerWins Bust\":\n                        newOutcomeMessage2 = `Bust! Dealer Wins! 2nd hand  -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        playerLoss();\n                        playerBusts();\n                        playerBetsLost(bet2);\n                        break;\n                    case \"DealerWins\":\n                        newOutcomeMessage2 = `Dealer Wins...2nd hand -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        playerLoss();\n                        playerBetsLost(bet2);\n                        break;\n                    case \"PlayerWins Bust\":\n                        newOutcomeMessage2 = `Dealer Bust...2nd hand Win! +$${bet2}`;\n                        splitHand1 = \"2nd Hand - Player Wins\";\n                        bet2Outcome = bet2;\n                        playerWins();\n                        playerBusts();\n                        winWithOutHit();\n                        playerBetsWon(bet2Outcome);\n                        break;\n                    case \"PlayerWins\":\n                        newOutcomeMessage2 = `2nd Hand Win! +$${bet2}!`;\n                        splitHand1 = \"2nd Hand - Player Wins\";\n                        bet2Outcome = bet2;\n                        playerWins();\n                        winWithOutHit();\n                        playerBetsWon(bet2Outcome);\n                        break;\n                    case \"Push\":\n                        newOutcomeMessage2 = `Push! 1st Hand Tie... Bet returned: $${bet2}`;\n                        splitHand1 = \"2nd Hand - Push\";\n                        bet2Outcome = 0;\n                        playerPush();\n                        break;\n                    default:\n                        newOutcomeMessage2 = \"Unknown outcome.\";\n                        break;\n                }\n                let finalMessage = newOutcomeMessage1 + \"\\n \" +newOutcomeMessage2;\n                setGameMessage(finalMessage);\n                \n            }\n        }else{\n            switch(gameOutcome) {\n                case \"PlayerWins BlackJack\":\n                    newOutcomeMessage = `BlackJack, You Won +$${betOneHand*1.5}!!!`;\n                    betOutcome =  betOneHand *2.5;\n                    playerWins();\n                    playerBlackJack();\n                    playerBetsWon(betOutcome);\n                    break;\n                case \"DealerWins BlackJack\":\n                    newOutcomeMessage = `BlackJack, Dealer wins... -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    playerLoss();\n                    dealerBlackJack();\n                    playerBetsLost(betOneHand);\n                    break;\n                case \"DealerWins Bust\":\n                    newOutcomeMessage = `Bust! Dealer Wins! -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    playerLoss();\n                    playerBusts();\n                    playerBetsLost(betOneHand);\n                    break;\n                case \"DealerWins\":\n                    newOutcomeMessage = `Dealer Wins... -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    playerLoss();\n                    playerBetsLost(betOneHand);\n                    break;\n                case \"PlayerWins Bust\":\n                    newOutcomeMessage = `Dealer Bust... Player Wins! +$${betOneHand}`;\n                    betOutcome = betOneHand;\n                    playerWins();\n                    playerBusts();\n                    winWithOutHit();\n                    playerBetsWon(betOutcome);\n                    break;\n                case \"PlayerWins\":\n                    newOutcomeMessage = `You Won +$${betOneHand}!`;\n                    betOutcome = betOneHand;\n                    playerWins();\n                    winWithOutHit();\n                    playerBetsWon(betOutcome);\n                    break;\n                case \"Push\":\n                    newOutcomeMessage = `Push! Tie... Bet returned: $${betOneHand}`;\n                    betOutcome = 0;\n                    playerPush();\n                    break;\n                default:\n                    newOutcomeMessage = \"Unknown outcome.\";\n                    break;\n            }\n            \n            setGameMessage(newOutcomeMessage);\n            \n        }\n        if (newOutcomeMessage === \"\"){\n           \n            betOutcome= bet2Outcome + bet1Outcome + bet1+bet2;\n      \n            chips = betOutcome + chips;\n          \n            setPlayerChips(chips);\n            \n        }else{\n           \n            betOutcome = betOutcome + betOneHand;\n           \n            chips = betOutcome +chips;\n           \n            setPlayerChips(chips);\n            \n        }       \n        \n        endGame();\n    }    \n\n    \n    const handleSplit = ()=>{\n        \n        if (playerChips >= bet && !gamePause)\n        {\n            setButtonsHidden(true);\n            setSplitPressed(true);\n            splitsPlayed();\n            const betHand1 = bet;\n            const betHand2 = bet;\n            setBetHand1(betHand1);\n            setBetHand2(betHand2);\n            setPlayerChips(playerChips-bet);\n            \n            const newDeck = deck;\n            const playerHand1SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerHand2SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerHand1 = [playerHand[0],playerHand1SecondCard];\n            const playerHand2 = [playerHand[1],playerHand2SecondCard];\n            setPlayerHand1(playerHand1);\n            setPlayerHand2(playerHand2);\n            setTwoHands(true);\n            setPlayerHand([]);\n            setTimeout(()=>{\n                setPlayerHand1(playerHand1.map(card => ({...card,isFaceDown: false})))\n                setPlayerHand2(playerHand2.map(card => ({...card,isFaceDown: false})))\n            },500);\n            const playerHand1Value = calculateHandValue(playerHand1);\n            const playerHand2Value = calculateHandValue(playerHand2);\n            setPlayerHand1Value(playerHand1Value);\n            setPlayerHand2Value(playerHand2Value);\n            setPlayerHandValue(0);\n            \n            if(playerHand1Value===21 && playerHand2Value ===21){\n                \n                // setPlayerChips(playerChips+betHand1*2.5+betHand2*2.5);\n                setGameOutcome1(\"PlayerWins BlackJack\");\n                setGameOutcome2(\"PlayerWins BlackJack\");\n                setHand2TurnFinished(true);\n                setHand1TurnFinished(true);\n            }else{\n                //checking turn for hand2 during split\n                if(playerHand2Value === 21){\n                    // setBetHand2(betHand2*2.5);\n                    setGameOutcome2(\"PlayerWins BlackJack\");\n                    setHand2TurnFinished(true);\n                   \n                }else{\n                    let gameMessage = `What do you want to do? Hit or Stand`;                        \n                    setGameMessage(gameMessage);\n                }\n                //checking turn for hand1 during split\n                if(playerHand1Value === 21){\n                    // let resultHand1 = `Hand1 BlackJack you won ${betHand1*2.5}`;\n                    setGameOutcome1(\"PlayerWins\");\n                    // setBetHand1(betHand1*2.5);\n                    setHand1TurnFinished(true);\n                   \n                }\n                else{\n                    let gameMessage = \"What do you want to do? Hit or Stand\"\n                    setGameMessage(gameMessage);\n\n                }\n                \n\n            }\n        }else{\n            setGameMessage(\"Not enough chips for split...\");\n            return;\n        }\n        \n\n\n    }\n    const handleChipClick = (amount, imgSrc, event) => {\n        event.stopPropagation();\n        \n\n        setBetChips(currentChips => {\n            // Create a new object to avoid direct state mutation\n            const newChips = { ...currentChips };\n            const chipType = `chip${amount}`;\n\n            if (newChips[chipType]) {\n                newChips[chipType].count += 1;\n                // Adjust position logic as necessary\n                // newChips[chipType].position += 10; \n            } else {\n                newChips[chipType] = { imgSrc, count: 1, position: 0 };\n            }\n\n            return newChips;\n        });\n    };\n\n    const onBetPlaced = (newBet, sendingPreviousBet = false) => {\n        if (gamePause) {\n            setGameMessage(\"Game Paused...\");\n            return;\n        }else if (newBet === 0) {\n            setPlayerChips(prev => prev + bet);\n            setGameMessage(\"Place A Bet...\");\n            setBet(0);\n            setBetChips([]);\n        }else if (!gameRunning && playerChips >= newBet) {\n            if(sendingPreviousBet){\n                setPlayerChips(prevChips => prevChips - newBet);\n            \n            }else{\n                setBet(prevBet => prevBet + newBet);\n                setPlayerChips(prevChips => prevChips - newBet);\n               \n            }\n            \n        } else {\n            return;\n        }\n    };\n    \n    \n    const assignGameResults = () =>{\n        setGameResultsCount(prevResult =>({\n            ...prevResult, \n            totalGamesPlayed: prevResult.totalGamesPlayed+1\n        }));\n        setGamesCount(count=>count+1);\n    }\n    \n    \n    const handleNewGame = () => {\n        \n\n       \n        \n        if (previousBet > playerChips){\n            setGameMessage(`Not enough chips, change your bet...`);\n            return;\n        }else {\n            if(previousBet!==0 ){\n                let sendingPreviousBet = true;\n                onBetPlaced(previousBet,sendingPreviousBet);\n            }\n            asignPreviousBet(bet);\n            setSplitAvailable(true);\n            setHand1TurnFinished(false);\n            setHand2TurnFinished(false);\n            setSplitPressed(false);\n            setHitPressed(false);\n            setButtonsHidden(false);\n            setGameRunning(true);\n            setShowScores(true);\n            setGameMessage(`Your bet is $${bet}`);\n            const newDeck = new Deck();\n            newDeck.shuffleDeck();\n            setDeck(newDeck);\n        \n        \n        \n        \n            const playerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n\n            setPlayerHand([playerFirstCard, playerSecondCard]);\n            setDealerHand([dealerFirstCard, dealerSecondCard]);\n            \n            \n\n            setTimeout(() => {\n                // Flip all player's cards\n                setPlayerHand(playerHand.map(card => ({ ...card, isFaceDown: false })));\n                \n                // Flip 1st dealercards\n                setDealerHand(dealerHand.map((card, index) => \n                    index === 0 ? { ...card, isFaceDown: false } : card // Flip only the first card\n                ));\n                if(playerFirstCard.rank === playerSecondCard.rank ){\n                    setSplitAvailable(true);\n                    splitsAvailable();\n                };\n            }, 500); // Adjust this delay as needed\n            const playerHand = [playerFirstCard,playerSecondCard];\n            setPlayerHand(playerHand);\n            const dealerHand = [dealerFirstCard,{...dealerSecondCard,isFaceDown: true }];\n            setDealerHand(dealerHand);\n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n            const dealerHandValue = calculateHandValue(dealerHand);\n            const dealerHandValueOneCard = calculateHandValue([dealerFirstCard]);\n            setDealerFirstCardValue(dealerHandValueOneCard);\n            //checking for blackjack or 2 blackjacks\n            let newOutcome; \n            if(playerHandValue===21 && dealerHandValue === 21){\n            setTimeout(()=>{\n                newOutcome = \"Push\";        \n                setGameOutcome(newOutcome);\n                const updatedDealerHand = dealerHand.map(card => ({\n                    ...card,\n                    isFaceDown: false,\n                }));\n                setDealerHand(updatedDealerHand);\n                setDealerHandValue(dealerHandValueOneCard);               \n            },500);   \n            }else if(playerHandValue ===21){\n                setTimeout(()=>{\n                    newOutcome=\"PlayerWins BlackJack\";\n                    setGameOutcome(newOutcome);\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown: false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(dealerHandValueOneCard);\n                },500);\n            }else if(dealerHandValue ===21){\n                setTimeout(()=>{\n                    newOutcome=\"DealerWins BlackJack\";\n                    setGameOutcome(newOutcome);;\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown:false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(dealerHandValueOneCard);\n                },500);\n            }else{\n                setDealerHandValue(dealerHandValueOneCard);\n            }         \n        }    \n    };\n\n    const asignPreviousBet = (bet) =>{\n        let currentBet = bet;\n        setPreviousBet(currentBet);\n       \n    }\n\n    const endGame = () => {\n            const roundResults = {\n                roundNumber: roundNumber,\n                playerHand: [...playerHandText], // You may need to adjust based on how your card objects are structured\n                playerHandValue: playerHandValue,\n                dealerHand: [...dealerHandText], // Adjust as necessary for your card objects\n                dealerHandValue: dealerHandValue,\n                outcome: gameOutcome // Or any other outcome variable you have\n            };\n\n            updateGameRoundsHistory(roundResults);\n\n            setRoundNumber(prevRoundNumber => prevRoundNumber + 1);\n            assignGameResults();\n            setGamePause(true);\n            endGameTimeout.current = setTimeout(() => {\n                setSplitAvailable(true);\n                setHand1TurnFinished(false);\n                setHand2TurnFinished(false);\n                setSplitPressed(false);\n                setDealerHand([]);\n                setPlayerHand([]);\n                setGameOutcome(\"\");\n                setGameOutcome1(\"\");\n                setGameOutcome2(\"\");\n                setGameMessage(\"Place A Bet...\");\n                setShowScores(false);\n                setGameRunning(false);\n                setHitPressed(false);\n                setTwoHands(false);\n                setStandPressed(false);\n                setButtonsHidden(true);\n                setGamePause(false);\n                setBetHand1(0);\n                setBetHand2(0);\n                clearTimeout(endGameTimeout.current);\n                \n            }, 3000);\n    };\n        \n    const handleStand = (newHandValue = playerHandValue,hand = null) => {\n            \n            if(splitPressed){\n\n                if(hand===\"hand1\" && standPressed === false){\n                    const playerHand1Value = newHandValue;\n                  \n                    setHand1TurnFinished(true);\n                }\n                if(hand===\"hand2\" && standPressed === false){\n                    const playerHand2Value = newHandValue;\n                   \n                    setHand2TurnFinished(true);\n                }\n                \n                if(hand1TurnFinished&&hand2TurnFinished){\n                    \n                    setTimeout(()=>{ \n                        let updatedDealerHand = dealerHand.map((card, index) => ({\n                            ...card,\n                            isFaceDown: index === 1 ? false : card.isFaceDown,\n                        }));\n                        setDealerHand(updatedDealerHand);\n                        \n                    //Recalculate dealerHand value and display it by using setTmeout\n                        let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                    \n                        setDealerHandValue(updatedDealerHandValue);\n                        \n                        if(playerHand1Value>21 && playerHand2Value>21){\n                            setGameMessage(\"Bust... Dealer Wins!\");\n                            let result = \"Dealer Wins\";\n                            setResult(result);\n                            playerBusts();\n                            playerBusts();\n                            endGame();\n                            return;\n                        }\n                        const drawCardforDealer = () => {\n                    //check handValue, drawCard until handValue is 17 or higher\n                            if (updatedDealerHandValue < 17 && deck){\n                                //delay to draw card by 1.5 seconds, card with facedown\n                                setTimeout(() => {\n                                    const newCard = { ...deck.drawCard(), isFaceDown: true };\n                                    updatedDealerHand = [...updatedDealerHand, newCard];\n                                    setDealerHand(updatedDealerHand);\n                                    //delay displaying last card with face up by 1 seconds\n                                    setTimeout(()=>{\n                                        const newHand = [...updatedDealerHand];\n                                        newHand[newHand.length - 1].isFaceDown = false; \n                                        setDealerHand(newHand);\n                                        \n                                        updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                        setDealerHandValue(updatedDealerHandValue);\n                                    },500);\n                                        \n                                }, 500);\n    \n                                setTimeout(()=>{\n                                    if(updatedDealerHandValue < 17){\n                                        setTimeout(()=>{\n                                            drawCardforDealer();\n                                        },1000);\n                                        \n                                    }else {\n                                        setTimeout(()=>{\n                                            finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                        },2000);\n                                        \n                                    }\n                                },1000);\n                                    \n                                }else{\n                                    setTimeout(()=>{\n                                        \n                                        finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                    },500);\n                                    \n                                }\n                        }\n                        \n                        setTimeout(()=>{\n                            drawCardforDealer();\n                        },2000);\n                        \n                    },1000);\n                }\n            }else{\n                setStandPressed(true);\n                // Make 2nd dealer card visible, after 1 second delay\n            setTimeout(()=>{ \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                \n            //Recalculate dealerHand value and display it by using setTmeout\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n            \n                setDealerHandValue(updatedDealerHandValue);\n            \n                const drawCardforDealer = () => {\n            //check handValue, drawCard until handValue is 17 or higher\n                    if (updatedDealerHandValue < 17 && deck){\n                        //delay to draw card by 1.5 seconds, card with facedown\n                        setTimeout(() => {\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            updatedDealerHand = [...updatedDealerHand, newCard];\n                            setDealerHand(updatedDealerHand);\n                            //delay displaying last card with face up by 1 seconds\n                            setTimeout(()=>{\n                                const newHand = [...updatedDealerHand];\n                                newHand[newHand.length - 1].isFaceDown = false; \n                                setDealerHand(newHand);\n                                \n                                updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                setDealerHandValue(updatedDealerHandValue);\n                            },500);\n                                \n                        }, 1000);\n\n                        setTimeout(()=>{\n                            if(updatedDealerHandValue < 17){\n                                setTimeout(()=>{\n                                    drawCardforDealer();\n                                },1500);\n                                \n                            }else {\n                                setTimeout(()=>{\n                                    finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                },1500);\n                                \n                            }\n                        },1500);\n                            \n                        }else{\n                            setTimeout(()=>{\n                                \n                                finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                            },1500);\n                            \n                        }\n                }\n                \n                setTimeout(()=>{\n                    drawCardforDealer();\n                },1500);\n                \n            },1000);\n            }\n    }\n\n    const finishDealerTurn = (finalDealerHand,finalDealerHandValue,newHandValue=playerHandValue) => {\n        \n        setTimeout(()=>{\n            setDealerHand(finalDealerHand);\n            setDealerHandValue(finalDealerHandValue);\n        \n            if (splitPressed){\n                let outcome1=\"\";\n                let outcome2=\"\";\n                //playerHand1 outcome\n                if (finalDealerHandValue > 21) {\n                    outcome1 = \"PlayerWins Bust\";\n            \n                } else if (playerHand1Value > 21) {\n                    outcome1 = \"DealerWins Bust\";\n            \n                } else if (playerHand1Value === 21 && finalDealerHandValue !== 21) {\n                    outcome1 = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && playerHand1Value !== 21) {\n                    outcome1 = \"DealerWins\";\n    \n                } else if (playerHand1Value > finalDealerHandValue) {\n                    outcome1 = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > playerHand1Value) {\n                    outcome1 = \"DealerWins\";\n\n                } else {\n                    outcome1 = \"Push\";\n                }\n                //playerHand2 outcome\n                if (finalDealerHandValue > 21) {\n                    outcome2 = \"PlayerWins Bust\";\n            \n                } else if (playerHand2Value > 21) {\n                    outcome2 = \"DealerWins Bust\";\n            \n                } else if (playerHand2Value === 21 && finalDealerHandValue !== 21) {\n                    outcome2 = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && playerHand2Value !== 21) {\n                    outcome2 = \"DealerWins\";\n    \n                } else if (playerHand2Value > finalDealerHandValue) {\n                    outcome2 = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > playerHand2Value) {\n                    outcome2 = \"DealerWins\";\n\n                } else {\n                    outcome2 = \"Push\";\n                }\n                \n\n                setGameOutcome1(outcome1);\n                setGameOutcome2(outcome2);\n            }else{\n                let outcome=\"\";\n                if (finalDealerHandValue > 21) {\n                    outcome = \"PlayerWins Bust\";\n            \n                } else if (newHandValue > 21) {\n                    outcome = \"DealerWins Bust\";\n            \n                } else if (newHandValue === 21 && finalDealerHandValue !== 21) {\n                    outcome = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && newHandValue !== 21) {\n                    outcome = \"DealerWins\";\n    \n                } else if (newHandValue > finalDealerHandValue) {\n                    outcome = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > newHandValue) {\n                    outcome = \"DealerWins\";\n\n                } else {\n                    outcome = \"Push\";\n                }\n\n                setGameOutcome(outcome);\n            }\n        },500);\n        \n    };\n    \n\n    const handleDouble = () =>{\n        \n            \n            if (playerHand.length !== 2) {\n                setGameMessage(\"Doubling down is not allowed at this time.\");\n                return;\n            }\n            \n            // Check if the player has enough chips to double the bet\n            if (playerChips >= bet && !gamePause) {\n                console.log(\"calling doublesPlayed within handleDouble\");\n                doublesPlayed();\n                setStandPressed(true);\n                setPlayerChips((prevChips) => prevChips - bet); // Deduct the additional bet amount from player's chips\n                setBet((prevBet) => prevBet * 2); // Double the bet\n                \n                // Draw one additional card for the player and add it to their hand\n                    setTimeout(() => {\n                        const newCard = { ...deck.drawCard(), isFaceDown: true };\n                        const updatedPlayerHand = [...playerHand, newCard];\n                        setPlayerHand(updatedPlayerHand);\n                        //delay displaying last card with face up by 0.5 seconds\n                        setTimeout(()=>{\n                            const newHand = [...updatedPlayerHand];\n                            newHand[newHand.length - 1].isFaceDown = false; \n                            setPlayerHand(newHand);\n\n                            const newPlayerHandValue = calculateHandValue(newHand);\n                            \n                            setPlayerHandValue(newPlayerHandValue);\n                            // Check if the player is bust after doubling down\n                            setTimeout(()=>{\n                                if (newPlayerHandValue > 21) {\n                                const updatedDealerHand = dealerHand.map((card, index) => ({\n                                    ...card,\n                                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                                }));\n                                setDealerHand(updatedDealerHand);\n                                setGameOutcome(\"DealerWins Bust\");\n                            } else {\n                                handleStand(newPlayerHandValue);\n                            } \n                            },500);\n                        },500);\n                    }, 500);}\n                    else {\n                        // Not enough chips or game is paused\n                        setGameMessage(\"Not enough chips to double down.\");\n                    }\n\n    };\n\n    const handleHit = (hand = null) =>{\n        let outcome1;\n        let outcome2;\n        if(splitPressed){\n            if(hand1TurnFinished && hand2TurnFinished){\n                let newOutcome =\"DealerWins\";\n            \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n                setGameOutcome(newOutcome);\n                setGameMessage(\"Bust... Dealer Wins!\");\n                playerBusts();\n                let result = \"Dealer Wins\";\n                setResult(result);\n                \n                endGame();\n            }else{\n                if(hand===\"hand1\"){\n                    if(hand1TurnFinished){\n                        return;\n                    }else{\n                        if(playerHand1Value ===21){\n                            setHand1TurnFinished(true);\n                            return;\n                        }else\n                        if(deck.cards.length > 0){\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand1 = [...playerHand1, newCard];\n            \n                            setPlayerHand1(updatedPlayerHand1);\n            \n                            setTimeout(() => {\n                                const newHand = [...updatedPlayerHand1];\n                                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                setPlayerHand1(newHand);\n                            },500);\n                            const playerHand1Value = calculateHandValue(updatedPlayerHand1);\n                        \n                            setPlayerHand1Value(playerHand1Value);\n                            if(playerHand1Value > 21){\n                                outcome1 = \"DealerWins Bust\";\n                                setHand1TurnFinished(true);\n                                setGameOutcome1(outcome1);\n                                return;\n                            }\n                        }\n                    }\n                    \n                }else if(hand===\"hand2\"){\n                    if(hand2TurnFinished){\n                        return;\n                    }else{\n                        if(playerHand2Value ===21){\n                            setHand1TurnFinished(true);\n                            return;\n                        }else\n                        if(deck.cards.length > 0){\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand2 = [...playerHand2, newCard];\n            \n                            setPlayerHand2(updatedPlayerHand2);\n            \n                            setTimeout(() => {\n                                const newHand = [...updatedPlayerHand2];\n                                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                setPlayerHand2(newHand);\n                            },500);\n                            const playerHand2Value = calculateHandValue(updatedPlayerHand2);\n                        \n                            setPlayerHand2Value(playerHand2Value);\n                            if(playerHand2Value > 21){\n                                outcome2 = \"DealerWins Bust\";\n                                setHand2TurnFinished(true);\n                                setGameOutcome1(outcome2);\n                                return;\n                            }\n                        }\n                    }\n                    \n                }    \n            }\n            \n        }else{\n            setHitPressed(true);\n            if(deck.cards.length > 0){\n            const newCard = { ...deck.drawCard(), isFaceDown: true };\n            const updatedPlayerHand = [...playerHand, newCard];\n\n            setPlayerHand(updatedPlayerHand);\n\n            setTimeout(() => {\n                const newHand = [...updatedPlayerHand];\n                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                setPlayerHand(newHand);\n            },500);\n\n            const playerHandValue = calculateHandValue(updatedPlayerHand);\n            \n            setPlayerHandValue(playerHandValue);\n            let newOutcome;\n\n            if(playerHandValue>21){\n                setStandPressed(true);\n                newOutcome =\"DealerWins Bust\";\n                \n                setGameOutcome(newOutcome);\n            \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n            }else if(playerHandValue ===21){\n        \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                //Recalculate dealerHand value and display it by using setTmeout\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n    \n                const drawCardforDealer = () => {\n                    if (updatedDealerHandValue < 17 && deck){\n                            const newCard = deck.drawCard();\n                            updatedDealerHand = [...updatedDealerHand,newCard];\n                            updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n    \n                            if(updatedDealerHandValue < 17){\n                                drawCardforDealer();\n                            }\n                        }\n                }\n    \n                drawCardforDealer();\n                setDealerHand(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n    \n                if(updatedDealerHandValue>playerHandValue && updatedDealerHandValue<=21){\n                    newOutcome=\"DealerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                \n                }else if(updatedDealerHandValue===playerHandValue){\n\n                    newOutcome=\"Push\";\n                    \n                    setGameOutcome(newOutcome);\n\n\n        \n                }else if(updatedDealerHandValue >21){\n                    newOutcome=\"PlayerWins\";\n                    \n                    setGameOutcome(newOutcome);\n\n                }\n                else{\n                    newOutcome=\"PlayerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                }\n                setGameRunning(false);\n            }\n        }\n        }\n        \n    }\n\n    const getCardValue = (rank) =>{\n        const cardsValue = {\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9,\n            'ten': 10,\n            'jack': 10,\n            'queen': 10,\n            'king': 10,\n            'ace': 11,\n        }\n        return cardsValue[rank] || 0;\n    }\n\n    const calculateHandValue = (hand) => {\n        let total = 0;\n        let aceCount = 0;\n\n        hand.forEach(card => {\n            let value = getCardValue(card.rank);\n            if (card.rank === 'ace') {\n                aceCount++;\n            }\n            total += value;\n        })\n        // Adjust score based on how many ace, initial ace value is 11, \n        //    subtract 10 from total score until score is less than 21 \n        //    AND number of aces more than 0\n        while (total > 21 && aceCount > 0) {\n            total -= 10;\n            aceCount -= 1;\n        }\n\n        return total;\n    }\n\n    useEffect(() => {\n        const newPlayerHandText = convertHandToText(playerHand);\n        setPlayerHandText(newPlayerHandText);\n      }, [playerHand]);\n      \n    useEffect(() => {\n    const newDealerHandText = convertHandToText(dealerHand);\n    setDealerHandText(newDealerHandText);\n    }, [dealerHand]);\n\n    useEffect(()=>{\n        \n    },[previousBet]);\n\n    useEffect(()=>{\n        if(gameResultsCount.totalGamesPlayed){\n            const newWidth = (gamesCount)/10*100;\n            setProgressBarWidth(newWidth);\n            \n            if(newWidth===100){\n                setPlayerChips(chips=>chips+200);\n                setGameMessage(\"Next Level! You get $200 extra chips!!!\");\n                \n                const timeoutId = setTimeout(() => {\n                    setGamesCount(1);\n                    setProgressBarWidth(10); // Reset to 10 assuming you want to restart progress from 10% for visual consistency\n                }, 5000);\n\n                return () => clearTimeout(timeoutId);\n            }\n            ;\n        }\n    },[gameResultsCount.totalGamesPlayed]);\n\n    // useEffect(() => {\n    //     if (playerHand.length > 0) {\n    //         const newPlayerHandValue = calculateHandValue(playerHand);\n    //         setPlayerHandValue(newPlayerHandValue);\n    \n    //         // Move the logic to determine if the game should proceed to handleStand or another function here\n    //         if (newPlayerHandValue > 21) {\n    //             setGameOutcome(\"DealerWins Bust\");\n    //             // Additional logic for dealer's turn can go here\n    //         } else {\n    //             return;\n    //         }\n    //     }\n    // }, [playerHand]); // Only re-run the effect if playerHand changes\n    \n    useEffect(() => {\n        if(playerHand.length>0){\n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n        }\n        if(dealerHand.length>0){\n            const dealerHandValue = calculateHandValue(dealerHand);\n            setDealerHandValue(dealerHandValue);\n        }\n \n    }, [playerHand,dealerHand]);\n\n    useEffect(() => {\n        if (gameOutcome || gameOutcome1 || gameOutcome2) {\n            handleGameResult();\n        }\n        }, [gameOutcome, gameOutcome1, gameOutcome2]);\n\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        if (bet > 0) {\n            setGameMessage(`$${bet}`);\n        }\n    }, [bet]);\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(endGameTimeout.current);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n\n       \n\n        \n\n    }, [bet, playerChips]);\n\n    useEffect(()=>{\n        if (hand1TurnFinished && hand2TurnFinished) {\n            \n            // Now you can safely perform actions that depend on both hands being finished.\n            setStandPressed(true);\n            handleStand();\n            // Any additional logic that needs to run after both hands are finished can go here.\n        }\n    },[hand1TurnFinished,hand2TurnFinished])\n\n    \n    return (\n        <>\n        <GameHistory\n            gameResultsCount={gameResultsCount}\n            gameRoundsHistory={gameRoundsHistory}\n        />\n        <div id=\"container\">\n        <Header\n            playerHandValue={playerHandValue}\n            dealerHandValue={dealerHandValue}\n            playerChips={playerChips}\n            progressBarWidth={progressBarWidth}\n            result={result}\n            />\n            \n\n            <div className=\"game-area\">\n                <div id='score-bubble'>\n                    <div id=\"dealer-score-bubble\" \n                        style={\n                        {visibility: showScores ? 'visible' : 'hidden'}}>\n                        {dealerHand[1] && dealerHand[1].isFaceDown ? dealerFirstCardValue : dealerHandValue}\n                    </div>\n                </div>\n                \n                <div id=\"dealer-message-box\">\n                    <div id=\"dealerhand-fixedbox\">\n                        <Player hand={dealerHand} isDealer={true} />\n                    </div>\n\n                    <div className=\"message-container\">\n                        <div id=\"message-box\">{gameMessage}</div>\n                    </div>\n                </div>\n                \n\n                {\n                twoHands ? (\n                    <div id=\"player-2hands-box\">\n                        \n                        <div id=\"player-hand1\">\n                            \n                            <Player hand={playerHand1} isDealer={false} />\n                            \n                            <div id='score-bubble'>\n                                <div id=\"player1-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                    {playerHand1Value}\n                                </div>\n                            </div>\n                            <div id=\"split-buttons-box\">\n                                <img    \n                                        src={btnStand} \n                                        className={`split-btn-stand ${(standPressed || hand1TurnFinished) ? 'disabled' : ''}`}\n                                        alt='stand-button' \n                                        title=\"Stand\"\n                                        onClick={(!standPressed && !hand1TurnFinished)? ()=>handleStand(playerHand1Value,\"hand1\") : undefined}\n                                        style={{cursor: (standPressed || hand1TurnFinished)?'not-allowed':'pointer'}}\n                                    \n                                />\n                                \n                                <img    \n                                        src={btnHit} \n                                        className={`split-btn-hit ${(standPressed || hand1TurnFinished) ? 'disabled': ''}`}\n                                        alt='hit-button' \n                                        title=\"Hit\"\n                                        onClick={(!standPressed && !hand1TurnFinished) ? ()=>handleHit(\"hand1\") : undefined}\n                                        style={{cursor:((standPressed || hand1TurnFinished)) ? 'not-allowed':'pointer'}}\n                            \n                                />\n                            \n                            </div>\n                        </div>\n\n                        <div id=\"player-hand2\">\n                            \n                            <Player hand={playerHand2} isDealer={false} /> \n\n                            <div id='score-bubble'>\n                                <div id=\"player2-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>\n                                    {playerHand2Value}\n                                </div>\n                            </div>\n                            <div \n                                id=\"split-buttons-box\" >\n\n                                <img    \n                                        src={btnStand} \n                                        className={`split-btn-stand ${(standPressed || hand2TurnFinished)? 'disabled' : ''}`}\n                                        alt='stand-button' \n                                        title=\"Stand\"\n                                        onClick={(!standPressed && !hand2TurnFinished) ? ()=>handleStand(playerHand2Value,\"hand2\") : undefined}\n                                        style={{cursor: (standPressed || hand2TurnFinished)?'not-allowed':'pointer'}}\n\n                                />\n                            \n                                \n                                <img    \n                                        src={btnHit} \n                                        className={`split-btn-hit ${(standPressed || hand2TurnFinished) ? 'disabled': ''}`}\n                                        alt='hit-button' \n                                        title=\"Hit\"\n                                        onClick={(!standPressed && !hand2TurnFinished)? ()=>handleHit(\"hand2\") : undefined}\n                                        style={{cursor:(standPressed || hand1TurnFinished) ? 'not-allowed':'pointer'}}\n                            \n                                />\n                            \n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div id=\"player-hand-box\">\n                            \n                            <Player hand={playerHand} isDealer={false} />\n                            \n                            <div id='score-bubble'>\n                                <div id=\"player-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                    {playerHandValue}\n                                </div>\n                            </div>\n                        \n                    </div>\n                )}\n            </div>\n            \n            <div id='bet-main-container'>\n                    <div id='bet-container-box'\n                        style={{\n                        visibility: !gameRunning ? 'visible' : 'hidden', \n                        display: 'flex', \n                        gap: '8px', \n                        justifyContent: 'center',\n                        position:'relative',\n                        }}\n                    \n                        >\n                        \n                    \n                        {Object.entries(betChips).map(([chipType, { imgSrc, count, position }], index) => (\n                            Array.from({ length: count }).map((_, chipIndex) => (\n                                <img \n                                    key={`${chipType}-${chipIndex}`}\n                                    src={imgSrc}\n                                    alt={`Chip of ${chipType.replace('chip', '')} value`} \n                                    className='bet-chip-img'\n                                    style={{ \n                                        position: 'absolute', \n                                        // transform:'translateY(15px)',\n                                        bottom: position + chipIndex * 5 -25,\n                                        left: `calc(50% + ${index * (chipWidth + gap) - totalWidth / 2}px)`\n                                    }} \n                                />\n                            ))\n                        ))}    \n                    </div>\n            </div>\n\n\n            <Controls\n            handleHit={handleHit}\n            handleStand={handleStand}\n            handleDouble={handleDouble}\n            onNewGame={handleNewGame}\n            gameRunning={gameRunning}\n            onBetPlaced={onBetPlaced}\n            bet={bet}\n            buttonsHidden={buttonsHidden}\n            handleChipClick={handleChipClick}\n            standPressed={standPressed}\n            splitAvailable={splitAvailable}\n            handleSplit={handleSplit}\n            hitPressed={hitPressed}\n            twoHands={twoHands}\n            setPreviousBet={setPreviousBet}\n            clearBet={clearBet}\n            previousBet={previousBet}\n            setBet={setBet}\n            setBetChips={setBetChips}\n            playerChips={playerChips}\n            />\n        </div>\n        <GameRecap\n            gameResultsCount={gameResultsCount}\n        />\n       </>\n    );\n};\nexport default GameBoard;","import React from 'react'\nimport LOGO from './images/logo-blackjack.png'\nconst LoadingOverlay = ({isVisible, style}) => {\n    if (!isVisible) {\n        return null;\n    }\n\n    return(\n        <div className='loading-page'style={style}>\n        <img src={LOGO} className=\"logo-img\" alt=\"logo loading\"/>\n        <div className='loading'></div>\n        </div>\n    )\n}\nexport default LoadingOverlay","import React,{useEffect,useState} from 'react';\nimport './blackjack.css';\nimport GameBoard from './GameBoard';\nimport LoadingOverlay from './LoadingOverlay'\n\nconst BlackJack = () => {\n    const [isLoading,setIsLoading] = useState(true);\n    // const [isFlipped, setIsFlipped] = useState(false);\n    const [opacity, setOpacity] = useState(1);\n    // const [zIndex, setZIndex] = useState(-1);\n    const [isGameActive, setIsGameActive] = useState(false);\n\n    const handleGameRunningChange = (isRunning) => {\n      setIsGameActive(isRunning); // Use the renamed state setter\n  };\n  \n\n    // const toggleFlip = () => {\n    //     if (!isGameActive) { // Use the renamed state variable\n    //         setIsFlipped(!isFlipped);\n    //         setTimeout(() => {\n    //             setOpacity(opacity === 0.45 ? 1 : 0.45);\n    //             setZIndex(zIndex === -1 ? 1 : -1);\n    //         }, 300);\n    //     }\n    // };\n    useEffect(() => {\n        // Start the fade-out effect slightly before hiding the overlay\n        const fadeOutTimer = setTimeout(() => {\n          // Assuming you have a method to change the overlay's opacity\n          // This could be directly via CSS classes or inline styles\n          setOpacity(0); // This assumes your LoadingOverlay responds to opacity changes\n        }, 4000); // Start fade out slightly before removing the overlay\n      \n        const removeOverlayTimer = setTimeout(() => {\n            setIsLoading(false);\n          }, 5000); // 4 seconds + 1 second of fade-out\n      \n        return () => {\n            clearTimeout(fadeOutTimer);\n            clearTimeout(removeOverlayTimer); \n        };\n      }, []);\n\n    return (\n        <>\n            {/* <div id=\"container\" className={isFlipped ? 'flipped' : ''} onClick={toggleFlip} style={{'--bg-opacity': opacity, '--z-index': zIndex}}> */}\n            <div id=\"bj-main-container\">\n                \n                <LoadingOverlay isVisible={isLoading} style={{ opacity: opacity }}  />\n                <GameBoard onGameRunningChange={handleGameRunningChange} />\n                {/* <GameBoard/> */}\n            </div>\n            \n        </>\n    );\n};\n\nexport default BlackJack;\n","// import React,{ useState, useEffect } from \"react\"\nimport React from 'react'\nimport './App.css'\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Footer from \"./Footer\";\n// import Bootstrap from \"./Boot\";\n// import './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n// import './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \nimport BlackJack from './BlackJack/BlackJack'\n\n\nexport default function App() {\n\n  \n//   const [isLoading, setIsLoading] = useState(true); \n//   const [darkMode, setDarkMode] = useState(false);\n\n\n//   function toggleDarkMode() {\n//     setDarkMode(!darkMode);\n//   }\n//   useEffect(() => {\n//     document.body.style.backgroundColor = darkMode ? '#23252C' : '#ccc';\n//     document.body.style.color = darkMode ? '#ccc' : '#23252C';\n//   }, [darkMode]);\n\n//   useEffect(() => {\n//     if (darkMode) {\n//         document.body.classList.add(\"dark-mode\");\n//     } else {\n//         document.body.classList.remove(\"dark-mode\");\n//     }\n// }, [darkMode]);\n\n\n\n\n    return (\n      <>\n      \n\n      <BlackJack/>\n     \n        {/* <Header/>\n        <Main/>\n        <Footer/> */}\n        \n      </> \n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \n// import $ from 'jquery'; \n// import Popper from 'popper.js'; \nimport './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}