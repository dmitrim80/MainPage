{"version":3,"sources":["BlackJack/images/stand-button2.png","BlackJack/images/hit-button2.png","BlackJack/images/logo-blackjack.png","BlackJack/images/vegas-back2.png","BlackJack/images/ace_of_hearts.png","BlackJack/images/2_of_hearts.png","BlackJack/images/3_of_hearts.png","BlackJack/images/4_of_hearts.png","BlackJack/images/5_of_hearts.png","BlackJack/images/6_of_hearts.png","BlackJack/images/7_of_hearts.png","BlackJack/images/8_of_hearts.png","BlackJack/images/9_of_hearts.png","BlackJack/images/10_of_hearts.png","BlackJack/images/jack_of_hearts.png","BlackJack/images/queen_of_hearts.png","BlackJack/images/king_of_hearts.png","BlackJack/images/ace_of_diamonds.png","BlackJack/images/2_of_diamonds.png","BlackJack/images/3_of_diamonds.png","BlackJack/images/4_of_diamonds.png","BlackJack/images/5_of_diamonds.png","BlackJack/images/6_of_diamonds.png","BlackJack/images/7_of_diamonds.png","BlackJack/images/8_of_diamonds.png","BlackJack/images/9_of_diamonds.png","BlackJack/images/10_of_diamonds.png","BlackJack/images/jack_of_diamonds.png","BlackJack/images/queen_of_diamonds.png","BlackJack/images/king_of_diamonds.png","BlackJack/images/ace_of_spades.png","BlackJack/images/2_of_spades.png","BlackJack/images/3_of_spades.png","BlackJack/images/4_of_spades.png","BlackJack/images/5_of_spades.png","BlackJack/images/6_of_spades.png","BlackJack/images/7_of_spades.png","BlackJack/images/8_of_spades.png","BlackJack/images/9_of_spades.png","BlackJack/images/10_of_spades.png","BlackJack/images/jack_of_spades.png","BlackJack/images/queen_of_spades.png","BlackJack/images/king_of_spades.png","BlackJack/images/ace_of_clubs.png","BlackJack/images/2_of_clubs.png","BlackJack/images/3_of_clubs.png","BlackJack/images/4_of_clubs.png","BlackJack/images/5_of_clubs.png","BlackJack/images/6_of_clubs.png","BlackJack/images/7_of_clubs.png","BlackJack/images/8_of_clubs.png","BlackJack/images/9_of_clubs.png","BlackJack/images/10_of_clubs.png","BlackJack/images/jack_of_clubs.png","BlackJack/images/queen_of_clubs.png","BlackJack/images/king_of_clubs.png","BlackJack/images/5-chip-v2.png","BlackJack/images/10-chip-v2.png","BlackJack/images/25-chip-v2.png","BlackJack/images/50-chip-v2.png","BlackJack/images/100-chip-v2.png","BlackJack/images/250-chip-v2.png","BlackJack/images/double-button2.png","BlackJack/images/clear-button2.png","BlackJack/images/bet-button2.png","BlackJack/images/split-button.png","assets/images/Acro.jpeg","assets/images/Chalice.jpeg","assets/images/Monti.jpeg","assets/images/Favia.jpeg","assets/images/Mushroom.jpeg","assets/images/Scoly.jpeg","assets/images/Zoas.jpeg","assets/images/FishTank.jpeg","assets/images/NPSCoral.jpeg","assets/images/AquascapeIdeas.jpeg","assets/images/codepen.svg","assets/images/linkedin.svg","assets/images/new-twitter-logo.svg","assets/images/FacebookIcon.svg","assets/images/icons8-instagram.svg","assets/images/GitHubIcon.svg","Main_Page/Header.js","Main_Page/Body.js","Main_Page/Main.js","Main_Page/Utilities.js","BlackJack/Deck.js","BlackJack/Card.js","BlackJack/Player.js","BlackJack/Controls.js","BlackJack/Header.js","BlackJack/GameRecap.js","BlackJack/GameHistory.js","BlackJack/GameBoard.js","BlackJack/BlackJack.js","Corals_Page/CoralFirebase-config.js","Corals_Page/CoralHeader.js","Corals_Page/CoralFooter.js","Corals_Page/CoralIndex.js","Corals_Page/CoralImageScroll.js","Corals_Page/CoralHomepage.js","Corals_Page/CoralSignup.js","Corals_Page/CoralChalice.js","Corals_Page/CoralMonti.js","Corals_Page/CoralMushrooms.js","Corals_Page/CoralNPSCorals.js","Corals_Page/CoralScoly.js","Corals_Page/CoralZoas.js","Corals_Page/CoralAcro.js","Corals_Page/CoralFavia.js","Corals_Page/CoralAquascape.js","Corals_Page/CoralFishTankFurn.js","Corals_Page/CoralMain.js","Bootstrap_Page/Header.js","Bootstrap_Page/Footer.js","Bootstrap_Page/Main.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","_ref","activeLink","setActiveLink","handleLinkClick","e","linkName","preventDefault","window","location","hash","React","createElement","Fragment","className","id","href","onClick","FontAwesomeIcon","icon","faGithub","faLinkedin","faCodepen","faSquareInstagram","faSquareXTwitter","faSquareFacebook","Body","Link","to","role","aria-label","src","bjlogo","alt","target","Main","useState","spotlightPosition","setSpotlightPosition","x","y","useEffect","debouncedHandleScroll","func","wait","timeout","immediate","arguments","length","undefined","_len","args","Array","_key","context","this","later","apply","callNow","clearTimeout","setTimeout","debounce","handleScroll","currentActiveLink","scrollPosition","scrollY","forEach","sectionId","sectionEl","document","getElementById","sectionTop","offsetTop","sectionHeight","offsetHeight","addEventListener","removeEventListener","updateSpotlightPosition","clientX","clientY","style","position","top","left","right","bottom","background","concat","pointerEvents","zIndex","Deck","constructor","cards","createDeck","suits","ranks","deck","suit","rank","push","shuffleDeck","i","random","Math","floor","drawCard","pop","cardImages","heartsAce","heartsTwo","heartsThree","heartsFour","heartsFive","heartsSix","heartsSeven","heartsEight","heartsNine","heartsTen","heartsJack","heartsQueen","heartsKing","diamondsAce","diamondsTwo","diamondsThree","diamondsFour","diamondsFive","diamondsSix","diamondsSeven","diamondsEight","diamondsNine","diamondsTen","diamondsJack","diamondsQueen","diamondsKing","spadesAce","spadesTwo","spadesThree","spadesFour","spadesFive","spadesSix","spadesSeven","spadesEight","spadesNine","spadesTen","spadesJack","spadesQueen","spadesKing","clubsAce","clubsTwo","clubsThree","clubsFour","clubsFive","clubsSix","clubsSeven","clubsEight","clubsNine","clubsTen","clubsJack","clubsQueen","clubsKing","cardBack","Card","isFaceDown","Player","hand","isDealer","map","card","index","key","Controls","onNewGame","handleStand","handleDouble","handleHit","gameRunning","onBetPlaced","bet","buttonsHidden","handleChipClick","standPressed","handleSplit","splitAvailable","hitPressed","twoHands","setPreviousBet","clearBet","previousBet","setBet","setBetChips","playerChips","chips","value","img","chip5","chip10","chip25","chip50","chip100","chip250","btnDouble","title","cursor","btnStand","btnHit","btnSplit","btnBet","btnClear","height","overflow","visibility","display","gap","justifyContent","transform","chip","event","playerHandValue","dealerHandValue","result","progressBarWidth","callSettings","width","GameRecap","gameResultsCount","results","fontSize","totalGamesPlayed","gamesWon","gamesLoss","numberOfTie","numberOfBusts","numberOfBlackJacksByPlayer","numberOfBlackJacksByDealer","numberOfSplitsAvailable","numberOfsplitsPlayed","totalAmountOfBetsLost","numberOfWinsWith2Cards","totalAmountOfBets","totalAmountOfBetsWon","GameHistory","gameRoundsHistory","slice","reverse","round","roundNumber","dealerHand","join","playerHand","outcome","GameBoard","onGameRunningChange","showMessages","setShowMessages","messages","setMessages","clickCount","setClickCount","handleSettings","setHandleSettings","setDeck","setDealerHand","dealerHandText","setDealerHandText","setPlayerHand","playerHandText","setPlayerHandText","setGameRunning","setButtonsHidden","setPlayerHandValue","setDealerHandValue","setPlayerChips","gameMessage","setGameMessage","gameOutcome","setGameOutcome","gameOutcome1","setGameOutcome1","gameOutcome2","setGameOutcome2","showScores","setShowScores","endGameTimeout","useRef","gamePause","setGamePause","betChips","totalChipTypes","Object","keys","totalWidth","dealerFirstCardValue","setDealerFirstCardValue","isFirstRender","setStandPressed","setSplitAvailable","playerHand1","setPlayerHand1","playerHand2","setPlayerHand2","setTwoHands","playerHand1Value","setPlayerHand1Value","playerHand2Value","setPlayerHand2Value","setHitPressed","betHand1","setBetHand1","betHand2","setBetHand2","hand1TurnFinished","setHand1TurnFinished","hand2TurnFinished","setHand2TurnFinished","splitPressed","setSplitPressed","gamesCount","setGamesCount","setResult","setProgressBarWidth","setRoundNumber","roundOutcome","setRoundOutcome","setGameRoundsHistory","setGameResultsCount","numberOfDoubles","cardToString","convertHandToText","playerWins","prevState","playerLoss","playerPush","playerBlackJack","dealerBlackJack","playerBusts","winWithOutHit","currentBet","playerBetsWon","betWon","betsWon","playerBetsLost","betLost","betsLost","newBet","sendingPreviousBet","prev","prevBet","prevChips","asignPreviousBet","endGame","roundResults","newRoundResults","prevHistory","prevRoundNumber","prevResult","count","current","newHandValue","updatedDealerHand","updatedDealerHandValue","calculateHandValue","drawCardforDealer","newCard","newHand","finishDealerTurn","finalDealerHand","finalDealerHandValue","outcome1","outcome2","newOutcome","updatedPlayerHand1","updatedPlayerHand2","updatedPlayerHand","total","aceCount","newPlayerHandText","newDealerHandText","newWidth","timeoutId","handleGameResult","splitHand1","betOneHand","bet1","bet2","betOutcome","bet1Outcome","bet2Outcome","newOutcomeMessage","newOutcomeMessage1","newOutcomeMessage2","twoHandsPosibilities","cardValues","j","cardValue1","cardValue2","message","stopPropagation","entries","_ref2","chipType","imgSrc","from","_","chipIndex","replace","console","log","newPlayerHandValue","handleNewGame","newDeck","playerFirstCard","playerSecondCard","dealerFirstCard","dealerSecondCard","playerFirstCardValue","playerSecondCardValue","dealerHandValueOneCard","handsPosibilities","playerCard1Value","playerCard2Value","dealerCard1Value","dCard1Value","pCard1Value","pCard2Value","winningDealerCardValue","cardCounts","totalWinningCards","totalCardsRemaining","reduce","acc","safeCardsTotal","currentHandValue","valueToIndex","maxSafeValue","secondCardIndex","possibleDealerValueAfterSecondCard","thirdCardIndex","finalDealerValue","probabilityOfWinningW3cards","toFixed","probabilityOfNotBusting","numberOfWinningCards","probabilityOfWinning","parseFloat","amount","currentChips","newChips","playerHand1SecondCard","playerHand2SecondCard","BlackJack","isLoading","setIsLoading","opacity","setOpacity","isGameActive","setIsGameActive","fadeOutTimer","removeOverlayTimer","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAnalytics","getAuth","db","getFirestore","storage","getStorage","CoralHeader","user","onToggleDarkMode","loginEmail","setLoginEmail","loginPassword","setLoginPassword","error","setError","loading","setLoading","navigate","useNavigate","async","signOut","email","type","onChange","placeholder","signInWithEmailAndPassword","disabled","color","CoralFooter","isLoginPage","darkMode","footerClass","CoralIndex","ImageScroll","visibleImages","setVisibleImages","selectedImage","setSelectedImage","acroporaRef","ref","list","maxResults","urls","Promise","all","items","itemRef","getDownloadURL","prevImages","loadMoreImages","closeModal","overflowX","whiteSpace","imageUrl","marginRight","openModal","CoralHomepage","images","imagepath1","label","route","imagepath2","imagepath3","imagepath4","imagepath5","imagepath6","imagepath7","imagepath8","imagepath9","imagepath10","pageClass","pageClass2","nextPageToken","setNextPageToken","listAll","pageToken","urlPromises","imageUpload","setImageUpload","imageList","setImageList","imageListRef","then","response","fetchURLs","item","image","handleImageClick","CoralSignup","newFirstName","setNewFirstName","newLastName","setNewLastName","newUserEmail","setNewUserEmail","newUserPassword","setNewUserPassword","users","setUsers","usersCollectionRef","collection","currentUser","data","getDocs","docs","doc","getUsers","createUserWithEmailAndPassword","userCredential","addDoc","uid","firstName","lastName","catch","userDoc","deleteDoc","deleteUser","Chalice","isModalOpen","setIsModalOpen","isModalEdit","setModalEdit","selectedDescription","setSelectedDescription","selectedLastEdited","setSelectedLastEdited","selectedImageAquascapeType","setSelectedImageAquascapeType","descriptions","setDescriptions","setCurrentUser","imageDescription","setImageDescription","imageAquascapeType","setImageAquascapeType","fileInputValue","setFileInputValue","currentImageId","setCurrentImageId","currentPage","setCurrentPage","indexOfLastImage","indexOfFirstImage","currentImages","totalImages","totalPages","ceil","ImageModal","url","description","lastEdited","onClose","onEdit","editedBy","colSpan","ModalEdit","onSaveEdit","imageId","editableDescription","setEditableDescription","editableAquascapeType","setEditableAquascapeType","handleSave","alert","chaliceCollection","descriptionDocs","lastEditedBy","displayName","updateDoc","toDate","Date","sort","a","b","fetchImages","unsubscribe","onAuthStateChanged","name","maxLength","rows","files","imageName","v4","imageRef","userEmail","snapshot","uploadBytes","newDocRef","aquascapeType","prevList","docRef","docSnapshot","getDoc","exists","imageData","lastEditedDate","Function","toLocaleString","isOrphan","startsWith","confirm","deleteObject","filter","deleteImage","handleEdit","missingData","trim","handleDismiss","Monti","montiporaCollection","Mushrooms","selectedImageMushroomName","setselectedImageMushroomName","imageMushroomName","setimageMushroomName","editableMushroomName","setEditableMushroomName","mushroomsCollection","mushroomName","NPSCorals","npsCoralsCollection","Scoly","scolymiaCollection","Zoas","zoaCollection","Acro","selectedImageCoralName","setSelectedImageCoralName","imageCoralName","setImageCoralName","editableCoralName","setEditableCoralName","coralsCollection","coralName","Favia","faviaCollection","Aquascape","aquascapesCollection","FishTankFurn","fishtankfurnitureCollection","Coral_Main","setUser","setDarkMode","useLocation","pathSegment","pathname","split","allowedPathsAuthenticated","allowedPathsUnauthenticated","includes","toggleDarkMode","body","classList","toggle","onNavigate","Routes","Route","path","element","Navigate","CoralAcro","CoralFavia","CoralChalice","CoralScoly","CoralMonti","CoralMushrooms","CoralNPSCorals","CoralZoas","CoralFishTankFurn","CoralAquascape","Footer","openAccordion","setOpenAccordion","toggleAccordion","red","aria-expanded","aria-controls","aria-labelledby","App","BrowserRouter","Corals","Bootstrap","reportWebVitals","onPerfEntry","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,oCCA3CD,EAAOC,QAAU,IAA0B,yC,oCCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,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","file":"static/js/main.c3206054.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stand-button2.b6985f69.png\";","module.exports = __webpack_public_path__ + \"static/media/hit-button2.2121fae0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-blackjack.96aa3714.png\";","module.exports = __webpack_public_path__ + \"static/media/vegas-back2.6fd38ed5.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_hearts.41453bfa.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_hearts.f97ad85b.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_hearts.1c16fe10.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_hearts.5ad913da.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_hearts.8f6a2068.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_hearts.9cd2258c.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_hearts.a9afa10f.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_hearts.e6c01b13.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_hearts.cdb8fda5.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_hearts.2e6327a6.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_hearts.260cdba6.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_hearts.cf894646.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_hearts.37b5b9d7.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_diamonds.60b16fda.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_diamonds.0b5b5249.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_diamonds.b529e1c1.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_diamonds.58bd0a63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_diamonds.e27b4b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_diamonds.ee5053d4.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_diamonds.df3e8e93.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_diamonds.8afee604.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_diamonds.86608eb9.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_diamonds.4324d712.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_diamonds.ac2092c1.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_diamonds.d5647c19.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_diamonds.1a5882a6.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_spades.ce4f163f.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_spades.2354275d.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_spades.ad02dc95.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_spades.df185c63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_spades.aa8a0720.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_spades.5d221b2a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_spades.c0f5e5f9.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_spades.74766755.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_spades.e5b29fde.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_spades.2401fe36.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_spades.92aff044.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_spades.6d100fc3.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_spades.9b18a729.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_clubs.07d1c180.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_clubs.c83a7af4.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_clubs.23a7a6ac.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_clubs.02deab49.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_clubs.3781bf44.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_clubs.9c2fdf6a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_clubs.112be1df.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_clubs.6ed0b85e.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_clubs.784ea770.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_clubs.c29b28f3.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_clubs.1861c1e4.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_clubs.9e84dd75.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_clubs.2ad9bff3.png\";","module.exports = __webpack_public_path__ + \"static/media/5-chip-v2.5a524f75.png\";","module.exports = __webpack_public_path__ + \"static/media/10-chip-v2.3a023e24.png\";","module.exports = __webpack_public_path__ + \"static/media/25-chip-v2.c7981237.png\";","module.exports = __webpack_public_path__ + \"static/media/50-chip-v2.b270a5eb.png\";","module.exports = __webpack_public_path__ + \"static/media/100-chip-v2.56f3f00f.png\";","module.exports = __webpack_public_path__ + \"static/media/250-chip-v2.b303ef66.png\";","module.exports = __webpack_public_path__ + \"static/media/double-button2.ae841ef6.png\";","module.exports = __webpack_public_path__ + \"static/media/clear-button2.00626382.png\";","module.exports = __webpack_public_path__ + \"static/media/bet-button2.0ae68190.png\";","module.exports = __webpack_public_path__ + \"static/media/split-button.97e0472c.png\";","module.exports = __webpack_public_path__ + \"static/media/Acro.5e77d049.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Chalice.6d9e08dd.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Monti.b6db1706.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Favia.220fc1e1.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Mushroom.6468f369.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Scoly.ed5e512e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/Zoas.200c6e50.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/FishTank.2a71652a.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/NPSCoral.81107658.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/AquascapeIdeas.be054d11.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/codepen.59a86445.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.2ed42d14.svg\";","module.exports = __webpack_public_path__ + \"static/media/new-twitter-logo.25bfe418.svg\";","module.exports = __webpack_public_path__ + \"static/media/FacebookIcon.e95a77ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-instagram.b6c744ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/GitHubIcon.c9140343.svg\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport imagepath1 from \"../assets/images/codepen.svg\";\nimport imagepath2 from \"../assets/images/linkedin.svg\";\nimport imagepath3 from \"../assets/images/new-twitter-logo.svg\";\nimport imagepath4 from \"../assets/images/FacebookIcon.svg\";\nimport imagepath5 from \"../assets/images/icons8-instagram.svg\";\nimport imagepath6 from \"../assets/images/GitHubIcon.svg\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSquareXTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSquareFacebook } from \"@fortawesome/free-brands-svg-icons\";\nimport { faSquareInstagram } from \"@fortawesome/free-brands-svg-icons\";\nimport { faCodepen } from \"@fortawesome/free-brands-svg-icons\";\nimport { faLinkedin } from \"@fortawesome/free-brands-svg-icons\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\n\nconst Header = ({ activeLink, setActiveLink }) => {\n  const handleLinkClick = (e, linkName) => {\n    e.preventDefault(); // Prevent default anchor link behavior\n    setActiveLink(linkName);\n    window.location.hash = linkName;\n  };\n  return (\n    <>\n      <div className=\"header-container\">\n        <div className=\"page1\">\n          <div className=\"header-box\">\n            <h1 className=\"header-h1\">\n              <b>Dmitri Morozov</b>\n            </h1>\n          </div>\n          <div className=\"textbox-h5\">\n            <h5 className=\"header-h5\">\n              <b>Junior Software Engineer</b>\n            </h5>\n          </div>\n          <div className=\"textbox-p1\">\n            I build pixel-perfect, engaging, and accessible digital experiences.\n          </div>\n\n          <div className=\"local-links-box\">\n            <div className=\"header-links\" id=\"header-link-about\">\n              <a\n                href=\"#about\"\n                onClick={(e) => handleLinkClick(e, \"about\")}\n                className={activeLink === \"about\" ? \"active-link\" : \"\"}\n              >\n                ABOUT\n              </a>\n            </div>\n            <div className=\"header-links\" id=\"header-link-experience\">\n              <a\n                href=\"#experience\"\n                onClick={(e) => handleLinkClick(e, \"experience\")}\n                className={activeLink === \"experience\" ? \"active-link\" : \"\"}\n              >\n                EXPERIENCE\n              </a>\n            </div>\n            <div className=\"header-links\" id=\"header-link-projects\">\n              <a\n                href=\"#projects\"\n                onClick={(e) => handleLinkClick(e, \"projects\")}\n                className={activeLink === \"projects\" ? \"active-link\" : \"\"}\n              >\n                PROJECTS\n              </a>\n            </div>\n            <div className=\"header-links\"></div>\n          </div>\n\n          <div className=\"social-icons-box\">\n            <div className=\"social-icons\">\n              <a href=\"https://github.com/dmitrim80\">\n                <FontAwesomeIcon icon={faGithub} />\n              </a>\n              <a href=\"https://www.linkedin.com/in/dmitri-morozov-260b2920/\">\n                <FontAwesomeIcon icon={faLinkedin} />\n              </a>\n              <a href=\"https://codepen.io/dmitrim80\">\n                <FontAwesomeIcon icon={faCodepen} />\n              </a>\n              <a href=\"http://www.instagram.com/dmitrim80\">\n                <FontAwesomeIcon icon={faSquareInstagram} />\n              </a>\n              <a href=\"http://www.twitter.com/DmitriM80\">\n                <FontAwesomeIcon icon={faSquareXTwitter} />\n              </a>\n              <a href=\"http://www.facebook.com/dmitrim80\">\n                <FontAwesomeIcon icon={faSquareFacebook} />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport bjlogo from \"../BlackJack/images/logo-blackjack.png\";\n\nconst Body = () => {\n  return (\n    <>\n      <div className=\"body-container\">\n        <div className=\"more-pages\">\n          <section id=\"about\">\n            <p className=\"header-p\">\n            With a Bachelor of Science in Computer Science, my academic and\n            internship experiences have equipped me with a solid foundation in\n            software development, data structures, and algorithms. I am eager to\n            apply my knowledge and skills in a professional setting as an\n            Entry-Level Software Engineer, crafting solutions that make a\n            difference.\n            </p>\n            \n            <div className=\"headline-box\">About Me</div>\n            <div>\n              As a graduate with a passion for software engineering, I have\n              always been fascinated by the ability of code to solve complex\n              problems and create impactful digital experiences. My journey in\n              computer science has been marked by a relentless pursuit of\n              knowledge, from mastering programming languages to understanding\n              the nuances of user-centric design. Outside the classroom and\n              coding environment, I'm an avid sports fan, music and theater\n              lover, and an enthusiast of marine biology and aquatic life. These\n              diverse interests have shaped my approach to problem-solving,\n              fostering a unique blend of creativity, persistence, and attention\n              to detail.\n            </div>\n          </section>\n\n          <section id=\"experience\">\n            <div className=\"headline-box\">Experience</div>\n            <div>\n              Throughout my academic career, I have undertaken various projects\n              and internships that have allowed me to apply theoretical\n              knowledge in practical settings. These experiences have honed my\n              skills in software development, project management, and team\n              collaboration. I've contributed to software projects from concept\n              to deployment, ensuring that each solution is not only functional\n              but also meets the highest standards of quality and user\n              experience.\n            </div>\n          </section>\n\n          <section id=\"projects\">\n            \n            <ol className=\"projects-list\">\n            \n            <Link className=\"project-link\" to=\"/blackjack\"> \n              <li>\n                <div className=\"project-container\">\n                  <div className=\"overLay-project-container\"></div>\n                  <header className=\"header-time\">2024 — Present</header>\n                  <div className=\"project-main-content\">\n                    <p>\n                        <span className=\"project-header\">BlackJack Game</span>\n                        <span \n                            id=\"project-arrow\"\n                            role=\"img\"\n                            aria-label=\"Link to project\">\n                        ↗</span>\n                        <img \n                            src={bjlogo}\n                            className=\"project-img\"\n                            alt=\"logo-blackjack\"\n                        /> \n                    </p>  \n                    <p className=\"project-description\">\n                    As part of my capstone project, I developed a fully-functional\n                BlackJack game. This project allowed me to apply and showcase my\n                proficiency in JavaScript, HTML, and CSS, creating a game that\n                is not only enjoyable but also visually appealing and\n                accessible. Responsibilities included: Designing and\n                implementing game logic to ensure a seamless and engaging user\n                experience. Utilizing React for the UI to create a dynamic and\n                responsive design. Ensuring the application's performance and\n                security using Firebase as a backend service. Collaborating with\n                peers for code reviews and optimizations, emphasizing clean,\n                maintainable code.\n                    </p>\n\n                    <ul\n                      className=\"skill-elements\"\n                      aria-label=\"Technologies used\"\n                    >\n                      <li>\n                        <div className=\"skill-e\">JavaScript</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">React</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">CSS</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">HTML</div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </li>\n              </Link>\n\n              <Link className=\"project-link\" to=\"/corals/\"> \n              <li>\n                <div className=\"project-container\">\n                  <div className=\"overLay-project-container\"></div>\n                  <header className=\"header-time\">2023 — Present</header>\n                  <div className=\"project-main-content\">\n                  <p id=\"project-head\">\n                        \n                        <span className=\"project-header\">Coral Database Website</span>\n                        <span \n                            id=\"project-arrow\"\n                            role=\"img\"\n                            aria-label=\"Link to project\">\n                        ↗</span>\n                    </p>  \n                    <p className=\"project-description\">\n                    Developed a vibrant website designed for marine-life enthusiasts to share and explore images of diverse coral species. This platform utilizes Google's robust database services for secure image storage, complete with user authentication to ensure privacy and safety. Users can upload and download images, update descriptions, curate personal favorites, and share their discoveries with the community. The project is actively evolving, with ongoing enhancements to enrich user experience and interaction.\n                    </p>\n\n                    <ul\n                      className=\"skill-elements\"\n                      aria-label=\"Technologies used\"\n                    >\n                      <li>\n                        <div className=\"skill-e\">JavaScript</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">React</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">CSS</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">HTML</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">Firebase</div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </li>\n              </Link>\n              \n              <Link className=\"project-link\" to=\"/bootstrap\"> \n              <li>\n                <div className=\"project-container\">\n                  <div className=\"overLay-project-container\"></div>\n                  <header className=\"header-time\">2024</header>\n                  <div className=\"project-main-content\">\n                    <p id=\"project-head\">\n                        \n                        <span className=\"project-header\">8 Sorting Algorithms</span>\n                        <span \n                            id=\"project-arrow\"\n                            role=\"img\"\n                            aria-label=\"Link to project\">\n                        ↗</span>\n                    </p>  \n                    <p className=\"project-description\">\n                    Discover the essentials of sorting with \"8 Must-Know Sorting Algorithms,\" a dynamic educational tool built using JavaScript, Bootstrap, and React. This interactive webpage showcases the differences and efficiencies of various algorithms through engaging visuals and clear explanations. Whether you're a novice or a practiced coder, this project offers a practical look at algorithmic sorting, demonstrating each method's unique characteristics in an accessible format powered by modern web technologies.\n                    </p>\n                    \n\n \n                    <ul\n                      className=\"skill-elements\"\n                      aria-label=\"Technologies used\"\n                    >\n                      <li>\n                        <div className=\"skill-e\">React</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">Bootstrap</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">JavaScript</div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </li>\n              </Link>\n\n              <a className=\"project-link\" href='../Corals_Page/1000gal.html' target=\"_blank\">\n\n              <div className=\"project-link\"> \n              \n              <li>\n                <div className=\"project-container\">\n                  <div className=\"overLay-project-container\"></div>\n                  <header className=\"header-time\">2018-2022</header>\n                  <div className=\"project-main-content\">\n                    <p id=\"project-head\">\n\n                    \n                        <span className=\"project-header\">1000gal Project</span>\n                        \n                        <span \n                            id=\"project-arrow\"\n                            role=\"img\"\n                            aria-label=\"Link to project\">\n                        ↗</span>\n                    </p>  \n                    <p className=\"project-description\">\n                    Explore the comprehensive journey of setting up and maintaining a 1000-gallon aquarium, documented from 2018 to 2022. This project delves into the intricacies of aquatic design, ecosystem balance, and the technical challenges faced during the creation and upkeep of a large-scale aquarium. Access detailed insights and visual documentation by visiting the dedicated project page.\n                  </p>\n\n                    \n\n \n                    <ul\n                      className=\"skill-elements\"\n                      aria-label=\"Technologies used\"\n                    >\n                      <li>\n                        <div className=\"skill-e\">React</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">Bootstrap</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">JavaScript</div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </li>\n              </div></a>\n\n            </ol>\n          </section>\n\n          <section id=\"personal\">\n            <div className=\"headline-box\">Personal Interests</div>\n            <div>\n              In addition to my passion for software engineering, I maintain an\n              active lifestyle and diverse interests outside of work. Whether\n              it's hitting the gym, participating in rowing competitions,\n              cheering for my favorite football and basketball teams, or\n              exploring the wonders of marine life, these activities reflect my\n              enthusiasm for life and learning. My love for music and theater\n              also speaks to my appreciation for creativity and expression,\n              qualities that I bring to every project I undertake.\n            </div>\n          </section>\n\n          <section id=\"contact\">\n            <div className=\"headline-box\">Contact</div>\n            <div className=\"bottom-contact-box\">\n            Designed and coded in Visual Studio Code by yours truly. Built with React and CSS. All text is set in the Inter font.\n            You can reach out to me at{\" \"}\n              <a\n                href=\"mailto:dmitri.m80@gmail.com\"\n                className=\"bottom-email-link\"\n              >\n                dmitri.m80@gmail.com\n              </a>\n            </div>\n            \n           \n          </section>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Body;\n","import React, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport Body from \"./Body\";\nimport { debounce } from \"./Utilities\";\nimport \"./main.css\";\n\nconst Main = () => {\n  const [activeLink, setActiveLink] = useState(\"about\");\n  const [spotlightPosition, setSpotlightPosition] = useState({\n    x: -200,\n    y: -200,\n  });\n\n  useEffect(() => {\n    // The handleScroll function that you want to debounce\n    const handleScroll = () => {\n      const sections = [\"about\", \"interests\", \"projects\"]; // Update with your section IDs\n      let currentActiveLink = \"\";\n      const scrollPosition = window.scrollY;\n\n      sections.forEach((sectionId) => {\n        const sectionEl = document.getElementById(sectionId);\n        if (sectionEl) {\n          const sectionTop = sectionEl.offsetTop;\n          const sectionHeight = sectionEl.offsetHeight;\n          // Check if the section is at least halfway in view\n          if (\n            scrollPosition >= sectionTop - sectionHeight / 2 &&\n            scrollPosition < sectionTop + sectionHeight / 2\n          ) {\n            currentActiveLink = sectionId;\n          }\n        }\n      });\n\n      setActiveLink(currentActiveLink);\n    };\n\n    // Apply debounce to the handleScroll function\n    const debouncedHandleScroll = debounce(handleScroll, 100);\n\n    window.addEventListener(\"scroll\", debouncedHandleScroll);\n    return () => window.removeEventListener(\"scroll\", debouncedHandleScroll);\n  }, []); // Note: Since debounce creates a new function, dependencies related to the effect should be stable or included in the dependency array.\n\n  useEffect(() => {\n    const updateSpotlightPosition = (e) => {\n      setSpotlightPosition({ x: e.clientX, y: e.clientY });\n    };\n\n    // Listen for mouse movement across the entire window\n    window.addEventListener(\"mousemove\", updateSpotlightPosition);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", updateSpotlightPosition);\n    };\n  }, []);\n\n  return (\n    <>\n      <main className=\"main-box\">\n        <div\n          className=\"overlay\"\n          style={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: `radial-gradient(circle 100px at \n                ${spotlightPosition.x}px \n                ${spotlightPosition.y}px, \n                rgba(255,255,255,0.055) 0%,\n                rgba(0,0,0,0.2) 700%)`,\n            pointerEvents: \"none\", // Allow clicks to pass through\n            zIndex: 9999,\n          }}\n        ></div>\n\n        <aside>\n          <Header activeLink={activeLink} setActiveLink={setActiveLink} />\n        </aside>\n\n        <div className=\"spacer\"></div>\n\n        <section className=\"body-wrapper\">\n          <Body />\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default Main;\n","export function debounce(func, wait, immediate = false) {\n    let timeout;\n    return function(...args) {\n      const context = this;\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n  ","class Deck{\n    constructor(){\n        this.cards = this.createDeck();\n    }\n\n    createDeck(){\n        const suits = [\"hearts\", \"diamonds\",\"spades\",\"clubs\"];\n        const ranks = [\"ace\", \"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"jack\",\"queen\",\"king\"];\n        const deck = [];\n        \n        for (const suit of suits){\n            for(const rank of ranks){\n                deck.push({suit,rank});\n            }\n        }\n        return deck;\n    }\n    \n    shuffleDeck(){\n        for(let i = this.cards.length - 1; i>0;i-- ){\n            const random = Math.floor(Math.random()*(i+1));\n            [this.cards[i],this.cards[random]] = [this.cards[random],this.cards[i]];\n        }\n    }\n\n    drawCard(){\n        return this.cards.pop();\n    }\n}\nexport default Deck;","import React from 'react'\nimport cardBack from './images/vegas-back2.png';\nimport heartsAce from './images/ace_of_hearts.png';\nimport heartsTwo from './images/2_of_hearts.png';\nimport heartsThree from './images/3_of_hearts.png';\nimport heartsFour from './images/4_of_hearts.png';\nimport heartsFive from './images/5_of_hearts.png';\nimport heartsSix from './images/6_of_hearts.png';\nimport heartsSeven from './images/7_of_hearts.png';\nimport heartsEight from './images/8_of_hearts.png';\nimport heartsNine from './images/9_of_hearts.png';\nimport heartsTen from './images/10_of_hearts.png';\nimport heartsJack from './images/jack_of_hearts.png';\nimport heartsQueen from './images/queen_of_hearts.png';\nimport heartsKing from './images/king_of_hearts.png';\n\nimport diamondsAce from './images/ace_of_diamonds.png';\nimport diamondsTwo from './images/2_of_diamonds.png';\nimport diamondsThree from './images/3_of_diamonds.png';\nimport diamondsFour from './images/4_of_diamonds.png';\nimport diamondsFive from './images/5_of_diamonds.png';\nimport diamondsSix from './images/6_of_diamonds.png';\nimport diamondsSeven from './images/7_of_diamonds.png';\nimport diamondsEight from './images/8_of_diamonds.png';\nimport diamondsNine from './images/9_of_diamonds.png';\nimport diamondsTen from './images/10_of_diamonds.png';\nimport diamondsJack from './images/jack_of_diamonds.png';\nimport diamondsQueen from './images/queen_of_diamonds.png';\nimport diamondsKing from './images/king_of_diamonds.png';\n\nimport spadesAce from './images/ace_of_spades.png';\nimport spadesTwo from './images/2_of_spades.png';\nimport spadesThree from './images/3_of_spades.png';\nimport spadesFour from './images/4_of_spades.png';\nimport spadesFive from './images/5_of_spades.png';\nimport spadesSix from './images/6_of_spades.png';\nimport spadesSeven from './images/7_of_spades.png';\nimport spadesEight from './images/8_of_spades.png';\nimport spadesNine from './images/9_of_spades.png';\nimport spadesTen from './images/10_of_spades.png';\nimport spadesJack from './images/jack_of_spades.png';\nimport spadesQueen from './images/queen_of_spades.png';\nimport spadesKing from './images/king_of_spades.png';\n\nimport clubsAce from './images/ace_of_clubs.png';\nimport clubsTwo from './images/2_of_clubs.png';\nimport clubsThree from './images/3_of_clubs.png';\nimport clubsFour from './images/4_of_clubs.png';\nimport clubsFive from './images/5_of_clubs.png';\nimport clubsSix from './images/6_of_clubs.png';\nimport clubsSeven from './images/7_of_clubs.png';\nimport clubsEight from './images/8_of_clubs.png';\nimport clubsNine from './images/9_of_clubs.png';\nimport clubsTen from './images/10_of_clubs.png';\nimport clubsJack from './images/jack_of_clubs.png';\nimport clubsQueen from './images/queen_of_clubs.png';\nimport clubsKing from './images/king_of_clubs.png';\n\nconst cardImages = {\n    \"hearts-ace\": heartsAce,\n     \"hearts-two\": heartsTwo,\n     \"hearts-three\":heartsThree,\n     \"hearts-four\":heartsFour ,\n     \"hearts-five\":heartsFive ,\n     \"hearts-six\":heartsSix ,\n     \"hearts-seven\":heartsSeven ,\n     \"hearts-eight\":heartsEight, \n     \"hearts-nine\":heartsNine ,\n     \"hearts-ten\":heartsTen ,\n     \"hearts-jack\":heartsJack ,\n     \"hearts-queen\":heartsQueen ,\n     \"hearts-king\":heartsKing ,\n     \n     \"diamonds-ace\": diamondsAce,\n     \"diamonds-two\": diamondsTwo,\n     \"diamonds-three\":diamondsThree,\n     \"diamonds-four\":diamondsFour ,\n     \"diamonds-five\":diamondsFive ,\n     \"diamonds-six\":diamondsSix ,\n     \"diamonds-seven\":diamondsSeven ,\n     \"diamonds-eight\":diamondsEight, \n     \"diamonds-nine\":diamondsNine ,\n     \"diamonds-ten\":diamondsTen ,\n     \"diamonds-jack\":diamondsJack ,\n     \"diamonds-queen\":diamondsQueen ,\n     \"diamonds-king\":diamondsKing ,\n    \n     \"spades-ace\": spadesAce,\n     \"spades-two\": spadesTwo,\n     \"spades-three\":spadesThree,\n     \"spades-four\":spadesFour ,\n     \"spades-five\":spadesFive ,\n     \"spades-six\":spadesSix ,\n     \"spades-seven\":spadesSeven ,\n     \"spades-eight\":spadesEight, \n     \"spades-nine\":spadesNine ,\n     \"spades-ten\":spadesTen ,\n     \"spades-jack\":spadesJack ,\n     \"spades-queen\":spadesQueen ,\n     \"spades-king\":spadesKing ,\n    \n     \"clubs-ace\": clubsAce,\n     \"clubs-two\": clubsTwo,\n     \"clubs-three\":clubsThree,\n     \"clubs-four\":clubsFour ,\n     \"clubs-five\":clubsFive ,\n     \"clubs-six\":clubsSix ,\n     \"clubs-seven\":clubsSeven ,\n     \"clubs-eight\":clubsEight, \n     \"clubs-nine\":clubsNine ,\n     \"clubs-ten\":clubsTen ,\n     \"clubs-jack\":clubsJack ,\n     \"clubs-queen\":clubsQueen ,\n     \"clubs-king\":clubsKing ,\n     \"back\": cardBack,\n  };\n\n\nconst Card = ({suit,rank, isFaceDown}) => {\n  // const cardImage = isFaceDown ? cardBack : cardImages[`${suit}-${rank}`];\n  \n    return (\n      <div className=\"card-box\">\n      <div className={`card-content ${!isFaceDown ? 'flip' : ''}`}>\n        <div className=\"card-front\">\n          <img src={cardImages[`${suit}-${rank}`]} alt={`${rank} of ${suit}`} />\n        </div>\n        <div className=\"card-back\">\n          <img src={cardBack} alt=\"Card Back\" />\n        </div>\n      </div>\n    </div>\n    )\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card';\nimport PropTypes from 'prop-types';\n\nconst Player = ({hand,isDealer}) => {\n\n\n\n  return (\n    <>\n        <div className={`${isDealer ? 'dealer-hand' : 'player-hand'}`}>\n            {hand.length > 0 ? (\n            <div id=\"hand\">\n            {hand.map((card, index) => (\n                <Card key={index} suit={card.suit} rank={card.rank} isFaceDown={card.isFaceDown} />\n            ))}\n            </div>\n             ) : (\n            <>\n            </>\n        )}\n        </div>\n\n    </>\n  );\n}\n\nPlayer.propTypes = {\n    hand: PropTypes.array,\n    isDealer: PropTypes.bool,\n}\n\nexport default Player","import React from 'react';\nimport chip5 from './images/5-chip-v2.png';\nimport chip10 from './images/10-chip-v2.png';\nimport chip25 from './images/25-chip-v2.png';\nimport chip50 from './images/50-chip-v2.png';\nimport chip100 from './images/100-chip-v2.png';\nimport chip250 from './images/250-chip-v2.png';\nimport btnStand from './images/stand-button2.png';\nimport btnDouble from './images/double-button2.png';\nimport btnHit from './images/hit-button2.png';\nimport btnClear from './images/clear-button2.png';\nimport btnBet from './images/bet-button2.png';\nimport btnSplit from './images/split-button.png';\n\nconst Controls = ({ onNewGame, \n                    handleStand, \n                    handleDouble, \n                    handleHit, \n                    gameRunning, \n                    onBetPlaced,\n                    bet,\n                    buttonsHidden,\n                    handleChipClick,\n                    standPressed,\n                    handleSplit,\n                    splitAvailable,\n                    hitPressed,\n                    twoHands,\n                    setPreviousBet,\n                    clearBet,\n                    previousBet,\n                    setBet,\n                    setBetChips,\n                    playerChips,\n                    }) => \n    {\n    const chips = [\n        { value: 5, img: chip5 },\n        { value: 10, img: chip10 },\n        { value: 25, img: chip25 },\n        { value: 50, img: chip50 },\n        { value: 100, img: chip100 },\n        { value: 250, img: chip250 },\n    ];\n\n    return (\n        <>\n        \n            <div id='buttons-container'>\n                {gameRunning ? (\n                    <>\n                        {!buttonsHidden && (\n                            <>\n                            <img    \n                                    src={btnDouble}\n                                    className={`btn-double ${standPressed || hitPressed ? 'disabled' : ''}`}\n                                    alt='double-button' \n                                    title=\"Double\"\n                                    onClick={!standPressed ? ()=>handleDouble() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnStand} \n                                    className={`btn-stand ${standPressed ? 'disabled' : ''}`}\n                                    alt='stand-button' \n                                    title=\"Stand\"\n                                    onClick={!standPressed ? ()=>handleStand() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnHit} \n                                    className={`btn-hit ${standPressed ? 'disabled': ''}`}\n                                    alt='hit-button' \n                                    title=\"Hit\"\n                                    onClick={!standPressed ? ()=>handleHit() : undefined}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnSplit} \n                                    className={`btn-split ${(standPressed || !splitAvailable || hitPressed )? 'disabled': ''}`}\n                                    alt='split-button' \n                                    title=\"Split\"\n                                    onClick={() => !standPressed && handleSplit()}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            \n                            </>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        <img \n                            src={btnBet} \n                            className='btn-new-game' \n                            alt='bet-button' \n                            title=\"Place A Bet\"\n                            onClick={() => bet === 0 ? onBetPlaced(0):onNewGame()}\n                        />\n                        <img \n                            src={btnClear} \n                            className='btn-clear-bet' \n                            alt='clear-button' \n                            title=\"Clear\"\n                            onClick={() => {\n                                \n                                if(previousBet>0){\n                                    setBetChips([]);\n                                    setPreviousBet(0);\n                                    setBet(0);\n                                }else{\n                                    onBetPlaced(0);\n\n                                    \n                                }\n                                \n                            }}\n                        />\n                    </>\n                )}\n            </div>\n            \n            <div id='chips-row-wrapper-arrows' style={{\n                                        height: 'auto', \n                                        overflow: 'hidden'}}>\n                <div id='pointer-row-animation' style={{\n                                                visibility: !gameRunning ? 'visible' : 'hidden', \n                                                display: 'flex', \n                                                gap: '44px', \n                                                justifyContent: 'center', \n                                                transform: 'translateY(3px)'}}>\n\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                </div>\n            </div>\n            <div id='chips-row-wrapper' style={{ visibility: gameRunning ? 'hidden' : 'visible' }}>\n\n                {chips.map((chip, index) => (\n                <img key={index}\n                    src={chip.img}\n                    alt={`Chip ${chip.value}`}\n                    title={`$${chip.value}`}\n                    className='chip-img'\n                    onClick={(event) => {\n                        if(chip.value > playerChips){\n                            return;\n                        }else{\n                            if(previousBet > 0){\n                                setPreviousBet(0);\n                                setBet(0);\n                                setBetChips([]);\n                                onBetPlaced(chip.value); \n                                handleChipClick(chip.value, chip.img, event);\n                            }else{\n                                onBetPlaced(chip.value); \n                                handleChipClick(chip.value, chip.img, event);\n                            }\n                        }\n                        \n                        \n                    }}\n                    style={{ cursor: 'pointer' }} />\n                ))}\n                \n            </div>  \n        </>\n    );\n};\n\nexport default Controls;","import React from 'react'\n\n\nconst Header = ({playerHandValue,dealerHandValue,result,bet,playerChips,progressBarWidth,callSettings}) => {\n  return (\n    <>\n      <div id='blackjack-header-container'>\n        <div className='chips-count'>{`$${playerChips}`}</div>\n        <div id='games-count'>\n          <div id='games-count-filler' style={{width:`${progressBarWidth}%`}}></div>\n        </div>\n        {/* <div id='game-result'>{result}</div>  */}\n        <span id='game-settings' role='img' aria-label=\"Settings\" onClick={()=>callSettings()}>⚙️</span>\n      </div>\n      <div id='deck-dealer-row'>\n        {/* <div id='discard-tray'>{<img id='card-image-left-corner' alt='back-image' src={BackCard} />}</div>\n        <div id='new-deck'>{<img id='card-image-right-corner' alt='back-image' src={BackCard} />}</div> */}\n      </div>\n    </>\n  )\n}\n\nexport default Header","import React from 'react'\n\nconst GameRecap = ({gameResultsCount}) => {\n    const results = gameResultsCount;\n  return (\n    <div id='gamerecap-container'>\n        \n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>winnig chance:<br/><br/></div>\n            <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n            <div id='gamerecap-cell'>Games Won:<br/><br/>{results.gamesWon}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n            <div id='gamerecap-cell'>Games Lost:<br/><br/>{results.gamesLoss}</div>\n            <div id='gamerecap-cell'># of Tied Games:<br/><br/>{results.numberOfTie}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n            <div id='gamerecap-cell'># of Busts:<br/><br/>{results.numberOfBusts}</div>\n            <div id='gamerecap-cell'># of BlackJacks by Player:<br/><br/>{results.numberOfBlackJacksByPlayer}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n        <div id='gamerecap-cell'># of BlackJacks by Dealer:<br/><br/>{results.numberOfBlackJacksByDealer}</div>\n            <div id='gamerecap-cell'># of Splits Available:<br/><br/>{results.numberOfSplitsAvailable}</div>\n            \n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n        <div id='gamerecap-cell'># of Splits Played:<br/><br/>{results.numberOfsplitsPlayed}</div>\n            <div id='gamerecap-cell'>Amount of Bets Lost:<br/><br/>${results.totalAmountOfBetsLost}</div>\n           \n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n             <div id='gamerecap-cell'># of Wins With Two Cards:<br/><br/>{results.numberOfWinsWith2Cards}</div>\n            <div id='gamerecap-cell'>Bets total:<br/><br/>${results.totalAmountOfBets}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n            <div id='gamerecap-cell'>Bets total won:<br/><br/>${results.totalAmountOfBetsWon}</div>\n            <div id='gamerecap-cell'>Number of Doubles Played:<br/><br/>{results.numberOfBusts}</div>\n           \n        </div>\n        \n        \n    </div>\n  )\n}\n\nexport default GameRecap","import React from 'react'\n\nconst GameHistory = ({gameRoundsHistory}) => {\n  return (\n    <div id='gamerecap-container'>\n        <div id='gamerecap-element'>\n            <div id='recap-cell'>Game Results<br/>\n                {gameRoundsHistory && gameRoundsHistory.slice().reverse().map((round, index) => ( \n                    <div key={index}>\n                        \n                        {`---------------------------`}<br/>\n                        {`Round: ${round.roundNumber}`}<br/>\n                        {`Dealer: ${round.dealerHand.join(', ')}`}<br/> \n                        {`Value: ${round.dealerHandValue}`}<br/>\n                        {`Player: ${round.playerHand.join(', ')}`}<br/>\n                        {`Value: ${round.playerHandValue}`}<br/>\n                        {`Outcome: ${round.outcome}`}<br/>\n                    </div>\n                ))}\n            </div>\n        </div>\n    </div>\n  )\n}\n\nexport default GameHistory","import React, { useEffect, useState,useRef } from \"react\";\nimport Deck from './Deck';\nimport Player from './Player';\nimport Controls from \"./Controls\";\nimport Header from \"./Header\";\nimport btnStand from './images/stand-button2.png';\nimport btnHit from './images/hit-button2.png';\nimport GameRecap from \"./GameRecap\";\nimport GameHistory from \"./GameHistory\";\n\n\nconst GameBoard = ({ onGameRunningChange }) => {\n    const [showMessages, setShowMessages] = useState(false); \n    const [messages, setMessages] = useState([]);\n    const [clickCount, setClickCount] = useState(0); // State to count clicks\n    const [handleSettings,setHandleSettings] = useState(false);\n    const [deck, setDeck] = useState(null);\n    const [dealerHand, setDealerHand] = useState([]);\n    const [dealerHandText,setDealerHandText]=useState([]);\n    const [playerHand, setPlayerHand] = useState([]);\n    const [playerHandText,setPlayerHandText]=useState([]);\n\n    const [gameRunning, setGameRunning] = useState(false);\n    const [buttonsHidden,setButtonsHidden] = useState(false);\n    const [playerHandValue, setPlayerHandValue] = useState(0);\n    const [dealerHandValue, setDealerHandValue] = useState(0);\n    const [playerChips, setPlayerChips] = useState(1000);\n    const [bet, setBet] = useState(0);\n    const [gameMessage, setGameMessage] = useState(\"Place a bet...\");\n    const [gameOutcome, setGameOutcome] = useState(\"\");\n    const [gameOutcome1, setGameOutcome1] = useState(\"\");\n    const [gameOutcome2, setGameOutcome2] = useState(\"\");\n    const [showScores, setShowScores] = useState(false);\n    const endGameTimeout = useRef();\n    const [gamePause,setGamePause] = useState(false);\n    \n    const [betChips,setBetChips] = useState([]);\n    const chipWidth = 40;\n    const gap = 0.1;\n    const [previousBet,setPreviousBet] = useState(0);\n    const totalChipTypes = Object.keys(betChips).length;\n    const totalWidth = totalChipTypes * chipWidth + (totalChipTypes - 1) * gap;\n    const [dealerFirstCardValue,setDealerFirstCardValue] = useState(0);\n    const isFirstRender = useRef(true);\n    const [standPressed, setStandPressed] = useState(false);\n    const [splitAvailable,setSplitAvailable] = useState(false);\n    const [playerHand1,setPlayerHand1] = useState([]);\n    const [playerHand2,setPlayerHand2] = useState([]);\n    const [twoHands,setTwoHands] = useState(false);\n    const [playerHand1Value,setPlayerHand1Value]= useState(0);\n    const [playerHand2Value,setPlayerHand2Value]=useState(0);\n    const [hitPressed,setHitPressed] = useState(false);\n    const [betHand1,setBetHand1] = useState(0);\n    const [betHand2,setBetHand2] = useState(0);\n    const [hand1TurnFinished,setHand1TurnFinished] = useState(false);\n    const [hand2TurnFinished,setHand2TurnFinished] = useState(false);\n    const [splitPressed,setSplitPressed] = useState(false);\n    \n    //counter for progressBar\n    const [gamesCount,setGamesCount] = useState(1);\n    const [result,setResult] = useState(\"\");\n    const [progressBarWidth,setProgressBarWidth] = useState(5);\n    const [roundNumber,setRoundNumber] = useState(1);\n    const [roundOutcome,setRoundOutcome] = useState(\"\");\n    const [gameRoundsHistory, setGameRoundsHistory] = useState([]);\n    const [gameResultsCount, setGameResultsCount] = useState({\n        totalGamesPlayed: 0,\n        gamesWon: 0,\n        gamesLoss: 0,\n        numberOfTie: 0,\n        numberOfBlackJacksByPlayer: 0,\n        numberOfBlackJacksByDealer:0,\n        numberOfSplitsAvailable: 0,\n        numberOfsplitsPlayed:0,\n        numberOfDoubles: 0,\n        numberOfBusts: 0,\n        numberOfWinsWith2Cards: 0,\n        totalAmountOfBets:0,\n        totalAmountOfBetsWon:0,\n        totalAmountOfBetsLost:0,\n        });\n        \n    \n    \n    const handsPosibilities = (playerCard1Value,playerCard2Value,dealerCard1Value) =>{\n        const cardValues = [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11];\n        const dCard1Value = dealerCard1Value;\n        const pCard1Value = playerCard1Value;\n        const pCard2Value = playerCard2Value;\n        let winningDealerCardValue = (pCard1Value+pCard2Value)-dCard1Value+1;\n        const cardCounts = [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 16, 4];\n        const dealerStopValue = 17;\n        const playerHandValue = 18; // Player's hand value for comparison\n        let totalWinningCards = 0;\n        let totalCardsRemaining = cardCounts.reduce((acc, count) => acc + count, 0);\n        let safeCardsTotal = 0;\n        const currentHandValue = pCard1Value + pCard2Value;\n        \n        const valueToIndex = (value) => {\n            if (value >= 2 && value <= 10) return value;\n            if (value === 11) return 12; // Assuming Ace is represented as 11\n            return 10; // Face cards (J, Q, K) are all treated as 10\n        };\n        cardCounts[valueToIndex(playerCard1Value)]--;\n        cardCounts[valueToIndex(playerCard2Value)]--;\n        cardCounts[valueToIndex(dealerCard1Value)]--;\n\n        const maxSafeValue = 21 - currentHandValue;\n        \n        //calculating safe cards for players 3rd card.\n        cardCounts.forEach((count, index) => {\n            if (index === 12 && maxSafeValue >= 11) { // Ace as 11\n              safeCardsTotal += count;\n            } else if (index === 12 && maxSafeValue >= 1) { // Ace as 1\n              safeCardsTotal += count;\n            } else if (index <= maxSafeValue) {\n              safeCardsTotal += count;\n            }\n          });\n\n          for (let secondCardIndex = 2; secondCardIndex <= 11; secondCardIndex++) {\n            let possibleDealerValueAfterSecondCard = dCard1Value + (secondCardIndex === 11 ? 11 : secondCardIndex);\n            \n            // Exclude scenarios where the dealer reaches the stop value or higher with the second card\n            if (possibleDealerValueAfterSecondCard >= dealerStopValue) continue;\n        \n            // Iterate over potential third cards\n            for (let thirdCardIndex = 2; thirdCardIndex <= 11; thirdCardIndex++) {\n                let finalDealerValue = possibleDealerValueAfterSecondCard + (thirdCardIndex === 11 ? 11 : thirdCardIndex);\n                \n                // Conditions for the dealer's win with the third card\n                if (finalDealerValue > playerHandValue && finalDealerValue <= 21) {\n                    totalWinningCards += cardCounts[thirdCardIndex];\n                }\n            }\n        }\n        \n        let probabilityOfWinningW3cards = (totalWinningCards / totalCardsRemaining) * 100;\n        console.log(`Probability of dealer winning with 3rd card: ${probabilityOfWinningW3cards.toFixed(2)}%`);\n          // player 3rd card probability\n        const probabilityOfNotBusting = (safeCardsTotal / totalCardsRemaining) * 100;\n        console.log(\"3rd card probability:\",probabilityOfNotBusting);\n\n        //dealer card probability\n        let numberOfWinningCards = cardCounts.slice(winningDealerCardValue, 12).reduce((acc, count) => acc + count, 0);\n        console.log(\"Number of wining cards remain for dealer:\",numberOfWinningCards);\n        let probabilityOfWinning = parseFloat((numberOfWinningCards / totalCardsRemaining) * 100).toFixed(2);\n\n        console.log(\"Probability of drawing a card of \",winningDealerCardValue,\"or higher:\" + probabilityOfWinning + \"%\");\n\n        // console.log(\"Number of hands greater than \",currentHandValue,\" \",numberOfHigherHands);\n\n    }\n    \n   \n    const twoHandsPosibilities = () => {\n        const cardValues = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11];\n        let messages = [];\n        let x = 1; // Ensure this starts at 1 every time this function is called\n        for (let i = 0; i < 52; i++) {\n            for (let j = i + 1; j < 52; j++) {\n                let cardValue1 = cardValues[i%13];\n                let cardValue2 = cardValues[j%13];\n                let value = cardValue1 + cardValue2;\n                let message = `${x} Combo: ${cardValue1} + ${cardValue2} = ${value}`;\n                \n                messages.push(message);\n                x++;\n            }\n        }  \n        return messages;\n    };\n\n    \n    const callSettings = () =>{\n        setHandleSettings(!handleSettings);\n    }    \n    const cardToString = (card) => {\n        return `${card.rank} of ${card.suit}`;\n        };\n    const convertHandToText = (hand) => {\n        return hand.map(cardToString);\n        };\n\n    const clearBet = () => {\n        // Assuming you want to clear the bet and return the bet amount to the player's chips only if the bet hasn't been played yet\n        if (!gameRunning) {\n            setPlayerChips((prevChips) => prevChips + bet); // Return the current bet amount to the player's chips\n        }\n        setBet(0); // Reset the current bet to 0\n        setPreviousBet(0); // Reset the previous bet to 0\n        // Additional logic as needed\n    };\n\n    // calculates number of games Won\n    const playerWins = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, gamesWon:prevState.gamesWon + 1};\n        });\n    }\n    // calculates number of games Lost\n    const playerLoss = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, gamesLoss:prevState.gamesLoss + 1};\n        });\n    }\n    // calculates number of Tie games.\n    const playerPush = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfTie:prevState.numberOfTie + 1};\n        });\n    }\n    // calculate number of blackjack by player.\n    const playerBlackJack = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfBlackJacksByPlayer: prevState.numberOfBlackJacksByPlayer +1};\n        });\n    }\n    // calculate number of blackjack by dealer.\n    const dealerBlackJack = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfBlackJacksByDealer: prevState.numberOfBlackJacksByDealer +1};\n        });\n    }\n//calculate number of splits available\n    const splitsAvailable = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfSplitsAvailable:prevState.numberOfSplitsAvailable + 1};\n        });\n    }\n    //calculate number of splits played\n    const splitsPlayed = () =>{\n        setGameResultsCount(prevState =>{\n            return{...prevState, numberOfsplitsPlayed:prevState.numberOfsplitsPlayed + 1};\n        });\n    }\n     //calculate number of doubles played\n     const doublesPlayed = () =>{\n        console.log(\"running doublesPlayed inside doublesPlayed\");\n        setGameResultsCount(prevState =>{\n            return{...prevState, numberOfDoubles:prevState.numberOfDoubles + 1};\n        });\n    }\n     //calculates number of Bust games.\n     const playerBusts = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfBusts:prevState.numberOfBusts + 1};\n        });\n    }\n    //calculates number of games won with 2 cards, excluding blackjack\n    const winWithOutHit = () =>{\n        if(!hitPressed){\n            setGameResultsCount(prevState => {\n                return{...prevState,numberOfWinsWith2Cards: prevState.numberOfWinsWith2Cards+1 };\n            });\n        }\n    }\n    //calculates total amount of Bets\n    const totalAmountOfBets = (bet) => {\n        let currentBet = bet;\n        setGameResultsCount(prevState => {\n            return{...prevState,totalAmountOfBets:prevState.totalAmountOfBets + currentBet};\n        });\n    }\n    //calculates total amount of bets won\n    const playerBetsWon = (betWon) =>{\n        let betsWon = betWon;\n        setGameResultsCount(prevState =>{\n            return{...prevState, totalAmountOfBetsWon:prevState.totalAmountOfBetsWon +betsWon};\n        })\n    }\n    //calculates total amount of bets lost\n    const playerBetsLost = (betLost) =>{\n        let betsLost = betLost;\n        setGameResultsCount(prevState =>{\n            return{...prevState, totalAmountOfBetsLost:prevState.totalAmountOfBetsLost -betsLost};\n        })\n    }\n   \n    \n    const updateGameRoundsHistory = (newRoundResults) => {\n        setGameRoundsHistory(prevHistory => [...prevHistory, newRoundResults]);\n      };\n\n    \n    \n\n    const handleGameResult = () => {\n        \n        \n        let splitHand1=\"\";\n        let splitHand2=\"\";\n        let preBet = previousBet;\n        let chips = playerChips;\n        let betOneHand = bet;\n        let bet1 = betHand1;\n        let bet2 = betHand2;\n        let betOutcome = 0;\n        let bet1Outcome=0;\n        let bet2Outcome=0;\n        let newOutcomeMessage =\"\";\n        let newOutcomeMessage1=\"\";\n        let newOutcomeMessage2=\"\";\n        totalAmountOfBets(bet1);\n        totalAmountOfBets(bet2);\n        totalAmountOfBets(bet);\n        // let finalOutcome;\n    \n\n        if(splitPressed){\n            if(gameOutcome2===\"\" || gameOutcome1 ===\"\"){\n                return;\n            }else{\n                switch(gameOutcome1) {\n                    case \"PlayerWins BlackJack\":\n                        newOutcomeMessage1 = `BlackJack 1st hand, win: ${bet1*1.5}`;\n                        bet1Outcome = bet1*2.5;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        playerWins();\n                        playerBlackJack();\n                        playerBetsWon(bet1Outcome);\n                        \n                        break;\n                    case \"DealerWins BlackJack\":\n                        newOutcomeMessage1 = `BlackJack, Dealer wins...1st hand -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        playerLoss();\n                        dealerBlackJack();\n                        playerBetsLost(bet1);\n                        break;\n                    case \"DealerWins Bust\":\n                        newOutcomeMessage1 = `Bust! Dealer Wins! 1st hand  -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        playerLoss();\n                        playerBusts();\n                        playerBetsLost(bet1);\n                        break;\n                    case \"DealerWins\":\n                        newOutcomeMessage1 = `Dealer Wins...1st hand -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        playerLoss();\n                        playerBetsLost(bet1);\n                        break;\n                    case \"PlayerWins Bust\":\n                        newOutcomeMessage1 = `Dealer Bust...1st hand Win! +$${bet1}`;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        bet1Outcome = bet1;\n                        playerWins();\n                        winWithOutHit();\n                        playerBetsWon(bet1Outcome);\n                        break;\n                    case \"PlayerWins\":\n                        newOutcomeMessage1 = `1st Hand Win! +$${bet1}!`;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        bet1Outcome = bet1;\n                        playerWins();\n                        winWithOutHit();\n                        playerBetsWon(bet1Outcome);\n                        break;\n                    case \"Push\":\n                        newOutcomeMessage1 = `Push! 1st Hand Tie... Bet returned: $${bet1}`;\n                        splitHand1 = \"1st Hand - Push\";\n                        bet1Outcome = 0;\n                        playerPush();\n                        break;\n                    default:\n                        newOutcomeMessage1 = \"Unknown outcome.\";\n                        splitHand1 = \"1st Hand - Unknown\";\n                        break;\n                }\n                switch(gameOutcome2) {\n                    case \"PlayerWins BlackJack\":\n                        newOutcomeMessage2 = `BlackJack 2nd hand, win: ${bet2*1.5}`;\n                        bet2Outcome = bet2*2.5;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        playerWins();\n                        playerBlackJack();\n                        playerBetsWon(bet2Outcome);\n                \n                        break;\n                    case \"DealerWins BlackJack\":\n                        newOutcomeMessage2 = `BlackJack, Dealer wins...2nd hand -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        playerLoss();\n                        dealerBlackJack();\n                        playerBetsLost(bet2);\n                        break;\n                    case \"DealerWins Bust\":\n                        newOutcomeMessage2 = `Bust! Dealer Wins! 2nd hand  -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        playerLoss();\n                        playerBusts();\n                        playerBetsLost(bet2);\n                        break;\n                    case \"DealerWins\":\n                        newOutcomeMessage2 = `Dealer Wins...2nd hand -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        playerLoss();\n                        playerBetsLost(bet2);\n                        break;\n                    case \"PlayerWins Bust\":\n                        newOutcomeMessage2 = `Dealer Bust...2nd hand Win! +$${bet2}`;\n                        splitHand1 = \"2nd Hand - Player Wins\";\n                        bet2Outcome = bet2;\n                        playerWins();\n                        playerBusts();\n                        winWithOutHit();\n                        playerBetsWon(bet2Outcome);\n                        break;\n                    case \"PlayerWins\":\n                        newOutcomeMessage2 = `2nd Hand Win! +$${bet2}!`;\n                        splitHand1 = \"2nd Hand - Player Wins\";\n                        bet2Outcome = bet2;\n                        playerWins();\n                        winWithOutHit();\n                        playerBetsWon(bet2Outcome);\n                        break;\n                    case \"Push\":\n                        newOutcomeMessage2 = `Push! 1st Hand Tie... Bet returned: $${bet2}`;\n                        splitHand1 = \"2nd Hand - Push\";\n                        bet2Outcome = 0;\n                        playerPush();\n                        break;\n                    default:\n                        newOutcomeMessage2 = \"Unknown outcome.\";\n                        break;\n                }\n                let finalMessage = newOutcomeMessage1 + \"\\n \" +newOutcomeMessage2;\n                setGameMessage(finalMessage);\n                \n            }\n        }else{\n            switch(gameOutcome) {\n                case \"PlayerWins BlackJack\":\n                    newOutcomeMessage = `BlackJack, You Won +$${betOneHand*1.5}!!!`;\n                    betOutcome =  betOneHand *2.5;\n                    playerWins();\n                    playerBlackJack();\n                    playerBetsWon(betOutcome);\n                    break;\n                case \"DealerWins BlackJack\":\n                    newOutcomeMessage = `BlackJack, Dealer wins... -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    playerLoss();\n                    dealerBlackJack();\n                    playerBetsLost(betOneHand);\n                    break;\n                case \"DealerWins Bust\":\n                    newOutcomeMessage = `Bust! Dealer Wins! -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    playerLoss();\n                    playerBusts();\n                    playerBetsLost(betOneHand);\n                    break;\n                case \"DealerWins\":\n                    newOutcomeMessage = `Dealer Wins... -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    playerLoss();\n                    playerBetsLost(betOneHand);\n                    break;\n                case \"PlayerWins Bust\":\n                    newOutcomeMessage = `Dealer Bust... Player Wins! +$${betOneHand}`;\n                    betOutcome = betOneHand;\n                    playerWins();\n                    playerBusts();\n                    winWithOutHit();\n                    playerBetsWon(betOutcome);\n                    break;\n                case \"PlayerWins\":\n                    newOutcomeMessage = `You Won +$${betOneHand}!`;\n                    betOutcome = betOneHand;\n                    playerWins();\n                    winWithOutHit();\n                    playerBetsWon(betOutcome);\n                    break;\n                case \"Push\":\n                    newOutcomeMessage = `Push! Tie... Bet returned: $${betOneHand}`;\n                    betOutcome = 0;\n                    playerPush();\n                    break;\n                default:\n                    newOutcomeMessage = \"Unknown outcome.\";\n                    break;\n            }\n            \n            setGameMessage(newOutcomeMessage);\n            \n        }\n        if (newOutcomeMessage === \"\"){\n           \n            betOutcome= bet2Outcome + bet1Outcome + bet1+bet2;\n      \n            chips = betOutcome + chips;\n          \n            setPlayerChips(chips);\n            \n        }else{\n           \n            betOutcome = betOutcome + betOneHand;\n           \n            chips = betOutcome +chips;\n           \n            setPlayerChips(chips);\n            \n        }       \n        \n        endGame();\n    }    \n\n    \n    const handleSplit = ()=>{\n        \n        if (playerChips >= bet && !gamePause)\n        {\n            setButtonsHidden(true);\n            setSplitPressed(true);\n            splitsPlayed();\n            const betHand1 = bet;\n            const betHand2 = bet;\n            setBetHand1(betHand1);\n            setBetHand2(betHand2);\n            setPlayerChips(playerChips-bet);\n            \n            const newDeck = deck;\n            const playerHand1SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerHand2SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerHand1 = [playerHand[0],playerHand1SecondCard];\n            const playerHand2 = [playerHand[1],playerHand2SecondCard];\n            setPlayerHand1(playerHand1);\n            setPlayerHand2(playerHand2);\n            setTwoHands(true);\n            setPlayerHand([]);\n            setTimeout(()=>{\n                setPlayerHand1(playerHand1.map(card => ({...card,isFaceDown: false})))\n                setPlayerHand2(playerHand2.map(card => ({...card,isFaceDown: false})))\n            },500);\n            const playerHand1Value = calculateHandValue(playerHand1);\n            const playerHand2Value = calculateHandValue(playerHand2);\n            setPlayerHand1Value(playerHand1Value);\n            setPlayerHand2Value(playerHand2Value);\n            setPlayerHandValue(0);\n            \n            if(playerHand1Value===21 && playerHand2Value ===21){\n                \n                // setPlayerChips(playerChips+betHand1*2.5+betHand2*2.5);\n                setGameOutcome1(\"PlayerWins BlackJack\");\n                setGameOutcome2(\"PlayerWins BlackJack\");\n                setHand2TurnFinished(true);\n                setHand1TurnFinished(true);\n            }else{\n                //checking turn for hand2 during split\n                if(playerHand2Value === 21){\n                    // setBetHand2(betHand2*2.5);\n                    setGameOutcome2(\"PlayerWins BlackJack\");\n                    setHand2TurnFinished(true);\n                   \n                }else{\n                    let gameMessage = `What do you want to do? Hit or Stand`;                        \n                    setGameMessage(gameMessage);\n                }\n                //checking turn for hand1 during split\n                if(playerHand1Value === 21){\n                    // let resultHand1 = `Hand1 BlackJack you won ${betHand1*2.5}`;\n                    setGameOutcome1(\"PlayerWins\");\n                    // setBetHand1(betHand1*2.5);\n                    setHand1TurnFinished(true);\n                   \n                }\n                else{\n                    let gameMessage = \"What do you want to do? Hit or Stand\"\n                    setGameMessage(gameMessage);\n\n                }\n                \n\n            }\n        }else{\n            setGameMessage(\"Not enough chips for split...\");\n            return;\n        }\n        \n\n\n    }\n    const handleChipClick = (amount, imgSrc, event) => {\n        event.stopPropagation();\n        \n\n        setBetChips(currentChips => {\n            // Create a new object to avoid direct state mutation\n            const newChips = { ...currentChips };\n            const chipType = `chip${amount}`;\n\n            if (newChips[chipType]) {\n                newChips[chipType].count += 1;\n                // Adjust position logic as necessary\n                // newChips[chipType].position += 10; \n            } else {\n                newChips[chipType] = { imgSrc, count: 1, position: 0 };\n            }\n\n            return newChips;\n        });\n    };\n\n    const onBetPlaced = (newBet, sendingPreviousBet = false) => {\n        if (gamePause) {\n            setGameMessage(\"Game Paused...\");\n            return;\n        }else if (newBet === 0) {\n            setPlayerChips(prev => prev + bet);\n            setGameMessage(\"Place A Bet...\");\n            setBet(0);\n            setBetChips([]);\n        }else if (!gameRunning && playerChips >= newBet) {\n            if(sendingPreviousBet){\n                setPlayerChips(prevChips => prevChips - newBet);\n            \n            }else{\n                setBet(prevBet => prevBet + newBet);\n                setPlayerChips(prevChips => prevChips - newBet);\n            }\n        } else {\n            return;\n        }\n    };\n    \n    \n    const assignGameResults = () =>{\n        setGameResultsCount(prevResult =>({\n            ...prevResult, \n            totalGamesPlayed: prevResult.totalGamesPlayed+1\n        }));\n        setGamesCount(count=>count+1);\n    }\n    \n    \n    const handleNewGame = () => {\n        if (previousBet > playerChips){\n            setGameMessage(`Not enough chips, change your bet...`);\n            return;\n        }else {\n            if(previousBet!==0 ){\n                let sendingPreviousBet = true;\n                onBetPlaced(previousBet,sendingPreviousBet);\n            }\n            asignPreviousBet(bet);\n            setSplitAvailable(false);\n            setHand1TurnFinished(false);\n            setHand2TurnFinished(false);\n            setSplitPressed(false);\n            setHitPressed(false);\n            setButtonsHidden(false);\n            setGameRunning(true);\n            setShowScores(true);\n            setGameMessage(`Your bet is $${bet}`);\n            const newDeck = new Deck();\n            newDeck.shuffleDeck();\n            setDeck(newDeck);\n        \n        \n        \n        \n            const playerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n\n            setPlayerHand([playerFirstCard, playerSecondCard]);\n            setDealerHand([dealerFirstCard, dealerSecondCard]);\n            \n            \n\n            setTimeout(() => {\n                // Flip all player's cards\n                setPlayerHand(playerHand.map(card => ({ ...card, isFaceDown: false })));\n                \n                // Flip 1st dealercards\n                setDealerHand(dealerHand.map((card, index) => \n                    index === 0 ? { ...card, isFaceDown: false } : card // Flip only the first card\n                ));\n            }, 500); // Adjust this delay as needed\n            const playerHand = [playerFirstCard,playerSecondCard];\n            setPlayerHand(playerHand);\n            const dealerHand = [dealerFirstCard,{...dealerSecondCard,isFaceDown: true }];\n            setDealerHand(dealerHand);\n            \n            const playerFirstCardValue = calculateHandValue([playerFirstCard]);\n            const playerSecondCardValue = calculateHandValue([playerSecondCard]);\n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n            const dealerHandValue = calculateHandValue(dealerHand);\n            const dealerHandValueOneCard = calculateHandValue([dealerFirstCard]);\n            setDealerFirstCardValue(dealerHandValueOneCard);\n            //checking for blackjack or 2 blackjacks\n            let newOutcome; \n            //passing 3 card values to check probability\n            handsPosibilities(playerFirstCardValue,playerSecondCardValue,dealerHandValueOneCard);\n\n            if(playerHandValue===21 && dealerHandValue === 21){\n                setDealerHandValue(dealerHandValue);\n                setTimeout(()=>{\n                newOutcome = \"Push\";        \n                setGameOutcome(newOutcome);\n                const updatedDealerHand = dealerHand.map(card => ({\n                    ...card,\n                    isFaceDown: false,\n                }));\n                setDealerHand(updatedDealerHand);\n                               \n            },1500);   \n            }else if(playerHandValue ===21){\n                setDealerHandValue(dealerHandValue);\n                setTimeout(()=>{\n                    newOutcome=\"PlayerWins BlackJack\";\n                    setGameOutcome(newOutcome);\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown: false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    \n                },1500);\n            }else if(dealerHandValue ===21){\n                \n                setDealerHandValue(dealerHandValue);\n                setTimeout(()=>{\n                    newOutcome=\"DealerWins BlackJack\";\n                    setGameOutcome(newOutcome);;\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown:false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                },1500);\n            }else{\n                setDealerHandValue(dealerHandValueOneCard);\n                if(playerFirstCard.rank === playerSecondCard.rank ){\n                    setSplitAvailable(true);\n                    splitsAvailable();\n                };\n            }         \n        }    \n    };\n\n    const asignPreviousBet = (bet) =>{\n        let currentBet = bet;\n        setPreviousBet(currentBet);\n       \n    }\n\n    const endGame = () => {\n            const roundResults = {\n                roundNumber: roundNumber,\n                playerHand: [...playerHandText], // You may need to adjust based on how your card objects are structured\n                playerHandValue: playerHandValue,\n                dealerHand: [...dealerHandText], // Adjust as necessary for your card objects\n                dealerHandValue: dealerHandValue,\n                outcome: gameOutcome // Or any other outcome variable you have\n            };\n\n            updateGameRoundsHistory(roundResults);\n\n            setRoundNumber(prevRoundNumber => prevRoundNumber + 1);\n            assignGameResults();\n            setGamePause(true);\n            endGameTimeout.current = setTimeout(() => {\n                setSplitAvailable(false);\n                setHand1TurnFinished(false);\n                setHand2TurnFinished(false);\n                setSplitPressed(false);\n                setDealerHand([]);\n                setPlayerHand([]);\n                setGameOutcome(\"\");\n                setGameOutcome1(\"\");\n                setGameOutcome2(\"\");\n                setGameMessage(\"Place A Bet...\");\n                setShowScores(false);\n                setGameRunning(false);\n                setHitPressed(false);\n                setTwoHands(false);\n                setStandPressed(false);\n                setButtonsHidden(true);\n                setGamePause(false);\n                setBetHand1(0);\n                setBetHand2(0);\n                clearTimeout(endGameTimeout.current);\n                \n            }, 3000);\n    };\n        \n    const handleStand = (newHandValue = playerHandValue,hand = null) => {\n            \n            if(splitPressed){\n\n                if(hand===\"hand1\" && standPressed === false){\n                    const playerHand1Value = newHandValue;\n                  \n                    setHand1TurnFinished(true);\n                }\n                if(hand===\"hand2\" && standPressed === false){\n                    const playerHand2Value = newHandValue;\n                   \n                    setHand2TurnFinished(true);\n                }\n                \n                if(hand1TurnFinished&&hand2TurnFinished){\n                    \n                    setTimeout(()=>{ \n                        let updatedDealerHand = dealerHand.map((card, index) => ({\n                            ...card,\n                            isFaceDown: index === 1 ? false : card.isFaceDown,\n                        }));\n                        setDealerHand(updatedDealerHand);\n                        \n                    //Recalculate dealerHand value and display it by using setTmeout\n                        let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                    \n                        setDealerHandValue(updatedDealerHandValue);\n                        \n                        if(playerHand1Value>21 && playerHand2Value>21){\n                            setGameMessage(\"Bust... Dealer Wins!\");\n                            let result = \"Dealer Wins\";\n                            setResult(result);\n                            playerBusts();\n                            playerBusts();\n                            endGame();\n                            return;\n                        }\n                        const drawCardforDealer = () => {\n                    //check handValue, drawCard until handValue is 17 or higher\n                            if (updatedDealerHandValue < 17 && deck){\n                                //delay to draw card by 1.5 seconds, card with facedown\n                                setTimeout(() => {\n                                    const newCard = { ...deck.drawCard(), isFaceDown: true };\n                                    updatedDealerHand = [...updatedDealerHand, newCard];\n                                    setDealerHand(updatedDealerHand);\n                                    //delay displaying last card with face up by 1 seconds\n                                    setTimeout(()=>{\n                                        const newHand = [...updatedDealerHand];\n                                        newHand[newHand.length - 1].isFaceDown = false; \n                                        setDealerHand(newHand);\n                                        \n                                        updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                        setDealerHandValue(updatedDealerHandValue);\n                                    },500);\n                                        \n                                }, 500);\n    \n                                setTimeout(()=>{\n                                    if(updatedDealerHandValue < 17){\n                                        setTimeout(()=>{\n                                            drawCardforDealer();\n                                        },1000);\n                                        \n                                    }else {\n                                        setTimeout(()=>{\n                                            finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                        },2000);\n                                        \n                                    }\n                                },1000);\n                                    \n                                }else{\n                                    setTimeout(()=>{\n                                        \n                                        finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                    },500);\n                                    \n                                }\n                        }\n                        \n                        setTimeout(()=>{\n                            drawCardforDealer();\n                        },2000);\n                        \n                    },1000);\n                }\n            }else{\n                setStandPressed(true);\n                // Make 2nd dealer card visible, after 1 second delay\n            setTimeout(()=>{ \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                \n            //Recalculate dealerHand value and display it by using setTmeout\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n            \n                setDealerHandValue(updatedDealerHandValue);\n            \n                const drawCardforDealer = () => {\n            //check handValue, drawCard until handValue is 17 or higher\n                    if (updatedDealerHandValue < 17 && deck){\n                        //delay to draw card by 1.5 seconds, card with facedown\n                        setTimeout(() => {\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            updatedDealerHand = [...updatedDealerHand, newCard];\n                            setDealerHand(updatedDealerHand);\n                            //delay displaying last card with face up by 1 seconds\n                            setTimeout(()=>{\n                                const newHand = [...updatedDealerHand];\n                                newHand[newHand.length - 1].isFaceDown = false; \n                                setDealerHand(newHand);\n                                \n                                updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                setDealerHandValue(updatedDealerHandValue);\n                            },500);\n                                \n                        }, 1000);\n\n                        setTimeout(()=>{\n                            if(updatedDealerHandValue < 17){\n                                setTimeout(()=>{\n                                    drawCardforDealer();\n                                },1500);\n                                \n                            }else {\n                                setTimeout(()=>{\n                                    finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                },1500);\n                                \n                            }\n                        },1500);\n                            \n                        }else{\n                            setTimeout(()=>{\n                                \n                                finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                            },1500);\n                            \n                        }\n                }\n                \n                setTimeout(()=>{\n                    drawCardforDealer();\n                },1500);\n                \n            },1000);\n            }\n    }\n\n    const finishDealerTurn = (finalDealerHand,finalDealerHandValue,newHandValue=playerHandValue) => {\n        \n        setTimeout(()=>{\n            setDealerHand(finalDealerHand);\n            setDealerHandValue(finalDealerHandValue);\n        \n            if (splitPressed){\n                let outcome1=\"\";\n                let outcome2=\"\";\n                //playerHand1 outcome\n                if (finalDealerHandValue > 21) {\n                    outcome1 = \"PlayerWins Bust\";\n            \n                } else if (playerHand1Value > 21) {\n                    outcome1 = \"DealerWins Bust\";\n            \n                } else if (playerHand1Value === 21 && finalDealerHandValue !== 21) {\n                    outcome1 = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && playerHand1Value !== 21) {\n                    outcome1 = \"DealerWins\";\n    \n                } else if (playerHand1Value > finalDealerHandValue) {\n                    outcome1 = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > playerHand1Value) {\n                    outcome1 = \"DealerWins\";\n\n                } else {\n                    outcome1 = \"Push\";\n                }\n                //playerHand2 outcome\n                if (finalDealerHandValue > 21) {\n                    outcome2 = \"PlayerWins Bust\";\n            \n                } else if (playerHand2Value > 21) {\n                    outcome2 = \"DealerWins Bust\";\n            \n                } else if (playerHand2Value === 21 && finalDealerHandValue !== 21) {\n                    outcome2 = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && playerHand2Value !== 21) {\n                    outcome2 = \"DealerWins\";\n    \n                } else if (playerHand2Value > finalDealerHandValue) {\n                    outcome2 = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > playerHand2Value) {\n                    outcome2 = \"DealerWins\";\n\n                } else {\n                    outcome2 = \"Push\";\n                }\n                \n\n                setGameOutcome1(outcome1);\n                setGameOutcome2(outcome2);\n            }else{\n                let outcome=\"\";\n                if (finalDealerHandValue > 21) {\n                    outcome = \"PlayerWins Bust\";\n            \n                } else if (newHandValue > 21) {\n                    outcome = \"DealerWins Bust\";\n            \n                } else if (newHandValue === 21 && finalDealerHandValue !== 21) {\n                    outcome = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && newHandValue !== 21) {\n                    outcome = \"DealerWins\";\n    \n                } else if (newHandValue > finalDealerHandValue) {\n                    outcome = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > newHandValue) {\n                    outcome = \"DealerWins\";\n\n                } else {\n                    outcome = \"Push\";\n                }\n\n                setGameOutcome(outcome);\n            }\n        },500);\n        \n    };\n    \n\n    const handleDouble = () =>{\n        \n            \n            if (playerHand.length !== 2) {\n                setGameMessage(\"Doubling down is not allowed at this time.\");\n                return;\n            }\n            \n            // Check if the player has enough chips to double the bet\n            if (playerChips >= bet && !gamePause) {\n                console.log(\"calling doublesPlayed within handleDouble\");\n                doublesPlayed();\n                setStandPressed(true);\n                setPlayerChips((prevChips) => prevChips - bet); // Deduct the additional bet amount from player's chips\n                setBet((prevBet) => prevBet * 2); // Double the bet\n                \n                // Draw one additional card for the player and add it to their hand\n                    setTimeout(() => {\n                        const newCard = { ...deck.drawCard(), isFaceDown: true };\n                        const updatedPlayerHand = [...playerHand, newCard];\n                        setPlayerHand(updatedPlayerHand);\n                        //delay displaying last card with face up by 0.5 seconds\n                        setTimeout(()=>{\n                            const newHand = [...updatedPlayerHand];\n                            newHand[newHand.length - 1].isFaceDown = false; \n                            setPlayerHand(newHand);\n\n                            const newPlayerHandValue = calculateHandValue(newHand);\n                            \n                            setPlayerHandValue(newPlayerHandValue);\n                            // Check if the player is bust after doubling down\n                            setTimeout(()=>{\n                                if (newPlayerHandValue > 21) {\n                                const updatedDealerHand = dealerHand.map((card, index) => ({\n                                    ...card,\n                                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                                }));\n                                setDealerHand(updatedDealerHand);\n                                setGameOutcome(\"DealerWins Bust\");\n                            } else {\n                                handleStand(newPlayerHandValue);\n                            } \n                            },500);\n                        },500);\n                    }, 500);}\n                    else {\n                        // Not enough chips or game is paused\n                        setGameMessage(\"Not enough chips to double down.\");\n                    }\n\n    };\n\n    const handleHit = (hand = null) =>{\n        let outcome1;\n        let outcome2;\n        if(splitPressed){\n            if(hand1TurnFinished && hand2TurnFinished){\n                let newOutcome =\"DealerWins\";\n            \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n                setGameOutcome(newOutcome);\n                setGameMessage(\"Bust... Dealer Wins!\");\n                playerBusts();\n                let result = \"Dealer Wins\";\n                setResult(result);\n                \n                endGame();\n            }else{\n                if(hand===\"hand1\"){\n                    if(hand1TurnFinished){\n                        return;\n                    }else{\n                        if(playerHand1Value ===21){\n                            setHand1TurnFinished(true);\n                            return;\n                        }else\n                        if(deck.cards.length > 0){\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand1 = [...playerHand1, newCard];\n            \n                            setPlayerHand1(updatedPlayerHand1);\n            \n                            setTimeout(() => {\n                                const newHand = [...updatedPlayerHand1];\n                                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                setPlayerHand1(newHand);\n                            },500);\n                            const playerHand1Value = calculateHandValue(updatedPlayerHand1);\n                        \n                            setPlayerHand1Value(playerHand1Value);\n                            if(playerHand1Value > 21){\n                                outcome1 = \"DealerWins Bust\";\n                                setHand1TurnFinished(true);\n                                setGameOutcome1(outcome1);\n                                return;\n                            }\n                        }\n                    }\n                    \n                }else if(hand===\"hand2\"){\n                    if(hand2TurnFinished){\n                        return;\n                    }else{\n                        if(playerHand2Value ===21){\n                            setHand1TurnFinished(true);\n                            return;\n                        }else\n                        if(deck.cards.length > 0){\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand2 = [...playerHand2, newCard];\n            \n                            setPlayerHand2(updatedPlayerHand2);\n            \n                            setTimeout(() => {\n                                const newHand = [...updatedPlayerHand2];\n                                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                setPlayerHand2(newHand);\n                            },500);\n                            const playerHand2Value = calculateHandValue(updatedPlayerHand2);\n                        \n                            setPlayerHand2Value(playerHand2Value);\n                            if(playerHand2Value > 21){\n                                outcome2 = \"DealerWins Bust\";\n                                setHand2TurnFinished(true);\n                                setGameOutcome1(outcome2);\n                                return;\n                            }\n                        }\n                    }\n                    \n                }    \n            }\n            \n        }else{\n            setHitPressed(true);\n            if(deck.cards.length > 0){\n            const newCard = { ...deck.drawCard(), isFaceDown: true };\n            const updatedPlayerHand = [...playerHand, newCard];\n\n            setPlayerHand(updatedPlayerHand);\n\n            setTimeout(() => {\n                const newHand = [...updatedPlayerHand];\n                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                setPlayerHand(newHand);\n            },500);\n\n            const playerHandValue = calculateHandValue(updatedPlayerHand);\n            \n            setPlayerHandValue(playerHandValue);\n            let newOutcome;\n\n            if(playerHandValue>21){\n                setStandPressed(true);\n                newOutcome =\"DealerWins Bust\";\n                \n                setGameOutcome(newOutcome);\n            \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n            }else if(playerHandValue ===21){\n        \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                //Recalculate dealerHand value and display it by using setTmeout\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n    \n                const drawCardforDealer = () => {\n                    if (updatedDealerHandValue < 17 && deck){\n                            const newCard = deck.drawCard();\n                            updatedDealerHand = [...updatedDealerHand,newCard];\n                            updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n    \n                            if(updatedDealerHandValue < 17){\n                                drawCardforDealer();\n                            }\n                        }\n                }\n    \n                drawCardforDealer();\n                setDealerHand(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n    \n                if(updatedDealerHandValue>playerHandValue && updatedDealerHandValue<=21){\n                    newOutcome=\"DealerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                \n                }else if(updatedDealerHandValue===playerHandValue){\n\n                    newOutcome=\"Push\";\n                    \n                    setGameOutcome(newOutcome);\n\n\n        \n                }else if(updatedDealerHandValue >21){\n                    newOutcome=\"PlayerWins\";\n                    \n                    setGameOutcome(newOutcome);\n\n                }\n                else{\n                    newOutcome=\"PlayerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                }\n                setGameRunning(false);\n            }\n        }\n        }\n        \n    }\n\n    const getCardValue = (rank) =>{\n        const cardsValue = {\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9,\n            'ten': 10,\n            'jack': 10,\n            'queen': 10,\n            'king': 10,\n            'ace': 11,\n        }\n        return cardsValue[rank] || 0;\n    }\n\n    const calculateHandValue = (hand) => {\n        let total = 0;\n        let aceCount = 0;\n\n        hand.forEach(card => {\n            let value = getCardValue(card.rank);\n            if (card.rank === 'ace') {\n                aceCount++;\n            }\n            total += value;\n        })\n\n        while (total > 21 && aceCount > 0) {\n            total -= 10;\n            aceCount -= 1;\n        }\n\n        return total;\n    }\n\n    \n\n  \n    useEffect(() => {\n        const newPlayerHandText = convertHandToText(playerHand);\n        setPlayerHandText(newPlayerHandText);\n      }, [playerHand]);\n      \n    useEffect(() => {\n    const newDealerHandText = convertHandToText(dealerHand);\n    setDealerHandText(newDealerHandText);\n    }, [dealerHand]);\n\n    useEffect(()=>{\n        \n    },[previousBet]);\n\n    useEffect(()=>{\n        if(gameResultsCount.totalGamesPlayed){\n            const newWidth = (gamesCount)/20*100;\n            setProgressBarWidth(newWidth);\n            \n            if(newWidth===100){\n                setPlayerChips(chips=>chips+100);\n                setGameMessage(\"Next Level! You get $100 extra chips!!!\");\n                \n                const timeoutId = setTimeout(() => {\n                    setGamesCount(1);\n                    setProgressBarWidth(5); \n                }, 5000);\n\n                return () => clearTimeout(timeoutId);\n            }\n            ;\n        }\n    },[gameResultsCount.totalGamesPlayed]);\n\n    // useEffect(() => {\n    //     if (playerHand.length > 0) {\n    //         const newPlayerHandValue = calculateHandValue(playerHand);\n    //         setPlayerHandValue(newPlayerHandValue);\n    \n    //         // Move the logic to determine if the game should proceed to handleStand or another function here\n    //         if (newPlayerHandValue > 21) {\n    //             setGameOutcome(\"DealerWins Bust\");\n    //             // Additional logic for dealer's turn can go here\n    //         } else {\n    //             return;\n    //         }\n    //     }\n    // }, [playerHand]); // Only re-run the effect if playerHand changes\n    \n    useEffect(() => {\n        if(playerHand.length>0){\n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n        }\n        if(dealerHand.length>0){\n            const dealerHandValue = calculateHandValue(dealerHand);\n            setDealerHandValue(dealerHandValue);\n        }\n \n    }, [playerHand,dealerHand]);\n\n    useEffect(() => {\n        if (gameOutcome || gameOutcome1 || gameOutcome2) {\n            handleGameResult();\n        }\n        }, [gameOutcome, gameOutcome1, gameOutcome2]);\n\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        if (bet > 0) {\n            setGameMessage(`$${bet}`);\n        }\n    }, [bet]);\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(endGameTimeout.current);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n    }, [bet, playerChips]);\n\n    useEffect(()=>{\n        if (hand1TurnFinished && hand2TurnFinished) {\n            \n            // Now you can safely perform actions that depend on both hands being finished.\n            setStandPressed(true);\n            handleStand();\n            // Any additional logic that needs to run after both hands are finished can go here.\n        }\n    },[hand1TurnFinished,hand2TurnFinished])\n\n    useEffect(() => {\n        setMessages(twoHandsPosibilities());\n    }, []);\n\n\n    return (\n        <>\n        {handleSettings && <div className='odds-main-box' onClick={()=>callSettings()}>\n                <div className=\"message-box-settings\">\n                    <button onClick={\n                        (e) => {e.stopPropagation(); \n                        setShowMessages(!showMessages);\n                        }}>Show Combos\n                    </button>\n                    {/* {showMessages && (\n                        <div className='message-box-settings'>\n                            {messages.map((message, index) => (\n                                <p className=\"combo-text\" key={index}>{message}</p>\n                            ))}\n                        </div>\n                    )} */}\n\n                </div>\n            </div>}\n        \n        <GameHistory\n            gameResultsCount={gameResultsCount}\n            gameRoundsHistory={gameRoundsHistory}\n        />\n        <div id=\"container\">\n        <Header\n            playerHandValue={playerHandValue}\n            dealerHandValue={dealerHandValue}\n            playerChips={playerChips}\n            progressBarWidth={progressBarWidth}\n            result={result}\n            callSettings={callSettings}\n            />\n            \n\n            <div className=\"game-area\">\n                <div id='score-bubble'>\n                    <div id=\"dealer-score-bubble\" \n                        style={\n                        {visibility: showScores ? 'visible' : 'hidden'}}>\n                        {dealerHand[1] && dealerHand[1].isFaceDown ? dealerFirstCardValue : dealerHandValue}\n                    </div>\n                </div>\n                \n                <div id=\"dealer-message-box\">\n                    <div id=\"dealerhand-fixedbox\">\n                        <Player hand={dealerHand} isDealer={true} />\n                    </div>\n\n                    <div className=\"message-container\">\n                        <div id=\"message-box\">{gameMessage}</div>\n                    </div>\n                </div>\n                \n\n                {\n                twoHands ? (\n                    <div id=\"player-2hands-box\">\n                        \n                        <div id=\"player-hand1\">\n                            \n                            <Player hand={playerHand1} isDealer={false} />\n                            \n                            <div id='score-bubble'>\n                                <div id=\"player1-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                    {playerHand1Value}\n                                </div>\n                            </div>\n                            <div id=\"split-buttons-box\">\n                                <img    \n                                        src={btnStand} \n                                        className={`split-btn-stand ${(standPressed || hand1TurnFinished) ? 'disabled' : ''}`}\n                                        alt='stand-button' \n                                        title=\"Stand\"\n                                        onClick={(!standPressed && !hand1TurnFinished)? ()=>handleStand(playerHand1Value,\"hand1\") : undefined}\n                                        style={{cursor: (standPressed || hand1TurnFinished)?'not-allowed':'pointer'}}\n                                    \n                                />\n                                \n                                <img    \n                                        src={btnHit} \n                                        className={`split-btn-hit ${(standPressed || hand1TurnFinished) ? 'disabled': ''}`}\n                                        alt='hit-button' \n                                        title=\"Hit\"\n                                        onClick={(!standPressed && !hand1TurnFinished) ? ()=>handleHit(\"hand1\") : undefined}\n                                        style={{cursor:((standPressed || hand1TurnFinished)) ? 'not-allowed':'pointer'}}\n                            \n                                />\n                            \n                            </div>\n                        </div>\n\n                        <div id=\"player-hand2\">\n                            \n                            <Player hand={playerHand2} isDealer={false} /> \n\n                            <div id='score-bubble'>\n                                <div id=\"player2-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>\n                                    {playerHand2Value}\n                                </div>\n                            </div>\n                            <div \n                                id=\"split-buttons-box\" >\n\n                                <img    \n                                        src={btnStand} \n                                        className={`split-btn-stand ${(standPressed || hand2TurnFinished)? 'disabled' : ''}`}\n                                        alt='stand-button' \n                                        title=\"Stand\"\n                                        onClick={(!standPressed && !hand2TurnFinished) ? ()=>handleStand(playerHand2Value,\"hand2\") : undefined}\n                                        style={{cursor: (standPressed || hand2TurnFinished)?'not-allowed':'pointer'}}\n\n                                />\n                            \n                                \n                                <img    \n                                        src={btnHit} \n                                        className={`split-btn-hit ${(standPressed || hand2TurnFinished) ? 'disabled': ''}`}\n                                        alt='hit-button' \n                                        title=\"Hit\"\n                                        onClick={(!standPressed && !hand2TurnFinished)? ()=>handleHit(\"hand2\") : undefined}\n                                        style={{cursor:(standPressed || hand1TurnFinished) ? 'not-allowed':'pointer'}}\n                            \n                                />\n                            \n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div id=\"player-hand-box\">\n                            \n                            <Player hand={playerHand} isDealer={false} />\n                            \n                            <div id='score-bubble'>\n                                <div id=\"player-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                    {playerHandValue}\n                                </div>\n                            </div>\n                        \n                    </div>\n                )}\n            </div>\n            \n            <div id='bet-main-container'>\n                    <div id='bet-container-box'\n                        style={{\n                        visibility: !gameRunning ? 'visible' : 'hidden', \n                        display: 'flex', \n                        gap: '8px', \n                        justifyContent: 'center',\n                        position:'relative',\n                        }}\n                    \n                        >\n                        \n                    \n                        {Object.entries(betChips).map(([chipType, { imgSrc, count, position }], index) => (\n                            Array.from({ length: count }).map((_, chipIndex) => (\n                                <img \n                                    key={`${chipType}-${chipIndex}`}\n                                    src={imgSrc}\n                                    alt={`Chip of ${chipType.replace('chip', '')} value`} \n                                    className='bet-chip-img'\n                                    style={{ \n                                        position: 'absolute', \n                                        // transform:'translateY(15px)',\n                                        bottom: position + chipIndex * 5 -25,\n                                        left: `calc(50% + ${index * (chipWidth + gap) - totalWidth / 2}px)`\n                                    }} \n                                />\n                            ))\n                        ))}    \n                    </div>\n            </div>\n\n\n            <Controls\n            handleHit={handleHit}\n            handleStand={handleStand}\n            handleDouble={handleDouble}\n            onNewGame={handleNewGame}\n            gameRunning={gameRunning}\n            onBetPlaced={onBetPlaced}\n            bet={bet}\n            buttonsHidden={buttonsHidden}\n            handleChipClick={handleChipClick}\n            standPressed={standPressed}\n            splitAvailable={splitAvailable}\n            handleSplit={handleSplit}\n            hitPressed={hitPressed}\n            twoHands={twoHands}\n            setPreviousBet={setPreviousBet}\n            clearBet={clearBet}\n            previousBet={previousBet}\n            setBet={setBet}\n            setBetChips={setBetChips}\n            playerChips={playerChips}\n            />\n        </div>\n        <GameRecap\n            gameResultsCount={gameResultsCount}\n        />\n       </>\n    );\n};\nexport default GameBoard;","import React,{useEffect,useState} from 'react';\nimport './blackjack.css';\nimport GameBoard from './GameBoard';\nimport LoadingOverlay from './LoadingOverlay'\n\n\nconst BlackJack = () => {\n    const [isLoading,setIsLoading] = useState(true);\n    // const [isFlipped, setIsFlipped] = useState(false);\n    const [opacity, setOpacity] = useState(1);\n    // const [zIndex, setZIndex] = useState(-1);\n    const [isGameActive, setIsGameActive] = useState(false);\n\n    const handleGameRunningChange = (isRunning) => {\n      setIsGameActive(isRunning); // Use the renamed state setter\n  };\n  \n\n    // const toggleFlip = () => {\n    //     if (!isGameActive) { // Use the renamed state variable\n    //         setIsFlipped(!isFlipped);\n    //         setTimeout(() => {\n    //             setOpacity(opacity === 0.45 ? 1 : 0.45);\n    //             setZIndex(zIndex === -1 ? 1 : -1);\n    //         }, 300);\n    //     }\n    // };\n    useEffect(() => {\n        // Start the fade-out effect slightly before hiding the overlay\n        const fadeOutTimer = setTimeout(() => {\n          // Assuming you have a method to change the overlay's opacity\n          // This could be directly via CSS classes or inline styles\n          setOpacity(0); // This assumes your LoadingOverlay responds to opacity changes\n        }, 4000); // Start fade out slightly before removing the overlay\n      \n        const removeOverlayTimer = setTimeout(() => {\n            setIsLoading(false);\n          }, 5000); // 4 seconds + 1 second of fade-out\n      \n        return () => {\n            clearTimeout(fadeOutTimer);\n            clearTimeout(removeOverlayTimer); \n        };\n      }, []);\n\n    return (\n        <>\n        \n            {/* <div id=\"container\" className={isFlipped ? 'flipped' : ''} onClick={toggleFlip} style={{'--bg-opacity': opacity, '--z-index': zIndex}}> */}\n            <div id=\"bj-main-container\">\n                \n                {/* <LoadingOverlay isVisible={isLoading} style={{ opacity: opacity }}  />\n                <GameBoard onGameRunningChange={handleGameRunningChange} /> */}\n                <GameBoard/>\n            </div>\n            \n        </>\n    );\n};\n\nexport default BlackJack;\n","import { initializeApp } from \"firebase/app\";\nimport { getFirestore } from '@firebase/firestore'\nimport { getAnalytics } from \"firebase/analytics\";\nimport {getStorage} from \"firebase/storage\"\nimport {getAuth} from 'firebase/auth'\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC5HAywpfQ6XI6GAcXZpZuB-Nw_75prY_o\",\n    authDomain: \"dmpage-72e3e.firebaseapp.com\",\n    projectId: \"dmpage-72e3e\",\n    storageBucket: \"dmpage-72e3e.appspot.com\",\n    messagingSenderId: \"200086784221\",\n    appId: \"1:200086784221:web:429feb8639d04330967334\",\n    measurementId: \"G-5G4SD327J0\"\n  };\n\n  const app = initializeApp(firebaseConfig);\n  const analytics = getAnalytics(app);\n\n  export const auth = getAuth(app)\n  export const db = getFirestore(app);\n  export const storage = getStorage(app)\n  ","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { signInWithEmailAndPassword, signOut } from \"firebase/auth\";\nimport { auth } from \"./CoralFirebase-config\";\n\nconst CoralHeader = ({ user, onToggleDarkMode }) => {\n  const [loginEmail, setLoginEmail] = useState(\"\");\n  const [loginPassword, setLoginPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleLogin = async () => {\n    setLoading(true);\n    setError(\"\");\n    try {\n      await signInWithEmailAndPassword(auth, loginEmail, loginPassword);\n      navigate(\"/corals/homepage\");\n    } catch (error) {\n      setError(\"Login error: \" + error.message);\n      setLoading(false);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await signOut(auth);\n      navigate(\"/corals/index\");\n    } catch (error) {\n      setError(\"Sign out error: \" + error.message);\n    }\n  };\n\n  return (\n    <div className=\"header\">\n      {user ? (\n        <>\n          <button className=\"page-btn-upload\" onClick={handleLogout}>Logout</button>\n          <span>{user.email}</span>\n        </>\n      ) : (\n        <>\n          <label>\n            Email:\n            <input\n              type=\"email\"\n              value={loginEmail}\n              onChange={(e) => setLoginEmail(e.target.value)}\n              placeholder=\"Email\"\n              aria-label=\"Email\"\n            />\n          </label>\n          <label>\n            Password:\n            <input\n              type=\"password\"\n              value={loginPassword}\n              onChange={(e) => setLoginPassword(e.target.value)}\n              placeholder=\"Password\"\n              aria-label=\"Password\"\n            />\n          </label>\n          <button className=\"page-btn\" onClick={handleLogin} disabled={loading}>\n            {loading ? \"Logging in...\" : \"Login\"}\n          </button>\n          <button className=\"page-btn\" onClick={() => navigate(\"/corals/signup\")}>Sign Up</button>\n        </>\n      )}\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n    </div>\n  );\n};\nexport default CoralHeader;\n","import React from \"react\";\n\nconst CoralFooter = ({ isLoginPage, darkMode }) => {\n  const footerClass = isLoginPage ? \"footer-login\" : \"footer\";\n  return <div className={footerClass}>{/* Footer content */}</div>;\n};\n\nexport default CoralFooter;\n","import React from \"react\";\n\nconst CoralIndex = () => {\n  return <div>Log in...</div>;\n};\n\nexport default CoralIndex;\n","import React, { useState, useEffect } from \"react\";\nimport { storage } from \"./CoralFirebase-config\"; // Adjust this import according to your Firebase configuration file\nimport { ref, list, getDownloadURL } from \"firebase/storage\";\nimport \"./corals_page.css\";\n\nconst ImageScroll = () => {\n  const [visibleImages, setVisibleImages] = useState([]);\n  const [selectedImage, setSelectedImage] = useState(null); // Initially no image is selected\n\n  useEffect(() => {\n    // Function to load more images\n    const loadMoreImages = async () => {\n      const acroporaRef = ref(storage, \"Acropora\");\n      try {\n        const result = await list(acroporaRef, {\n          maxResults: 7,\n        });\n        const urls = await Promise.all(\n          result.items.map((itemRef) => getDownloadURL(itemRef))\n        );\n        setVisibleImages((prevImages) => [...prevImages, ...urls]);\n      } catch (error) {\n        console.error(\"Error fetching images:\", error);\n      }\n    };\n\n    loadMoreImages();\n  }, []);\n\n  const openModal = (imageUrl) => {\n    console.log(\"Attempting to open modal with image URL:\", imageUrl); // Debug log\n    setSelectedImage(imageUrl);\n  };\n\n  const closeModal = (e) => {\n    e.stopPropagation(); // Prevent the click from bubbling up to the modal container\n    setSelectedImage(null);\n  };\n\n  useEffect(() => {\n    console.log(\"Selected image updated to:\", selectedImage); // Debug to check if the image is set\n  }, [selectedImage]);\n\n  return (\n    <>\n      <div className=\"coral-imagescroll-container\">\n        <div\n          className=\"box-scroll-images\"\n          style={{ overflowX: \"auto\", whiteSpace: \"nowrap\" }}\n        >\n          {visibleImages.map((imageUrl, index) => (\n            <div key={index} className=\"scroll-image-container\">\n              <img\n                src={imageUrl}\n                alt={`image_${index}`}\n                style={{\n                  width: \"150px\",\n                  height: \"auto\",\n                  display: \"inline-block\",\n                  marginRight: \"10px\",\n                }}\n                onClick={() => openModal(imageUrl)}\n              />\n            </div>\n          ))}\n        </div>\n        {selectedImage && (\n          <div className=\"modal-box\" onClick={closeModal}>\n            <div className=\"modal-content\">\n              <img className=\"modal-img\" src={selectedImage} alt=\"Modal\" />\n              <button className=\"modal-button\" onClick={closeModal}>\n                Close\n              </button>\n            </div>\n          </div>\n        )}\n       \n      </div>\n    </>\n  );\n};\n\nexport default ImageScroll;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, auth } from \"./CoralFirebase-config\";\nimport { ref, uploadBytes, listAll, getDownloadURL } from \"firebase/storage\";\nimport { v4 } from \"uuid\";\nimport { useNavigate } from \"react-router-dom\";\nimport imagepath1 from \"../assets/images/Acro.jpeg\";\nimport imagepath2 from \"../assets/images/Chalice.jpeg\";\nimport imagepath3 from \"../assets/images/Monti.jpeg\";\nimport imagepath4 from \"../assets/images/Favia.jpeg\";\nimport imagepath5 from \"../assets/images/Mushroom.jpeg\";\nimport imagepath6 from \"../assets/images/Scoly.jpeg\";\nimport imagepath7 from \"../assets/images/Zoas.jpeg\";\nimport imagepath8 from \"../assets/images/FishTank.jpeg\";\nimport imagepath9 from \"../assets/images/NPSCoral.jpeg\";\nimport imagepath10 from \"../assets/images/AquascapeIdeas.jpeg\";\nimport ImageScroll from \"./CoralImageScroll\";\n\nconst CoralHomepage = ({ darkMode }) => {\n  const images = [\n    { src: imagepath1, label: \"acro\", route: \"acro\" },\n    { src: imagepath2, label: \"chalice\", route: \"chalice\" },\n    { src: imagepath3, label: \"monti\", route: \"monti\" },\n    { src: imagepath4, label: \"favia\", route: \"favia\" },\n    { src: imagepath5, label: \"mushroom\", route: \"mushroom\" },\n    { src: imagepath6, label: \"scoly\", route: \"scoly\" },\n    { src: imagepath7, label: \"zoas\", route: \"zoas\" },\n    {\n      src: imagepath8,\n      label: \"fishtank\",\n      route: \"fishtank\",\n    },\n    { src: imagepath9, label:\"nps\", route: \"nps\" },\n    { src: imagepath10, label: \"aquascape\", route: \"aquascape\" },\n  ];\n  const pageClass = darkMode ? \"coral-main-page dark-mode\" : \"coral-main-page\";\n  const pageClass2 = darkMode\n    ? \"coral-homepage-images-list dark-mode\"\n    : \"coral-homepage-images-list\";\n\n  const navigate = useNavigate();\n\n  const handleImageClick = (route) => {\n    console.log(\"Attempting to navigate to:\", `/corals/${route}`);\n    navigate(`/corals/${route}`); // Adjust to navigate correctly\n  };\n\n  const [visibleImages, setVisibleImages] = useState([]);\n  const [nextPageToken, setNextPageToken] = useState(null);\n\n  useEffect(() => {\n    loadMoreImages();\n  }, []);\n\n  const loadMoreImages = async () => {\n    const acroporaRef = ref(storage, \"Acropora\"); // Adjust the path as per your Firebase Storage structure\n    try {\n      const result = await listAll(acroporaRef, {\n        maxResults: 5,\n        pageToken: nextPageToken,\n      });\n      const urlPromises = result.items.map((itemRef) =>\n        getDownloadURL(itemRef)\n      );\n      const urls = await Promise.all(urlPromises);\n      setVisibleImages((prevImages) => [...prevImages, ...urls]);\n      setNextPageToken(result.nextPageToken);\n    } catch (error) {\n      console.error(\"Error fetching images:\", error);\n    }\n  };\n  const handleScroll = (e) => {\n    const bottom =\n      e.target.scrollWidth - e.target.scrollLeft === e.target.clientWidth;\n    if (bottom && nextPageToken) {\n      loadMoreImages();\n    }\n  };\n\n  const [imageUpload, setImageUpload] = useState(null);\n  const [imageList, setImageList] = useState([]);\n\n  const imageListRef = ref(storage, \"images/\");\n\n  const uploadImage = () => {\n    if (imageUpload == null) return;\n\n    const imageRef = ref(storage, `images/${imageUpload.name + v4()}`);\n\n    uploadBytes(imageRef, imageUpload).then((snapshot) => {\n      getDownloadURL(snapshot.ref).then((url) => {\n        setImageList((prev) => [...prev, url]);\n      });\n    });\n  };\n\n  \n  useEffect(() => {\n    listAll(imageListRef).then((response) => {\n      const fetchURLs = response.items.map((item) => {\n        return getDownloadURL(item);\n      });\n      Promise.all(fetchURLs).then((urls) => {\n        setImageList(urls);\n      });\n    });\n  }, [imageListRef]);\n\n  return (\n    <>\n      <div className=\"coral-homepage-imagescroll-container\">\n        <ImageScroll />\n      </div>\n\n      <div className={pageClass}>\n        <div className={pageClass2}>\n          {images.map((image, index) => (\n            <div\n              key={index}\n              className=\"coral-homepage-image-container\"\n              onClick={() => handleImageClick(image.route)}\n            >\n              <img src={image.src} className=\"coral-homepage-img-grid\" />\n              <span className=\"coral-home-img-label\">{image.label}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default CoralHomepage;\n","import React, { useState, useEffect } from \"react\";\nimport { db } from \"./CoralFirebase-config\";\nimport {\n  collection,\n  getDocs,\n  addDoc,\n  doc,\n  deleteDoc,\n} from \"firebase/firestore\";\nimport { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\n\nconst CoralSignup = () => {\n  const auth = getAuth();\n  const [newFirstName, setNewFirstName] = useState(\"\");\n  const [newLastName, setNewLastName] = useState(\"\");\n  const [newUserEmail, setNewUserEmail] = useState(\"\");\n  const [newUserPassword, setNewUserPassword] = useState(\"\");\n  const [users, setUsers] = useState([]);\n  const [error, setError] = useState(\"\");\n\n  const usersCollectionRef = collection(db, \"users\");\n\n  const deleteUser = async (id) => {\n    const userDoc = doc(db, \"users\", id);\n    await deleteDoc(userDoc);\n  };\n  console.log(auth.currentUser);\n  const createUser = async () => {\n    if (!newUserEmail || !newUserPassword) {\n      setError(\"Email and password are required\");\n      return;\n    }\n    setError(\"\"); // Clear any existing errors\n    createUserWithEmailAndPassword(auth, newUserEmail, newUserPassword)\n      .then((userCredential) => {\n        const user = userCredential.user;\n        addDoc(usersCollectionRef, {\n          uid: user.uid,\n          firstName: newFirstName,\n          lastName: newLastName,\n          email: newUserEmail, // Store only non-sensitive data in Firestore\n        });\n      })\n      .catch((error) => {\n        setError(error.message);\n      });\n  };\n\n  useEffect(() => {\n    const getUsers = async () => {\n      const data = await getDocs(usersCollectionRef);\n      setUsers(data.docs.map((doc) => ({ ...doc.data(), id: doc.id })));\n    };\n    getUsers();\n  }, [usersCollectionRef]);\n\n  return (\n    <>\n      <div>Sign up</div>\n      <div>\n        <input\n          placeholder=\"First Name:\"\n          onChange={(event) => setNewFirstName(event.target.value)}\n        />\n        <input\n          placeholder=\"Last Name:\"\n          onChange={(event) => setNewLastName(event.target.value)}\n        />\n        <input\n          placeholder=\"Email:\"\n          onChange={(event) => setNewUserEmail(event.target.value)}\n        />\n        <input\n          placeholder=\"Password:\"\n          type=\"password\" // Hide password input\n          onChange={(event) => setNewUserPassword(event.target.value)}\n        />\n        <button onClick={createUser}>Create User</button>\n        {error && <p style={{ color: \"red\" }}>{error}</p>}\n      </div>\n      {users.map((user) => (\n        <div key={user.id}>\n          <h1>First Name: {user.firstName}</h1>\n          <h1>Last Name: {user.lastName}</h1>\n          <h1>Email: {user.email}</h1>\n          <button onClick={() => deleteUser(user.id)}>Delete User</button>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default CoralSignup;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from './CoralFirebase-config';\nimport { ref, listAll, getDownloadURL, uploadBytes, deleteObject } from 'firebase/storage';\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where, getDoc,writeBatch } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\n\n\nconst Chalice = () => {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageList, setImageList] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEdit, setModalEdit] = useState(false);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [selectedDescription, setSelectedDescription] = useState('');\n    const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n    const [selectedImageAquascapeType, setSelectedImageAquascapeType] = useState('')\n    const [descriptions, setDescriptions] = useState({});\n    const [currentUser, setCurrentUser] = useState(null); \n    const [imageDescription, setImageDescription] = useState('');\n    const [imageAquascapeType, setImageAquascapeType] = useState('');\n    const [fileInputValue, setFileInputValue] = useState(\"\");\n    const [currentImageId, setCurrentImageId] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const imagesPerPage = 12; // 12 images per page\n    const indexOfLastImage = currentPage * imagesPerPage;\n    const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n    const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n    const totalImages = imageList.length;\n    const totalPages = Math.ceil(totalImages / imagesPerPage);\n\n\n  // create new collection\n  \n\n\n    \n    const handleEdit = () => {\n        setModalEdit(true); // Open ModalEdit\n        setIsModalOpen(false); // Close ImageModal\n    };\n    const handleDismiss = () => {\n        setModalEdit(false); // Close ModalEdit\n        setIsModalOpen(true); // Reopen ImageModal\n    };\n\n    const handleImageClick = async (image) => {\n        try {\n            const docRef = doc(db, \"chalice\", image.id);\n            const docSnapshot = await getDoc(docRef);\n            if (docSnapshot.exists()) {\n                const imageData = docSnapshot.data();\n                console.log(\"Fetched data for image click:\", imageData);\n    \n                setSelectedImage(image.url);\n                setSelectedDescription(imageData.description);\n                setSelectedImageAquascapeType(imageData.aquascapeType);\n    \n                let lastEditedDate = '';\n                if (imageData.lastEdited && imageData.lastEdited.toDate instanceof Function) {\n                    lastEditedDate = imageData.lastEdited.toDate().toLocaleString();\n                }\n    \n                setSelectedLastEdited({\n                    editedBy: imageData.lastEditedBy,\n                    lastEdited: lastEditedDate\n                });\n    \n                setCurrentImageId(image.id);\n                setIsModalOpen(true);\n            } else {\n                console.log(\"No such document!\");\n            }\n        } catch (error) {\n            console.error(\"Error getting document:\", error);\n        }\n    };\n    \n    \n\n    const handleDescriptionInput = (event) => {\n        setImageDescription(event.target.value);\n    };\n    const handleAquascapeTypeInput = (event) => {\n        setImageAquascapeType(event.target.value)\n    }\n    \n    const uploadImage = async () => {\n        if (!imageUpload) return;\n    \n        const imageName = v4(); // Random file name\n        const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n        const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n\n        try {\n            \n            const snapshot = await uploadBytes(imageRef, imageUpload);\n            const url = await getDownloadURL(snapshot.ref);\n    \n            // Initialize fields when creating a new document\n            const newDocRef = await addDoc(collection(db, \"chalice\"), {\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType: imageAquascapeType,\n                lastEdited: new Date(), // Use current date\n                lastEditedBy: userEmail // Use current user or 'Unknown'\n            });\n           \n\n            setImageList(prevList => [{\n                id: newDocRef.id,\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType:imageAquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            }, ...prevList]);\n    // Reset the description input after upload\n   \n            setImageDescription('');\n            setImageAquascapeType('');\n            setFileInputValue(''); // Reset file input value\n        } catch (error) {\n            console.error(\"Error uploading image or creating Firestore document:\", error);\n        }\n    };\n    \n    const handleFileInputChange = (event) => {\n        setImageUpload(event.target.files[0]);\n        setFileInputValue(event.target.value); // Update the file input value state\n    };\n\n    const getDocumentIdFromImageName = async (imageName) => {\n        try {\n            const q = query(collection(db, \"chalice\"), where(\"imageName\", \"==\", imageName));\n            const querySnapshot = await getDocs(q);\n            console.log(`Documents found for image name '${imageName}':`, querySnapshot.docs.length);\n            querySnapshot.forEach(doc => console.log(doc.id, doc.data()));\n    \n            if (!querySnapshot.empty) {\n                return querySnapshot.docs[0].id;\n            } else {\n                console.log(\"No matching document found for image name:\", imageName);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Error fetching document ID:\", error);\n            return null;\n        }\n    };\n    \n\n    const deleteImage = async (imageId, imageName, isOrphan) => {\n        console.log(\"Attempting to delete image with Name:\", imageName);\n        // Ensure the image name does not contain 'Aquascape Ideas/' prefix\n        if (imageName.startsWith('Aquascape Ideas/')) {\n            imageName = imageName.replace('Aquascape Ideas/', '');\n        }\n    \n        \n    \n        const isConfirmed = window.confirm(\"Are you sure you want to delete this image?\");\n        if (isConfirmed) {\n        try {\n            const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n            await deleteObject(imageRef);\n    \n                if (!isOrphan) {\n                    const docRef = doc(db, \"chalice\", imageId);\n                    await deleteDoc(docRef);\n                }\n    \n                setImageList(imageList.filter(image => image.imageName !== imageName));\n                alert(\"Image deleted successfully.\");\n            } catch (error) {\n                console.error(\"Error deleting image:\", error);\n                alert(\"Failed to delete image: \" + error.message);\n            }\n        }\n    };\n    \n    const onSaveEdit = async (imageId, description, aquascapeType) => {\n        console.log(\"onSaveEdit params:\", { imageId, description, aquascapeType });\n\n\n        if (!imageId || description === undefined || aquascapeType === undefined) {\n            let missingData = '';\n            if (!imageId) missingData += 'Image ID ';\n            if (description === undefined) missingData += 'Description ';\n            if (aquascapeType === undefined) missingData += 'Aquascape Type ';\n            alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n            return;\n        }\n    \n        try {\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"chalice\", imageId);\n            await updateDoc(docRef, {\n                description: description,\n                aquascapeType: aquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            });\n    \n            alert(\"Changes saved successfully!\");\n    \n            // Update the image list state\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === imageId) {\n                    return { \n                        ...image, \n                        description: description, \n                        aquascapeType: aquascapeType,\n                        lastEditedBy: userEmail, \n                        lastEdited: new Date()\n                    };\n                }\n                return image;\n            }));\n            try {\n                const docRef = doc(db, \"chalice\", imageId);\n                const docSnapshot = await getDoc(docRef);\n                if (docSnapshot.exists()) {\n                    const imageData = docSnapshot.data();\n                    setSelectedDescription(imageData.description);\n                    setSelectedImageAquascapeType(imageData.aquascapeType);\n                    // Update last edited info if needed\n                } else {\n                    console.log(\"Document not found after update.\");\n                }\n            } catch (error) {\n                console.error(\"Error refetching the updated document:\", error);\n            }\n    \n            setIsModalOpen(true);\n            setModalEdit(false);\n    \n        } catch (error) {\n            console.error(\"Error saving changes: \", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n    \n    \n    const ImageModal = ({ url, description, imageAquascapeType, lastEdited, onClose, onEdit }) => {\n        if (!url) return null;\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <div className=\"coral-name-label\"><b>Aquascape Type:</b></div>\n                                    <div className=\"coral-name-value\">{imageAquascapeType}</div>\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={onEdit}>Edit</button>\n                                    <button onClick={onClose}>Close</button>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <p>{description}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    const ModalEdit = ({ url, description, imageAquascapeType, lastEdited, onClose, onSaveEdit, imageId }) => {\n        const [editableDescription, setEditableDescription] = useState(description);\n        const [editableAquascapeType, setEditableAquascapeType] = useState(imageAquascapeType);\n    \n        useEffect(() => {\n            setEditableDescription(description);\n            setEditableAquascapeType(imageAquascapeType);\n        }, [description, imageAquascapeType]);\n    \n        const handleSave = () => {\n            if (!editableDescription || !editableAquascapeType) {\n                alert(\"Please fill out all fields before saving.\");\n                return;\n            }\n            if (!currentImageId) {\n                alert(\"Error: Image ID is missing.\");\n                return;\n            }\n            onSaveEdit(currentImageId, editableDescription, editableAquascapeType);\n            onClose();\n        };\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <p><b>Aquascape Type:</b></p>\n                                    <input \n                                        type=\"text\" \n                                        value={editableAquascapeType} \n                                        onChange={(e) => setEditableAquascapeType(e.target.value)} \n                                        className=\"modal-edit-coral-name-input\"\n                                    />\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={handleSave}>Save</button>\n                                    <button onClick={onClose}>Dismiss</button> \n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <textarea \n                                        value={editableDescription} \n                                        onChange={(e) => setEditableDescription(e.target.value)}\n                                        className=\"modal-edit-description-input\"\n                                    ></textarea>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    \n\n    const fetchImages = async () => {\n        try {\n            const chaliceCollection = collection(db, \"chalice\");\n            const descriptionDocs = await getDocs(chaliceCollection);\n    \n            let images = [];\n            for (const doc of descriptionDocs.docs) {\n                const data = doc.data();\n                let lastEditedBy = data.lastEditedBy || auth.currentUser.displayName || 'Unknown';\n    \n                // Check if 'last edited by' field is missing and update the document\n                if (!data.lastEditedBy) {\n                    await updateDoc(doc.ref, { lastEditedBy });\n                }\n    \n                images.push({\n                    id: doc.id,\n                    ...data,\n                    description: data.description || '',\n                    lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n                    lastEditedBy // Use updated lastEditedBy\n                });\n            }\n    \n            // Sort images by last edited timestamp\n            images.sort((a, b) => b.lastEdited - a.lastEdited);\n    \n            setImageList(images);\n        } catch (error) {\n            console.error(\"Error fetching images:\", error);\n        }\n    };\n    \n    \n   \n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    useEffect(() => {\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in\n                setCurrentUser(user);\n            } else {\n                // User is signed out\n                setCurrentUser(null);\n            }\n        });\n    \n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n        console.log(\"Auth State Changed: \", user);\n        setCurrentUser(user);\n    });\n    return () => unsubscribe();\n}, []);\n\n\n\n    const handleDescriptionChange = (id, newDescription) => {\n        setDescriptions(prevDescriptions => ({\n            ...prevDescriptions,\n            [id]: newDescription\n        }));\n        // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n        setSelectedDescription(newDescription);\n    }\n    };\n    \n\n    const saveDescription = async (id) => {\n        const description = descriptions[id];\n        if (!id || !description) {\n            alert(\"Cannot save description: No document ID found or description is empty\");\n            return;\n        }\n    \n        try {\n            // Use the state for the current user's email, fallback to 'Unknown' if not available\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"chalice\", id);\n            await updateDoc(docRef, {\n                description,\n                lastEditedBy: userEmail, // Use email instead of displayName\n                lastEdited: new Date()\n            });\n            alert(\"Description saved!\");\n    \n            // Update the state to reflect the change\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === id) {\n                    return { ...image, description, lastEditedBy: userEmail, lastEdited: new Date() };\n                }\n                return image;\n            }));\n        } catch (error) {\n            alert(\"Failed to save description: \" + error.message);\n        }\n    };\n    \n    return (\n        <div className=\"page-main-box\">\n        <div className=\"page-inputbox\">\n          <div className=\"page-input-boxes\">\n \n        <input \n                type=\"text\" \n                id=\"AquascapeTypeInput\"  // Adding an id attribute\n                name=\"aquascapeType\"     // Adding a name attribute\n                className=\"coral-name-input\"\n                placeholder=\"Aquascape Type...\"\n                maxLength=\"30\"\n                value={imageAquascapeType}\n                onChange={handleAquascapeTypeInput}\n            />\n            <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n            </div>\n            <div className=\"page-input-box2\">\n            <input \n            type=\"file\" \n            id=\"imageUpload\"       // Existing id attribute\n            name=\"imageUpload\"  \n            className=\"file-box\"   // Adding a name attribute \n            value={fileInputValue}\n            onChange={handleFileInputChange}\n             />\n            <button className=\"page-btn-upload\" onClick={uploadImage}>Upload Image</button>\n            </div>\n            </div>\n\n            <div className=\"page-images-list\">\n            {currentImages.map((image, index) =>  (\n                    <div key={image.imageName} className=\"page-image-container\">\n                        <img src={image.url} className=\"page-img-grid\" onClick={() => handleImageClick(image)} />\n                        <button className=\"page-btn\" onClick={() => deleteImage(image.id, image.imageName)}>Delete</button>\n                        \n                    </div>\n                ))}\n            </div>\n\n            <div className=\"pagination\">\n                <button onClick={() => setCurrentPage(prev => prev > 1 ? prev - 1 : prev)}>Prev</button>\n                <span>Page {currentPage} of {totalPages}</span>\n                <button onClick={() => setCurrentPage(prev => prev < totalPages ? prev + 1 : prev)}>Next</button>\n            </div>\n\n            {isModalOpen && (\n                <ImageModal\n                url={selectedImage} \n                description={selectedDescription} \n                imageAquascapeType={selectedImageAquascapeType}\n                lastEdited={selectedLastEdited}\n                onClose={() => setIsModalOpen(false)}\n                onEdit={handleEdit}\n                imageId={currentImageId}\n            />\n            )}\n            {isModalEdit && (\n                <ModalEdit \n                    url={selectedImage} \n                    description={selectedDescription} \n                    imageAquascapeType={selectedImageAquascapeType}\n                    lastEdited={selectedLastEdited}\n                    onSaveEdit={onSaveEdit}\n                    onClose={handleDismiss}\n                />\n            )}\n            </div>\n    );\n};\n\nexport default Chalice;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from './CoralFirebase-config';\nimport { ref, listAll, getDownloadURL, uploadBytes, deleteObject } from 'firebase/storage';\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where, getDoc,writeBatch } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\n\n\nconst Monti = () => {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageList, setImageList] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEdit, setModalEdit] = useState(false);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [selectedDescription, setSelectedDescription] = useState('');\n    const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n    const [selectedImageAquascapeType, setSelectedImageAquascapeType] = useState('')\n    const [descriptions, setDescriptions] = useState({});\n    const [currentUser, setCurrentUser] = useState(null); \n    const [imageDescription, setImageDescription] = useState('');\n    const [imageAquascapeType, setImageAquascapeType] = useState('');\n    const [fileInputValue, setFileInputValue] = useState(\"\");\n    const [currentImageId, setCurrentImageId] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const imagesPerPage = 12; // 12 images per page\n    const indexOfLastImage = currentPage * imagesPerPage;\n    const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n    const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n    const totalImages = imageList.length;\n    const totalPages = Math.ceil(totalImages / imagesPerPage);\n\n\n  // create new collection\n \n\n\n    \n    const handleEdit = () => {\n        setModalEdit(true); // Open ModalEdit\n        setIsModalOpen(false); // Close ImageModal\n    };\n    const handleDismiss = () => {\n        setModalEdit(false); // Close ModalEdit\n        setIsModalOpen(true); // Reopen ImageModal\n    };\n\n    const handleImageClick = async (image) => {\n        try {\n            const docRef = doc(db, \"montipora\", image.id);\n            const docSnapshot = await getDoc(docRef);\n            if (docSnapshot.exists()) {\n                const imageData = docSnapshot.data();\n                console.log(\"Fetched data for image click:\", imageData);\n    \n                setSelectedImage(image.url);\n                setSelectedDescription(imageData.description);\n                setSelectedImageAquascapeType(imageData.aquascapeType);\n    \n                let lastEditedDate = '';\n                if (imageData.lastEdited && imageData.lastEdited.toDate instanceof Function) {\n                    lastEditedDate = imageData.lastEdited.toDate().toLocaleString();\n                }\n    \n                setSelectedLastEdited({\n                    editedBy: imageData.lastEditedBy,\n                    lastEdited: lastEditedDate\n                });\n    \n                setCurrentImageId(image.id);\n                setIsModalOpen(true);\n            } else {\n                console.log(\"No such document!\");\n            }\n        } catch (error) {\n            console.error(\"Error getting document:\", error);\n        }\n    };\n    \n    \n\n    const handleDescriptionInput = (event) => {\n        setImageDescription(event.target.value);\n    };\n    const handleAquascapeTypeInput = (event) => {\n        setImageAquascapeType(event.target.value)\n    }\n    \n    const uploadImage = async () => {\n        if (!imageUpload) return;\n    \n        const imageName = v4(); // Random file name\n        const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n        const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n\n        try {\n            \n            const snapshot = await uploadBytes(imageRef, imageUpload);\n            const url = await getDownloadURL(snapshot.ref);\n    \n            // Initialize fields when creating a new document\n            const newDocRef = await addDoc(collection(db, \"montipora\"), {\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType: imageAquascapeType,\n                lastEdited: new Date(), // Use current date\n                lastEditedBy: userEmail // Use current user or 'Unknown'\n            });\n           \n\n            setImageList(prevList => [{\n                id: newDocRef.id,\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType:imageAquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            }, ...prevList]);\n    // Reset the description input after upload\n   \n            setImageDescription('');\n            setImageAquascapeType('');\n            setFileInputValue(''); // Reset file input value\n        } catch (error) {\n            console.error(\"Error uploading image or creating Firestore document:\", error);\n        }\n    };\n    \n    const handleFileInputChange = (event) => {\n        setImageUpload(event.target.files[0]);\n        setFileInputValue(event.target.value); // Update the file input value state\n    };\n\n    const getDocumentIdFromImageName = async (imageName) => {\n        try {\n            const q = query(collection(db, \"montipora\"), where(\"imageName\", \"==\", imageName));\n            const querySnapshot = await getDocs(q);\n            console.log(`Documents found for image name '${imageName}':`, querySnapshot.docs.length);\n            querySnapshot.forEach(doc => console.log(doc.id, doc.data()));\n    \n            if (!querySnapshot.empty) {\n                return querySnapshot.docs[0].id;\n            } else {\n                console.log(\"No matching document found for image name:\", imageName);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Error fetching document ID:\", error);\n            return null;\n        }\n    };\n    \n\n    const deleteImage = async (imageId, imageName, isOrphan) => {\n        console.log(\"Attempting to delete image with Name:\", imageName);\n        // Ensure the image name does not contain 'Aquascape Ideas/' prefix\n        if (imageName.startsWith('Aquascape Ideas/')) {\n            imageName = imageName.replace('Aquascape Ideas/', '');\n        }\n    \n        \n    \n        const isConfirmed = window.confirm(\"Are you sure you want to delete this image?\");\n        if (isConfirmed) {\n        try {\n            const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n            await deleteObject(imageRef);\n    \n                if (!isOrphan) {\n                    const docRef = doc(db, \"montipora\", imageId);\n                    await deleteDoc(docRef);\n                }\n    \n                setImageList(imageList.filter(image => image.imageName !== imageName));\n                alert(\"Image deleted successfully.\");\n            } catch (error) {\n                console.error(\"Error deleting image:\", error);\n                alert(\"Failed to delete image: \" + error.message);\n            }\n        }\n    };\n    \n    const onSaveEdit = async (imageId, description, aquascapeType) => {\n        console.log(\"onSaveEdit params:\", { imageId, description, aquascapeType });\n\n\n        if (!imageId || description === undefined || aquascapeType === undefined) {\n            let missingData = '';\n            if (!imageId) missingData += 'Image ID ';\n            if (description === undefined) missingData += 'Description ';\n            if (aquascapeType === undefined) missingData += 'Aquascape Type ';\n            alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n            return;\n        }\n    \n        try {\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"montipora\", imageId);\n            await updateDoc(docRef, {\n                description: description,\n                aquascapeType: aquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            });\n    \n            alert(\"Changes saved successfully!\");\n    \n            // Update the image list state\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === imageId) {\n                    return { \n                        ...image, \n                        description: description, \n                        aquascapeType: aquascapeType,\n                        lastEditedBy: userEmail, \n                        lastEdited: new Date()\n                    };\n                }\n                return image;\n            }));\n            try {\n                const docRef = doc(db, \"montipora\", imageId);\n                const docSnapshot = await getDoc(docRef);\n                if (docSnapshot.exists()) {\n                    const imageData = docSnapshot.data();\n                    setSelectedDescription(imageData.description);\n                    setSelectedImageAquascapeType(imageData.aquascapeType);\n                    // Update last edited info if needed\n                } else {\n                    console.log(\"Document not found after update.\");\n                }\n            } catch (error) {\n                console.error(\"Error refetching the updated document:\", error);\n            }\n    \n            setIsModalOpen(true);\n            setModalEdit(false);\n    \n        } catch (error) {\n            console.error(\"Error saving changes: \", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n    \n    \n    const ImageModal = ({ url, description, imageAquascapeType, lastEdited, onClose, onEdit }) => {\n        if (!url) return null;\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <div className=\"coral-name-label\"><b>Aquascape Type:</b></div>\n                                    <div className=\"coral-name-value\">{imageAquascapeType}</div>\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={onEdit}>Edit</button>\n                                    <button onClick={onClose}>Close</button>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <p>{description}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    const ModalEdit = ({ url, description, imageAquascapeType, lastEdited, onClose, onSaveEdit, imageId }) => {\n        const [editableDescription, setEditableDescription] = useState(description);\n        const [editableAquascapeType, setEditableAquascapeType] = useState(imageAquascapeType);\n    \n        useEffect(() => {\n            setEditableDescription(description);\n            setEditableAquascapeType(imageAquascapeType);\n        }, [description, imageAquascapeType]);\n    \n        const handleSave = () => {\n            if (!editableDescription || !editableAquascapeType) {\n                alert(\"Please fill out all fields before saving.\");\n                return;\n            }\n            if (!currentImageId) {\n                alert(\"Error: Image ID is missing.\");\n                return;\n            }\n            onSaveEdit(currentImageId, editableDescription, editableAquascapeType);\n            onClose();\n        };\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <p><b>Aquascape Type:</b></p>\n                                    <input \n                                        type=\"text\" \n                                        value={editableAquascapeType} \n                                        onChange={(e) => setEditableAquascapeType(e.target.value)} \n                                        className=\"modal-edit-coral-name-input\"\n                                    />\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={handleSave}>Save</button>\n                                    <button onClick={onClose}>Dismiss</button> \n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <textarea \n                                        value={editableDescription} \n                                        onChange={(e) => setEditableDescription(e.target.value)}\n                                        className=\"modal-edit-description-input\"\n                                    ></textarea>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    \n\n    const fetchImages = async () => {\n        try {\n            const montiporaCollection = collection(db, \"montipora\");\n            const descriptionDocs = await getDocs(montiporaCollection);\n    \n            let images = [];\n            for (const doc of descriptionDocs.docs) {\n                const data = doc.data();\n                let lastEditedBy = data.lastEditedBy || auth.currentUser.displayName || 'Unknown';\n    \n                // Check if 'last edited by' field is missing and update the document\n                if (!data.lastEditedBy) {\n                    await updateDoc(doc.ref, { lastEditedBy });\n                }\n    \n                images.push({\n                    id: doc.id,\n                    ...data,\n                    description: data.description || '',\n                    lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n                    lastEditedBy // Use updated lastEditedBy\n                });\n            }\n    \n            // Sort images by last edited timestamp\n            images.sort((a, b) => b.lastEdited - a.lastEdited);\n    \n            setImageList(images);\n        } catch (error) {\n            console.error(\"Error fetching images:\", error);\n        }\n    };\n    \n    \n   \n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    useEffect(() => {\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in\n                setCurrentUser(user);\n            } else {\n                // User is signed out\n                setCurrentUser(null);\n            }\n        });\n    \n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n        console.log(\"Auth State Changed: \", user);\n        setCurrentUser(user);\n    });\n    return () => unsubscribe();\n}, []);\n\n\n\n    const handleDescriptionChange = (id, newDescription) => {\n        setDescriptions(prevDescriptions => ({\n            ...prevDescriptions,\n            [id]: newDescription\n        }));\n        // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n        setSelectedDescription(newDescription);\n    }\n    };\n    \n\n    const saveDescription = async (id) => {\n        const description = descriptions[id];\n        if (!id || !description) {\n            alert(\"Cannot save description: No document ID found or description is empty\");\n            return;\n        }\n    \n        try {\n            // Use the state for the current user's email, fallback to 'Unknown' if not available\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"montipora\", id);\n            await updateDoc(docRef, {\n                description,\n                lastEditedBy: userEmail, // Use email instead of displayName\n                lastEdited: new Date()\n            });\n            alert(\"Description saved!\");\n    \n            // Update the state to reflect the change\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === id) {\n                    return { ...image, description, lastEditedBy: userEmail, lastEdited: new Date() };\n                }\n                return image;\n            }));\n        } catch (error) {\n            alert(\"Failed to save description: \" + error.message);\n        }\n    };\n    \n    return (\n        \n        <div className=\"page-main-box\">\n      <div className=\"page-inputbox\">\n        <div className=\"page-input-boxes\">\n        \n        <input \n                type=\"text\" \n                id=\"AquascapeTypeInput\"  // Adding an id attribute\n                name=\"aquascapeType\"     // Adding a name attribute\n                className=\"coral-name-input\"\n                placeholder=\"Aquascape Type...\"\n                maxLength=\"30\"\n                value={imageAquascapeType}\n                onChange={handleAquascapeTypeInput}\n            />\n            <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n          </div>\n          <div className=\"page-input-box2\">\n            <input \n            type=\"file\" \n            id=\"imageUpload\"       // Existing id attribute\n            name=\"imageUpload\"  \n            className=\"file-box\"   // Adding a name attribute \n            value={fileInputValue}\n            onChange={handleFileInputChange}\n             />\n            <button className=\"page-btn-upload\" onClick={uploadImage}>Upload Image</button>\n            </div>\n            </div>\n\n            <div className=\"page-images-list\">\n            {currentImages.map((image, index) =>  (\n                    <div key={image.imageName} className=\"page-image-container\">\n                        <img src={image.url} className=\"page-img-grid\" onClick={() => handleImageClick(image)} />\n                        <button className=\"page-btn\" onClick={() => deleteImage(image.id, image.imageName)}>Delete</button>\n                        \n                    </div>\n                ))}\n            </div>\n\n            <div className=\"pagination\">\n                <button onClick={() => setCurrentPage(prev => prev > 1 ? prev - 1 : prev)}>Prev</button>\n                <span>Page {currentPage} of {totalPages}</span>\n                <button onClick={() => setCurrentPage(prev => prev < totalPages ? prev + 1 : prev)}>Next</button>\n            </div>\n\n            {isModalOpen && (\n                <ImageModal\n                url={selectedImage} \n                description={selectedDescription} \n                imageAquascapeType={selectedImageAquascapeType}\n                lastEdited={selectedLastEdited}\n                onClose={() => setIsModalOpen(false)}\n                onEdit={handleEdit}\n                imageId={currentImageId}\n            />\n            )}\n            {isModalEdit && (\n                <ModalEdit \n                    url={selectedImage} \n                    description={selectedDescription} \n                    imageAquascapeType={selectedImageAquascapeType}\n                    lastEdited={selectedLastEdited}\n                    onSaveEdit={onSaveEdit}\n                    onClose={handleDismiss}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Monti;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from './CoralFirebase-config';\nimport { ref, listAll, getDownloadURL, uploadBytes, deleteObject } from 'firebase/storage';\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where, getDoc,writeBatch } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\n\n\nconst Mushrooms = () => {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageList, setImageList] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEdit, setModalEdit] = useState(false);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [selectedDescription, setSelectedDescription] = useState('');\n    const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n    const [selectedImageMushroomName, setselectedImageMushroomName] = useState('')\n    const [descriptions, setDescriptions] = useState({});\n    const [currentUser, setCurrentUser] = useState(null); \n    const [imageDescription, setImageDescription] = useState('');\n    const [imageMushroomName, setimageMushroomName] = useState('');\n    const [fileInputValue, setFileInputValue] = useState(\"\");\n    const [currentImageId, setCurrentImageId] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const imagesPerPage = 12; // 12 images per page\n    const indexOfLastImage = currentPage * imagesPerPage;\n    const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n    const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n    const totalImages = imageList.length;\n    const totalPages = Math.ceil(totalImages / imagesPerPage);\n\n\n  // create new collection\n \n\n    \n    const handleEdit = () => {\n        setModalEdit(true); // Open ModalEdit\n        setIsModalOpen(false); // Close ImageModal\n    };\n    const handleDismiss = () => {\n        setModalEdit(false); // Close ModalEdit\n        setIsModalOpen(true); // Reopen ImageModal\n    };\n\n    const handleImageClick = async (image) => {\n        try {\n            const docRef = doc(db, \"mushrooms\", image.id);\n            const docSnapshot = await getDoc(docRef);\n            if (docSnapshot.exists()) {\n                const imageData = docSnapshot.data();\n                console.log(\"Fetched data for image click:\", imageData);\n    \n                setSelectedImage(image.url);\n                setSelectedDescription(imageData.description);\n                setselectedImageMushroomName(imageData.mushroomName);\n    \n                let lastEditedDate = '';\n                if (imageData.lastEdited && imageData.lastEdited.toDate instanceof Function) {\n                    lastEditedDate = imageData.lastEdited.toDate().toLocaleString();\n                }\n    \n                setSelectedLastEdited({\n                    editedBy: imageData.lastEditedBy,\n                    lastEdited: lastEditedDate\n                });\n    \n                setCurrentImageId(image.id);\n                setIsModalOpen(true);\n            } else {\n                console.log(\"No such document!\");\n            }\n        } catch (error) {\n            console.error(\"Error getting document:\", error);\n        }\n    };\n    \n    \n\n    const handleDescriptionInput = (event) => {\n        setImageDescription(event.target.value);\n    };\n    const handleMushroomNameInput = (event) => {\n        setimageMushroomName(event.target.value)\n    }\n    \n    const uploadImage = async () => {\n        if (!imageUpload) return;\n    \n        const imageName = v4(); // Random file name\n        const imageRef = ref(storage, `Mushrooms/${imageName}`);\n        const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n\n        try {\n            \n            const snapshot = await uploadBytes(imageRef, imageUpload);\n            const url = await getDownloadURL(snapshot.ref);\n    \n            // Initialize fields when creating a new document\n            const newDocRef = await addDoc(collection(db, \"mushrooms\"), {\n                url,\n                imageName,\n                description: imageDescription,\n                mushroomName: imageMushroomName,\n                lastEdited: new Date(), // Use current date\n                lastEditedBy: userEmail // Use current user or 'Unknown'\n            });\n           \n\n            setImageList(prevList => [{\n                id: newDocRef.id,\n                url,\n                imageName,\n                description: imageDescription,\n                mushroomName:imageMushroomName,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            }, ...prevList]);\n    // Reset the description input after upload\n   \n            setImageDescription('');\n            setimageMushroomName('');\n            setFileInputValue(''); // Reset file input value\n        } catch (error) {\n            console.error(\"Error uploading image or creating Firestore document:\", error);\n        }\n    };\n    \n    const handleFileInputChange = (event) => {\n        setImageUpload(event.target.files[0]);\n        setFileInputValue(event.target.value); // Update the file input value state\n    };\n\n    const getDocumentIdFromImageName = async (imageName) => {\n        try {\n            const q = query(collection(db, \"mushrooms\"), where(\"imageName\", \"==\", imageName));\n            const querySnapshot = await getDocs(q);\n            console.log(`Documents found for image name '${imageName}':`, querySnapshot.docs.length);\n            querySnapshot.forEach(doc => console.log(doc.id, doc.data()));\n    \n            if (!querySnapshot.empty) {\n                return querySnapshot.docs[0].id;\n            } else {\n                console.log(\"No matching document found for image name:\", imageName);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Error fetching document ID:\", error);\n            return null;\n        }\n    };\n    \n\n    const deleteImage = async (imageId, imageName, isOrphan) => {\n        console.log(\"Attempting to delete image with Name:\", imageName);\n        // Ensure the image name does not contain 'Mushrooms/' prefix\n        if (imageName.startsWith('Mushrooms/')) {\n            imageName = imageName.replace('Mushrooms/', '');\n        }\n    \n        \n    \n        const isConfirmed = window.confirm(\"Are you sure you want to delete this image?\");\n        if (isConfirmed) {\n        try {\n            const imageRef = ref(storage, `Mushrooms/${imageName}`);\n            await deleteObject(imageRef);\n    \n                if (!isOrphan) {\n                    const docRef = doc(db, \"mushrooms\", imageId);\n                    await deleteDoc(docRef);\n                }\n    \n                setImageList(imageList.filter(image => image.imageName !== imageName));\n                alert(\"Image deleted successfully.\");\n            } catch (error) {\n                console.error(\"Error deleting image:\", error);\n                alert(\"Failed to delete image: \" + error.message);\n            }\n        }\n    };\n    \n    const onSaveEdit = async (imageId, description, mushroomName) => {\n        console.log(\"onSaveEdit params:\", { imageId, description, mushroomName });\n\n\n        if (!imageId || description === undefined || mushroomName === undefined) {\n            let missingData = '';\n            if (!imageId) missingData += 'Image ID ';\n            if (description === undefined) missingData += 'Description ';\n            if (mushroomName === undefined) missingData += 'Mushroom Name ';\n            alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n            return;\n        }\n    \n        try {\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"mushrooms\", imageId);\n            await updateDoc(docRef, {\n                description: description,\n                mushroomName: mushroomName,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            });\n    \n            alert(\"Changes saved successfully!\");\n    \n            // Update the image list state\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === imageId) {\n                    return { \n                        ...image, \n                        description: description, \n                        mushroomName: mushroomName,\n                        lastEditedBy: userEmail, \n                        lastEdited: new Date()\n                    };\n                }\n                return image;\n            }));\n            try {\n                const docRef = doc(db, \"mushrooms\", imageId);\n                const docSnapshot = await getDoc(docRef);\n                if (docSnapshot.exists()) {\n                    const imageData = docSnapshot.data();\n                    setSelectedDescription(imageData.description);\n                    setselectedImageMushroomName(imageData.mushroomName);\n                    // Update last edited info if needed\n                } else {\n                    console.log(\"Document not found after update.\");\n                }\n            } catch (error) {\n                console.error(\"Error refetching the updated document:\", error);\n            }\n    \n            setIsModalOpen(true);\n            setModalEdit(false);\n    \n        } catch (error) {\n            console.error(\"Error saving changes: \", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n    \n    \n    const ImageModal = ({ url, description, imageMushroomName, lastEdited, onClose, onEdit }) => {\n        if (!url) return null;\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <div className=\"coral-name-label\"><b>Mushroom Name:</b></div>\n                                    <div className=\"coral-name-value\">{imageMushroomName}</div>\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={onEdit}>Edit</button>\n                                    <button onClick={onClose}>Close</button>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <p>{description}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    const ModalEdit = ({ url, description, imageMushroomName, lastEdited, onClose, onSaveEdit, imageId }) => {\n        const [editableDescription, setEditableDescription] = useState(description);\n        const [editableMushroomName, setEditableMushroomName] = useState(imageMushroomName);\n    \n        useEffect(() => {\n            setEditableDescription(description);\n            setEditableMushroomName(imageMushroomName);\n        }, [description, imageMushroomName]);\n    \n        const handleSave = () => {\n            if (!editableDescription || !editableMushroomName) {\n                alert(\"Please fill out all fields before saving.\");\n                return;\n            }\n            if (!currentImageId) {\n                alert(\"Error: Image ID is missing.\");\n                return;\n            }\n            onSaveEdit(currentImageId, editableDescription, editableMushroomName);\n            onClose();\n        };\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <p><b>Mushroom Name:</b></p>\n                                    <input \n                                        type=\"text\" \n                                        value={editableMushroomName} \n                                        onChange={(e) => setEditableMushroomName(e.target.value)} \n                                        className=\"modal-edit-coral-name-input\"\n                                    />\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={handleSave}>Save</button>\n                                    <button onClick={onClose}>Dismiss</button> \n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <textarea \n                                        value={editableDescription} \n                                        onChange={(e) => setEditableDescription(e.target.value)}\n                                        className=\"modal-edit-description-input\"\n                                    ></textarea>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    \n\n    const fetchImages = async () => {\n        try {\n            const mushroomsCollection = collection(db, \"mushrooms\");\n            const descriptionDocs = await getDocs(mushroomsCollection);\n    \n            let images = [];\n            for (const doc of descriptionDocs.docs) {\n                const data = doc.data();\n                let lastEditedBy = data.lastEditedBy || auth.currentUser.displayName || 'Unknown';\n    \n                // Check if 'last edited by' field is missing and update the document\n                if (!data.lastEditedBy) {\n                    await updateDoc(doc.ref, { lastEditedBy });\n                }\n    \n                images.push({\n                    id: doc.id,\n                    ...data,\n                    description: data.description || '',\n                    lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n                    lastEditedBy // Use updated lastEditedBy\n                });\n            }\n    \n            // Sort images by last edited timestamp\n            images.sort((a, b) => b.lastEdited - a.lastEdited);\n    \n            setImageList(images);\n        } catch (error) {\n            console.error(\"Error fetching images:\", error);\n        }\n    };\n    \n    \n   \n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    useEffect(() => {\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in\n                setCurrentUser(user);\n            } else {\n                // User is signed out\n                setCurrentUser(null);\n            }\n        });\n    \n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n        console.log(\"Auth State Changed: \", user);\n        setCurrentUser(user);\n    });\n    return () => unsubscribe();\n}, []);\n\n\n\n    const handleDescriptionChange = (id, newDescription) => {\n        setDescriptions(prevDescriptions => ({\n            ...prevDescriptions,\n            [id]: newDescription\n        }));\n        // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n        setSelectedDescription(newDescription);\n    }\n    };\n    \n\n    const saveDescription = async (id) => {\n        const description = descriptions[id];\n        if (!id || !description) {\n            alert(\"Cannot save description: No document ID found or description is empty\");\n            return;\n        }\n    \n        try {\n            // Use the state for the current user's email, fallback to 'Unknown' if not available\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"mushrooms\", id);\n            await updateDoc(docRef, {\n                description,\n                lastEditedBy: userEmail, // Use email instead of displayName\n                lastEdited: new Date()\n            });\n            alert(\"Description saved!\");\n    \n            // Update the state to reflect the change\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === id) {\n                    return { ...image, description, lastEditedBy: userEmail, lastEdited: new Date() };\n                }\n                return image;\n            }));\n        } catch (error) {\n            alert(\"Failed to save description: \" + error.message);\n        }\n    };\n    \n    return (\n        <div className=\"page-main-box\">\n      <div className=\"page-inputbox\">\n        <div className=\"page-input-boxes\">\n        \n        <input \n                type=\"text\" \n                id=\"MushroomNameInput\"  // Adding an id attribute\n                name=\"mushroomName\"     // Adding a name attribute\n                className=\"coral-name-input\"\n                placeholder=\"Mushroom Name...\"\n                maxLength=\"30\"\n                value={imageMushroomName}\n                onChange={handleMushroomNameInput}\n            />\n            <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n        </div>\n        <div className=\"page-input-box2\">\n          <input\n            type=\"file\"\n            id=\"imageUpload\" // Existing id attribute\n            name=\"imageUpload\"\n            className=\"file-box\" // Adding a name attribute\n            value={fileInputValue}\n            onChange={handleFileInputChange}\n          />\n          <button className=\"page-btn-upload\" onClick={uploadImage}>\n            Upload\n          </button>\n        </div>\n      </div>\n\n      <div className=\"page-images-list\">\n        {currentImages.map((image, index) => (\n          <div key={image.imageName} className=\"page-image-container\">\n            <img\n              src={image.url}\n              className=\"page-img-grid\"\n              onClick={() => handleImageClick(image)}\n            />\n            <button\n              className=\"page-btn\"\n              onClick={() => deleteImage(image.id, image.imageName)}\n            >\n              Delete\n            </button>\n          </div>\n        ))}\n      </div>\n\n\n            <div className=\"pagination\">\n                <button onClick={() => setCurrentPage(prev => prev > 1 ? prev - 1 : prev)}>Prev</button>\n                <span>Page {currentPage} of {totalPages}</span>\n                <button onClick={() => setCurrentPage(prev => prev < totalPages ? prev + 1 : prev)}>Next</button>\n            </div>\n\n            {isModalOpen && (\n                <ImageModal\n                url={selectedImage} \n                description={selectedDescription} \n                imageMushroomName={selectedImageMushroomName}\n                lastEdited={selectedLastEdited}\n                onClose={() => setIsModalOpen(false)}\n                onEdit={handleEdit}\n                imageId={currentImageId}\n            />\n            )}\n            {isModalEdit && (\n                <ModalEdit \n                    url={selectedImage} \n                    description={selectedDescription} \n                    imageMushroomName={selectedImageMushroomName}\n                    lastEdited={selectedLastEdited}\n                    onSaveEdit={onSaveEdit}\n                    onClose={handleDismiss}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Mushrooms;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from './CoralFirebase-config';\nimport { ref, listAll, getDownloadURL, uploadBytes, deleteObject } from 'firebase/storage';\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where, getDoc,writeBatch } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\n\n\nconst NPSCorals = () => {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageList, setImageList] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEdit, setModalEdit] = useState(false);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [selectedDescription, setSelectedDescription] = useState('');\n    const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n    const [selectedImageAquascapeType, setSelectedImageAquascapeType] = useState('')\n    const [descriptions, setDescriptions] = useState({});\n    const [currentUser, setCurrentUser] = useState(null); \n    const [imageDescription, setImageDescription] = useState('');\n    const [imageAquascapeType, setImageAquascapeType] = useState('');\n    const [fileInputValue, setFileInputValue] = useState(\"\");\n    const [currentImageId, setCurrentImageId] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const imagesPerPage = 12; // 12 images per page\n    const indexOfLastImage = currentPage * imagesPerPage;\n    const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n    const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n    const totalImages = imageList.length;\n    const totalPages = Math.ceil(totalImages / imagesPerPage);\n\n\n  // create new collection\n\n\n    \n    const handleEdit = () => {\n        setModalEdit(true); // Open ModalEdit\n        setIsModalOpen(false); // Close ImageModal\n    };\n    const handleDismiss = () => {\n        setModalEdit(false); // Close ModalEdit\n        setIsModalOpen(true); // Reopen ImageModal\n    };\n\n    const handleImageClick = async (image) => {\n        try {\n            const docRef = doc(db, \"nps corals\", image.id);\n            const docSnapshot = await getDoc(docRef);\n            if (docSnapshot.exists()) {\n                const imageData = docSnapshot.data();\n                console.log(\"Fetched data for image click:\", imageData);\n    \n                setSelectedImage(image.url);\n                setSelectedDescription(imageData.description);\n                setSelectedImageAquascapeType(imageData.aquascapeType);\n    \n                let lastEditedDate = '';\n                if (imageData.lastEdited && imageData.lastEdited.toDate instanceof Function) {\n                    lastEditedDate = imageData.lastEdited.toDate().toLocaleString();\n                }\n    \n                setSelectedLastEdited({\n                    editedBy: imageData.lastEditedBy,\n                    lastEdited: lastEditedDate\n                });\n    \n                setCurrentImageId(image.id);\n                setIsModalOpen(true);\n            } else {\n                console.log(\"No such document!\");\n            }\n        } catch (error) {\n            console.error(\"Error getting document:\", error);\n        }\n    };\n    \n    \n\n    const handleDescriptionInput = (event) => {\n        setImageDescription(event.target.value);\n    };\n    const handleAquascapeTypeInput = (event) => {\n        setImageAquascapeType(event.target.value)\n    }\n    \n    const uploadImage = async () => {\n        if (!imageUpload) return;\n    \n        const imageName = v4(); // Random file name\n        const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n        const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n\n        try {\n            \n            const snapshot = await uploadBytes(imageRef, imageUpload);\n            const url = await getDownloadURL(snapshot.ref);\n    \n            // Initialize fields when creating a new document\n            const newDocRef = await addDoc(collection(db, \"nps corals\"), {\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType: imageAquascapeType,\n                lastEdited: new Date(), // Use current date\n                lastEditedBy: userEmail // Use current user or 'Unknown'\n            });\n           \n\n            setImageList(prevList => [{\n                id: newDocRef.id,\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType:imageAquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            }, ...prevList]);\n    // Reset the description input after upload\n   \n            setImageDescription('');\n            setImageAquascapeType('');\n            setFileInputValue(''); // Reset file input value\n        } catch (error) {\n            console.error(\"Error uploading image or creating Firestore document:\", error);\n        }\n    };\n    \n    const handleFileInputChange = (event) => {\n        setImageUpload(event.target.files[0]);\n        setFileInputValue(event.target.value); // Update the file input value state\n    };\n\n    const getDocumentIdFromImageName = async (imageName) => {\n        try {\n            const q = query(collection(db, \"nps corals\"), where(\"imageName\", \"==\", imageName));\n            const querySnapshot = await getDocs(q);\n            console.log(`Documents found for image name '${imageName}':`, querySnapshot.docs.length);\n            querySnapshot.forEach(doc => console.log(doc.id, doc.data()));\n    \n            if (!querySnapshot.empty) {\n                return querySnapshot.docs[0].id;\n            } else {\n                console.log(\"No matching document found for image name:\", imageName);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Error fetching document ID:\", error);\n            return null;\n        }\n    };\n    \n\n    const deleteImage = async (imageId, imageName, isOrphan) => {\n        console.log(\"Attempting to delete image with Name:\", imageName);\n        // Ensure the image name does not contain 'Aquascape Ideas/' prefix\n        if (imageName.startsWith('Aquascape Ideas/')) {\n            imageName = imageName.replace('Aquascape Ideas/', '');\n        }\n    \n        \n    \n        const isConfirmed = window.confirm(\"Are you sure you want to delete this image?\");\n        if (isConfirmed) {\n        try {\n            const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n            await deleteObject(imageRef);\n    \n                if (!isOrphan) {\n                    const docRef = doc(db, \"nps corals\", imageId);\n                    await deleteDoc(docRef);\n                }\n    \n                setImageList(imageList.filter(image => image.imageName !== imageName));\n                alert(\"Image deleted successfully.\");\n            } catch (error) {\n                console.error(\"Error deleting image:\", error);\n                alert(\"Failed to delete image: \" + error.message);\n            }\n        }\n    };\n    \n    const onSaveEdit = async (imageId, description, aquascapeType) => {\n        console.log(\"onSaveEdit params:\", { imageId, description, aquascapeType });\n\n\n        if (!imageId || description === undefined || aquascapeType === undefined) {\n            let missingData = '';\n            if (!imageId) missingData += 'Image ID ';\n            if (description === undefined) missingData += 'Description ';\n            if (aquascapeType === undefined) missingData += 'Aquascape Type ';\n            alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n            return;\n        }\n    \n        try {\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"nps corals\", imageId);\n            await updateDoc(docRef, {\n                description: description,\n                aquascapeType: aquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            });\n    \n            alert(\"Changes saved successfully!\");\n    \n            // Update the image list state\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === imageId) {\n                    return { \n                        ...image, \n                        description: description, \n                        aquascapeType: aquascapeType,\n                        lastEditedBy: userEmail, \n                        lastEdited: new Date()\n                    };\n                }\n                return image;\n            }));\n            try {\n                const docRef = doc(db, \"nps corals\", imageId);\n                const docSnapshot = await getDoc(docRef);\n                if (docSnapshot.exists()) {\n                    const imageData = docSnapshot.data();\n                    setSelectedDescription(imageData.description);\n                    setSelectedImageAquascapeType(imageData.aquascapeType);\n                    // Update last edited info if needed\n                } else {\n                    console.log(\"Document not found after update.\");\n                }\n            } catch (error) {\n                console.error(\"Error refetching the updated document:\", error);\n            }\n    \n            setIsModalOpen(true);\n            setModalEdit(false);\n    \n        } catch (error) {\n            console.error(\"Error saving changes: \", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n    \n    \n    const ImageModal = ({ url, description, imageAquascapeType, lastEdited, onClose, onEdit }) => {\n        if (!url) return null;\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <div className=\"coral-name-label\"><b>Aquascape Type:</b></div>\n                                    <div className=\"coral-name-value\">{imageAquascapeType}</div>\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={onEdit}>Edit</button>\n                                    <button onClick={onClose}>Close</button>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <p>{description}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    const ModalEdit = ({ url, description, imageAquascapeType, lastEdited, onClose, onSaveEdit, imageId }) => {\n        const [editableDescription, setEditableDescription] = useState(description);\n        const [editableAquascapeType, setEditableAquascapeType] = useState(imageAquascapeType);\n    \n        useEffect(() => {\n            setEditableDescription(description);\n            setEditableAquascapeType(imageAquascapeType);\n        }, [description, imageAquascapeType]);\n    \n        const handleSave = () => {\n            if (!editableDescription || !editableAquascapeType) {\n                alert(\"Please fill out all fields before saving.\");\n                return;\n            }\n            if (!currentImageId) {\n                alert(\"Error: Image ID is missing.\");\n                return;\n            }\n            onSaveEdit(currentImageId, editableDescription, editableAquascapeType);\n            onClose();\n        };\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <p><b>Aquascape Type:</b></p>\n                                    <input \n                                        type=\"text\" \n                                        value={editableAquascapeType} \n                                        onChange={(e) => setEditableAquascapeType(e.target.value)} \n                                        className=\"modal-edit-coral-name-input\"\n                                    />\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={handleSave}>Save</button>\n                                    <button onClick={onClose}>Dismiss</button> \n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <textarea \n                                        value={editableDescription} \n                                        onChange={(e) => setEditableDescription(e.target.value)}\n                                        className=\"modal-edit-description-input\"\n                                    ></textarea>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    \n\n    const fetchImages = async () => {\n        try {\n            const npsCoralsCollection = collection(db, \"nps corals\");\n            const descriptionDocs = await getDocs(npsCoralsCollection);\n    \n            let images = [];\n            for (const doc of descriptionDocs.docs) {\n                const data = doc.data();\n                let lastEditedBy = data.lastEditedBy || auth.currentUser.displayName || 'Unknown';\n    \n                // Check if 'last edited by' field is missing and update the document\n                if (!data.lastEditedBy) {\n                    await updateDoc(doc.ref, { lastEditedBy });\n                }\n    \n                images.push({\n                    id: doc.id,\n                    ...data,\n                    description: data.description || '',\n                    lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n                    lastEditedBy // Use updated lastEditedBy\n                });\n            }\n    \n            // Sort images by last edited timestamp\n            images.sort((a, b) => b.lastEdited - a.lastEdited);\n    \n            setImageList(images);\n        } catch (error) {\n            console.error(\"Error fetching images:\", error);\n        }\n    };\n    \n    \n   \n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    useEffect(() => {\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in\n                setCurrentUser(user);\n            } else {\n                // User is signed out\n                setCurrentUser(null);\n            }\n        });\n    \n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n        console.log(\"Auth State Changed: \", user);\n        setCurrentUser(user);\n    });\n    return () => unsubscribe();\n}, []);\n\n\n\n    const handleDescriptionChange = (id, newDescription) => {\n        setDescriptions(prevDescriptions => ({\n            ...prevDescriptions,\n            [id]: newDescription\n        }));\n        // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n        setSelectedDescription(newDescription);\n    }\n    };\n    \n\n    const saveDescription = async (id) => {\n        const description = descriptions[id];\n        if (!id || !description) {\n            alert(\"Cannot save description: No document ID found or description is empty\");\n            return;\n        }\n    \n        try {\n            // Use the state for the current user's email, fallback to 'Unknown' if not available\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"nps corals\", id);\n            await updateDoc(docRef, {\n                description,\n                lastEditedBy: userEmail, // Use email instead of displayName\n                lastEdited: new Date()\n            });\n            alert(\"Description saved!\");\n    \n            // Update the state to reflect the change\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === id) {\n                    return { ...image, description, lastEditedBy: userEmail, lastEdited: new Date() };\n                }\n                return image;\n            }));\n        } catch (error) {\n            alert(\"Failed to save description: \" + error.message);\n        }\n    };\n    \n    return (\n        <div className=\"page-main-box\">\n      <div className=\"page-inputbox\">\n        <div className=\"page-input-boxes\">\n     \n        \n        <input \n                type=\"text\" \n                id=\"AquascapeTypeInput\"  // Adding an id attribute\n                name=\"aquascapeType\"     // Adding a name attribute\n                className=\"coral-name-input\"\n                placeholder=\"Aquascape Type...\"\n                maxLength=\"30\"\n                value={imageAquascapeType}\n                onChange={handleAquascapeTypeInput}\n            />\n            <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n          </div>\n          <div className=\"page-input-box2\">\n            <input \n            type=\"file\" \n            id=\"imageUpload\"       // Existing id attribute\n            name=\"imageUpload\" \n            className=\"file-box\"    // Adding a name attribute \n            value={fileInputValue}\n            onChange={handleFileInputChange}\n             />\n            <button className=\"page-btn-upload\" onClick={uploadImage}>Upload Image</button>\n            </div>\n            </div>\n\n            <div className=\"page-images-list\">\n            {currentImages.map((image, index) =>  (\n                    <div key={image.imageName} className=\"page-image-container\">\n                        <img src={image.url} className=\"page-img-grid\" onClick={() => handleImageClick(image)} />\n                        <button className=\"page-btn\" onClick={() => deleteImage(image.id, image.imageName)}>Delete</button>\n                        \n                    </div>\n                ))}\n            </div>\n\n            <div className=\"pagination\">\n                <button onClick={() => setCurrentPage(prev => prev > 1 ? prev - 1 : prev)}>Prev</button>\n                <span>Page {currentPage} of {totalPages}</span>\n                <button onClick={() => setCurrentPage(prev => prev < totalPages ? prev + 1 : prev)}>Next</button>\n            </div>\n\n            {isModalOpen && (\n                <ImageModal\n                url={selectedImage} \n                description={selectedDescription} \n                imageAquascapeType={selectedImageAquascapeType}\n                lastEdited={selectedLastEdited}\n                onClose={() => setIsModalOpen(false)}\n                onEdit={handleEdit}\n                imageId={currentImageId}\n            />\n            )}\n            {isModalEdit && (\n                <ModalEdit \n                    url={selectedImage} \n                    description={selectedDescription} \n                    imageAquascapeType={selectedImageAquascapeType}\n                    lastEdited={selectedLastEdited}\n                    onSaveEdit={onSaveEdit}\n                    onClose={handleDismiss}\n                />\n            )}\n       </div>\n    );\n};\n\nexport default NPSCorals;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from './CoralFirebase-config';\nimport { ref, listAll, getDownloadURL, uploadBytes, deleteObject } from 'firebase/storage';\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where, getDoc,writeBatch } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\nconst Scoly = () => {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageList, setImageList] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEdit, setModalEdit] = useState(false);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [selectedDescription, setSelectedDescription] = useState('');\n    const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n    const [selectedImageAquascapeType, setSelectedImageAquascapeType] = useState('')\n    const [descriptions, setDescriptions] = useState({});\n    const [currentUser, setCurrentUser] = useState(null); \n    const [imageDescription, setImageDescription] = useState('');\n    const [imageAquascapeType, setImageAquascapeType] = useState('');\n    const [fileInputValue, setFileInputValue] = useState(\"\");\n    const [currentImageId, setCurrentImageId] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const imagesPerPage = 12; // 12 images per page\n    const indexOfLastImage = currentPage * imagesPerPage;\n    const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n    const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n    const totalImages = imageList.length;\n    const totalPages = Math.ceil(totalImages / imagesPerPage);\n\n\n  // create new collection\n  \n\n\n    \n    const handleEdit = () => {\n        setModalEdit(true); // Open ModalEdit\n        setIsModalOpen(false); // Close ImageModal\n    };\n    const handleDismiss = () => {\n        setModalEdit(false); // Close ModalEdit\n        setIsModalOpen(true); // Reopen ImageModal\n    };\n\n    const handleImageClick = async (image) => {\n        try {\n            const docRef = doc(db, \"scolymia\", image.id);\n            const docSnapshot = await getDoc(docRef);\n            if (docSnapshot.exists()) {\n                const imageData = docSnapshot.data();\n                console.log(\"Fetched data for image click:\", imageData);\n    \n                setSelectedImage(image.url);\n                setSelectedDescription(imageData.description);\n                setSelectedImageAquascapeType(imageData.aquascapeType);\n    \n                let lastEditedDate = '';\n                if (imageData.lastEdited && imageData.lastEdited.toDate instanceof Function) {\n                    lastEditedDate = imageData.lastEdited.toDate().toLocaleString();\n                }\n    \n                setSelectedLastEdited({\n                    editedBy: imageData.lastEditedBy,\n                    lastEdited: lastEditedDate\n                });\n    \n                setCurrentImageId(image.id);\n                setIsModalOpen(true);\n            } else {\n                console.log(\"No such document!\");\n            }\n        } catch (error) {\n            console.error(\"Error getting document:\", error);\n        }\n    };\n    \n    \n\n    const handleDescriptionInput = (event) => {\n        setImageDescription(event.target.value);\n    };\n    const handleAquascapeTypeInput = (event) => {\n        setImageAquascapeType(event.target.value)\n    }\n    \n    const uploadImage = async () => {\n        if (!imageUpload) return;\n    \n        const imageName = v4(); // Random file name\n        const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n        const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n\n        try {\n            \n            const snapshot = await uploadBytes(imageRef, imageUpload);\n            const url = await getDownloadURL(snapshot.ref);\n    \n            // Initialize fields when creating a new document\n            const newDocRef = await addDoc(collection(db, \"scolymia\"), {\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType: imageAquascapeType,\n                lastEdited: new Date(), // Use current date\n                lastEditedBy: userEmail // Use current user or 'Unknown'\n            });\n           \n\n            setImageList(prevList => [{\n                id: newDocRef.id,\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType:imageAquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            }, ...prevList]);\n    // Reset the description input after upload\n   \n            setImageDescription('');\n            setImageAquascapeType('');\n            setFileInputValue(''); // Reset file input value\n        } catch (error) {\n            console.error(\"Error uploading image or creating Firestore document:\", error);\n        }\n    };\n    \n    const handleFileInputChange = (event) => {\n        setImageUpload(event.target.files[0]);\n        setFileInputValue(event.target.value); // Update the file input value state\n    };\n\n    const getDocumentIdFromImageName = async (imageName) => {\n        try {\n            const q = query(collection(db, \"scolymia\"), where(\"imageName\", \"==\", imageName));\n            const querySnapshot = await getDocs(q);\n            console.log(`Documents found for image name '${imageName}':`, querySnapshot.docs.length);\n            querySnapshot.forEach(doc => console.log(doc.id, doc.data()));\n    \n            if (!querySnapshot.empty) {\n                return querySnapshot.docs[0].id;\n            } else {\n                console.log(\"No matching document found for image name:\", imageName);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Error fetching document ID:\", error);\n            return null;\n        }\n    };\n    \n\n    const deleteImage = async (imageId, imageName, isOrphan) => {\n        console.log(\"Attempting to delete image with Name:\", imageName);\n        // Ensure the image name does not contain 'Aquascape Ideas/' prefix\n        if (imageName.startsWith('Aquascape Ideas/')) {\n            imageName = imageName.replace('Aquascape Ideas/', '');\n        }\n    \n        \n    \n        const isConfirmed = window.confirm(\"Are you sure you want to delete this image?\");\n        if (isConfirmed) {\n        try {\n            const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n            await deleteObject(imageRef);\n    \n                if (!isOrphan) {\n                    const docRef = doc(db, \"scolymia\", imageId);\n                    await deleteDoc(docRef);\n                }\n    \n                setImageList(imageList.filter(image => image.imageName !== imageName));\n                alert(\"Image deleted successfully.\");\n            } catch (error) {\n                console.error(\"Error deleting image:\", error);\n                alert(\"Failed to delete image: \" + error.message);\n            }\n        }\n    };\n    \n    const onSaveEdit = async (imageId, description, aquascapeType) => {\n        console.log(\"onSaveEdit params:\", { imageId, description, aquascapeType });\n\n\n        if (!imageId || description === undefined || aquascapeType === undefined) {\n            let missingData = '';\n            if (!imageId) missingData += 'Image ID ';\n            if (description === undefined) missingData += 'Description ';\n            if (aquascapeType === undefined) missingData += 'Aquascape Type ';\n            alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n            return;\n        }\n    \n        try {\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"scolymia\", imageId);\n            await updateDoc(docRef, {\n                description: description,\n                aquascapeType: aquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            });\n    \n            alert(\"Changes saved successfully!\");\n    \n            // Update the image list state\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === imageId) {\n                    return { \n                        ...image, \n                        description: description, \n                        aquascapeType: aquascapeType,\n                        lastEditedBy: userEmail, \n                        lastEdited: new Date()\n                    };\n                }\n                return image;\n            }));\n            try {\n                const docRef = doc(db, \"scolymia\", imageId);\n                const docSnapshot = await getDoc(docRef);\n                if (docSnapshot.exists()) {\n                    const imageData = docSnapshot.data();\n                    setSelectedDescription(imageData.description);\n                    setSelectedImageAquascapeType(imageData.aquascapeType);\n                    // Update last edited info if needed\n                } else {\n                    console.log(\"Document not found after update.\");\n                }\n            } catch (error) {\n                console.error(\"Error refetching the updated document:\", error);\n            }\n    \n            setIsModalOpen(true);\n            setModalEdit(false);\n    \n        } catch (error) {\n            console.error(\"Error saving changes: \", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n    \n    \n    const ImageModal = ({ url, description, imageAquascapeType, lastEdited, onClose, onEdit }) => {\n        if (!url) return null;\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <div className=\"coral-name-label\"><b>Aquascape Type:</b></div>\n                                    <div className=\"coral-name-value\">{imageAquascapeType}</div>\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={onEdit}>Edit</button>\n                                    <button onClick={onClose}>Close</button>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <p>{description}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    const ModalEdit = ({ url, description, imageAquascapeType, lastEdited, onClose, onSaveEdit, imageId }) => {\n        const [editableDescription, setEditableDescription] = useState(description);\n        const [editableAquascapeType, setEditableAquascapeType] = useState(imageAquascapeType);\n    \n        useEffect(() => {\n            setEditableDescription(description);\n            setEditableAquascapeType(imageAquascapeType);\n        }, [description, imageAquascapeType]);\n    \n        const handleSave = () => {\n            if (!editableDescription || !editableAquascapeType) {\n                alert(\"Please fill out all fields before saving.\");\n                return;\n            }\n            if (!currentImageId) {\n                alert(\"Error: Image ID is missing.\");\n                return;\n            }\n            onSaveEdit(currentImageId, editableDescription, editableAquascapeType);\n            onClose();\n        };\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <p><b>Aquascape Type:</b></p>\n                                    <input \n                                        type=\"text\" \n                                        value={editableAquascapeType} \n                                        onChange={(e) => setEditableAquascapeType(e.target.value)} \n                                        className=\"modal-edit-coral-name-input\"\n                                    />\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={handleSave}>Save</button>\n                                    <button onClick={onClose}>Dismiss</button> \n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <textarea \n                                        value={editableDescription} \n                                        onChange={(e) => setEditableDescription(e.target.value)}\n                                        className=\"modal-edit-description-input\"\n                                    ></textarea>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    \n\n    const fetchImages = async () => {\n        try {\n            const scolymiaCollection = collection(db, \"scolymia\");\n            const descriptionDocs = await getDocs(scolymiaCollection);\n    \n            let images = [];\n            for (const doc of descriptionDocs.docs) {\n                const data = doc.data();\n                let lastEditedBy = data.lastEditedBy || auth.currentUser.displayName || 'Unknown';\n    \n                // Check if 'last edited by' field is missing and update the document\n                if (!data.lastEditedBy) {\n                    await updateDoc(doc.ref, { lastEditedBy });\n                }\n    \n                images.push({\n                    id: doc.id,\n                    ...data,\n                    description: data.description || '',\n                    lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n                    lastEditedBy // Use updated lastEditedBy\n                });\n            }\n    \n            // Sort images by last edited timestamp\n            images.sort((a, b) => b.lastEdited - a.lastEdited);\n    \n            setImageList(images);\n        } catch (error) {\n            console.error(\"Error fetching images:\", error);\n        }\n    };\n    \n    \n   \n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    useEffect(() => {\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in\n                setCurrentUser(user);\n            } else {\n                // User is signed out\n                setCurrentUser(null);\n            }\n        });\n    \n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n        console.log(\"Auth State Changed: \", user);\n        setCurrentUser(user);\n    });\n    return () => unsubscribe();\n}, []);\n\n\n\n    const handleDescriptionChange = (id, newDescription) => {\n        setDescriptions(prevDescriptions => ({\n            ...prevDescriptions,\n            [id]: newDescription\n        }));\n        // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n        setSelectedDescription(newDescription);\n    }\n    };\n    \n\n    const saveDescription = async (id) => {\n        const description = descriptions[id];\n        if (!id || !description) {\n            alert(\"Cannot save description: No document ID found or description is empty\");\n            return;\n        }\n    \n        try {\n            // Use the state for the current user's email, fallback to 'Unknown' if not available\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"scolymia\", id);\n            await updateDoc(docRef, {\n                description,\n                lastEditedBy: userEmail, // Use email instead of displayName\n                lastEdited: new Date()\n            });\n            alert(\"Description saved!\");\n    \n            // Update the state to reflect the change\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === id) {\n                    return { ...image, description, lastEditedBy: userEmail, lastEdited: new Date() };\n                }\n                return image;\n            }));\n        } catch (error) {\n            alert(\"Failed to save description: \" + error.message);\n        }\n    };\n    \n    return (\n        <div className=\"page-main-box\">\n      <div className=\"page-inputbox\">\n        <div className=\"page-input-boxes\">\n        \n        \n        <input \n                type=\"text\" \n                id=\"AquascapeTypeInput\"  // Adding an id attribute\n                name=\"aquascapeType\"     // Adding a name attribute\n                className=\"coral-name-input\"\n                placeholder=\"Aquascape Type...\"\n                maxLength=\"30\"\n                value={imageAquascapeType}\n                onChange={handleAquascapeTypeInput}\n            />\n            <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n          </div>\n        <div className=\"page-input-box2\">\n            <input \n            type=\"file\" \n            id=\"imageUpload\"       // Existing id attribute\n            name=\"imageUpload\"  \n            className=\"file-box\"   // Adding a name attribute \n            value={fileInputValue}\n            onChange={handleFileInputChange}\n             />\n            <button className=\"page-btn-upload\" onClick={uploadImage}>Upload Image</button>\n            </div>\n            </div>\n\n            <div className=\"page-images-list\">\n            {currentImages.map((image, index) =>  (\n                    <div key={image.imageName} className=\"page-image-container\">\n                        <img src={image.url} className=\"page-img-grid\" onClick={() => handleImageClick(image)} />\n                        <button className=\"page-btn\" onClick={() => deleteImage(image.id, image.imageName)}>Delete</button>\n                        \n                    </div>\n                ))}\n            </div>\n\n            <div className=\"pagination\">\n                <button onClick={() => setCurrentPage(prev => prev > 1 ? prev - 1 : prev)}>Prev</button>\n                <span>Page {currentPage} of {totalPages}</span>\n                <button onClick={() => setCurrentPage(prev => prev < totalPages ? prev + 1 : prev)}>Next</button>\n            </div>\n\n            {isModalOpen && (\n                <ImageModal\n                url={selectedImage} \n                description={selectedDescription} \n                imageAquascapeType={selectedImageAquascapeType}\n                lastEdited={selectedLastEdited}\n                onClose={() => setIsModalOpen(false)}\n                onEdit={handleEdit}\n                imageId={currentImageId}\n            />\n            )}\n            {isModalEdit && (\n                <ModalEdit \n                    url={selectedImage} \n                    description={selectedDescription} \n                    imageAquascapeType={selectedImageAquascapeType}\n                    lastEdited={selectedLastEdited}\n                    onSaveEdit={onSaveEdit}\n                    onClose={handleDismiss}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Scoly;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from './CoralFirebase-config';\nimport { ref, listAll, getDownloadURL, uploadBytes, deleteObject } from 'firebase/storage';\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where, getDoc,writeBatch } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\n\n\nconst Zoas = () => {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageList, setImageList] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEdit, setModalEdit] = useState(false);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [selectedDescription, setSelectedDescription] = useState('');\n    const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n    const [selectedImageAquascapeType, setSelectedImageAquascapeType] = useState('')\n    const [descriptions, setDescriptions] = useState({});\n    const [currentUser, setCurrentUser] = useState(null); \n    const [imageDescription, setImageDescription] = useState('');\n    const [imageAquascapeType, setImageAquascapeType] = useState('');\n    const [fileInputValue, setFileInputValue] = useState(\"\");\n    const [currentImageId, setCurrentImageId] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const imagesPerPage = 12; // 12 images per page\n    const indexOfLastImage = currentPage * imagesPerPage;\n    const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n    const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n    const totalImages = imageList.length;\n    const totalPages = Math.ceil(totalImages / imagesPerPage);\n\n\n  // create new collection\n  \n\n\n    \n    const handleEdit = () => {\n        setModalEdit(true); // Open ModalEdit\n        setIsModalOpen(false); // Close ImageModal\n    };\n    const handleDismiss = () => {\n        setModalEdit(false); // Close ModalEdit\n        setIsModalOpen(true); // Reopen ImageModal\n    };\n\n    const handleImageClick = async (image) => {\n        try {\n            const docRef = doc(db, \"zoas palys\", image.id);\n            const docSnapshot = await getDoc(docRef);\n            if (docSnapshot.exists()) {\n                const imageData = docSnapshot.data();\n                console.log(\"Fetched data for image click:\", imageData);\n    \n                setSelectedImage(image.url);\n                setSelectedDescription(imageData.description);\n                setSelectedImageAquascapeType(imageData.aquascapeType);\n    \n                let lastEditedDate = '';\n                if (imageData.lastEdited && imageData.lastEdited.toDate instanceof Function) {\n                    lastEditedDate = imageData.lastEdited.toDate().toLocaleString();\n                }\n    \n                setSelectedLastEdited({\n                    editedBy: imageData.lastEditedBy,\n                    lastEdited: lastEditedDate\n                });\n    \n                setCurrentImageId(image.id);\n                setIsModalOpen(true);\n            } else {\n                console.log(\"No such document!\");\n            }\n        } catch (error) {\n            console.error(\"Error getting document:\", error);\n        }\n    };\n    \n    \n\n    const handleDescriptionInput = (event) => {\n        setImageDescription(event.target.value);\n    };\n    const handleAquascapeTypeInput = (event) => {\n        setImageAquascapeType(event.target.value)\n    }\n    \n    const uploadImage = async () => {\n        if (!imageUpload) return;\n    \n        const imageName = v4(); // Random file name\n        const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n        const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n\n        try {\n            \n            const snapshot = await uploadBytes(imageRef, imageUpload);\n            const url = await getDownloadURL(snapshot.ref);\n    \n            // Initialize fields when creating a new document\n            const newDocRef = await addDoc(collection(db, \"zoas palys\"), {\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType: imageAquascapeType,\n                lastEdited: new Date(), // Use current date\n                lastEditedBy: userEmail // Use current user or 'Unknown'\n            });\n           \n\n            setImageList(prevList => [{\n                id: newDocRef.id,\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType:imageAquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            }, ...prevList]);\n    // Reset the description input after upload\n   \n            setImageDescription('');\n            setImageAquascapeType('');\n            setFileInputValue(''); // Reset file input value\n        } catch (error) {\n            console.error(\"Error uploading image or creating Firestore document:\", error);\n        }\n    };\n    \n    const handleFileInputChange = (event) => {\n        setImageUpload(event.target.files[0]);\n        setFileInputValue(event.target.value); // Update the file input value state\n    };\n\n    const getDocumentIdFromImageName = async (imageName) => {\n        try {\n            const q = query(collection(db, \"zoas palys\"), where(\"imageName\", \"==\", imageName));\n            const querySnapshot = await getDocs(q);\n            console.log(`Documents found for image name '${imageName}':`, querySnapshot.docs.length);\n            querySnapshot.forEach(doc => console.log(doc.id, doc.data()));\n    \n            if (!querySnapshot.empty) {\n                return querySnapshot.docs[0].id;\n            } else {\n                console.log(\"No matching document found for image name:\", imageName);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Error fetching document ID:\", error);\n            return null;\n        }\n    };\n    \n\n    const deleteImage = async (imageId, imageName, isOrphan) => {\n        console.log(\"Attempting to delete image with Name:\", imageName);\n        // Ensure the image name does not contain 'Aquascape Ideas/' prefix\n        if (imageName.startsWith('Aquascape Ideas/')) {\n            imageName = imageName.replace('Aquascape Ideas/', '');\n        }\n    \n        \n    \n        const isConfirmed = window.confirm(\"Are you sure you want to delete this image?\");\n        if (isConfirmed) {\n        try {\n            const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n            await deleteObject(imageRef);\n    \n                if (!isOrphan) {\n                    const docRef = doc(db, \"zoas palys\", imageId);\n                    await deleteDoc(docRef);\n                }\n    \n                setImageList(imageList.filter(image => image.imageName !== imageName));\n                alert(\"Image deleted successfully.\");\n            } catch (error) {\n                console.error(\"Error deleting image:\", error);\n                alert(\"Failed to delete image: \" + error.message);\n            }\n        }\n    };\n    \n    const onSaveEdit = async (imageId, description, aquascapeType) => {\n        console.log(\"onSaveEdit params:\", { imageId, description, aquascapeType });\n\n\n        if (!imageId || description === undefined || aquascapeType === undefined) {\n            let missingData = '';\n            if (!imageId) missingData += 'Image ID ';\n            if (description === undefined) missingData += 'Description ';\n            if (aquascapeType === undefined) missingData += 'Aquascape Type ';\n            alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n            return;\n        }\n    \n        try {\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"zoas palys\", imageId);\n            await updateDoc(docRef, {\n                description: description,\n                aquascapeType: aquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            });\n    \n            alert(\"Changes saved successfully!\");\n    \n            // Update the image list state\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === imageId) {\n                    return { \n                        ...image, \n                        description: description, \n                        aquascapeType: aquascapeType,\n                        lastEditedBy: userEmail, \n                        lastEdited: new Date()\n                    };\n                }\n                return image;\n            }));\n            try {\n                const docRef = doc(db, \"zoas palys\", imageId);\n                const docSnapshot = await getDoc(docRef);\n                if (docSnapshot.exists()) {\n                    const imageData = docSnapshot.data();\n                    setSelectedDescription(imageData.description);\n                    setSelectedImageAquascapeType(imageData.aquascapeType);\n                    // Update last edited info if needed\n                } else {\n                    console.log(\"Document not found after update.\");\n                }\n            } catch (error) {\n                console.error(\"Error refetching the updated document:\", error);\n            }\n    \n            setIsModalOpen(true);\n            setModalEdit(false);\n    \n        } catch (error) {\n            console.error(\"Error saving changes: \", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n    \n    \n    const ImageModal = ({ url, description, imageAquascapeType, lastEdited, onClose, onEdit }) => {\n        if (!url) return null;\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <div className=\"coral-name-label\"><b>Aquascape Type:</b></div>\n                                    <div className=\"coral-name-value\">{imageAquascapeType}</div>\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={onEdit}>Edit</button>\n                                    <button onClick={onClose}>Close</button>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <p>{description}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    const ModalEdit = ({ url, description, imageAquascapeType, lastEdited, onClose, onSaveEdit, imageId }) => {\n        const [editableDescription, setEditableDescription] = useState(description);\n        const [editableAquascapeType, setEditableAquascapeType] = useState(imageAquascapeType);\n    \n        useEffect(() => {\n            setEditableDescription(description);\n            setEditableAquascapeType(imageAquascapeType);\n        }, [description, imageAquascapeType]);\n    \n        const handleSave = () => {\n            if (!editableDescription || !editableAquascapeType) {\n                alert(\"Please fill out all fields before saving.\");\n                return;\n            }\n            if (!currentImageId) {\n                alert(\"Error: Image ID is missing.\");\n                return;\n            }\n            onSaveEdit(currentImageId, editableDescription, editableAquascapeType);\n            onClose();\n        };\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <p><b>Aquascape Type:</b></p>\n                                    <input \n                                        type=\"text\" \n                                        value={editableAquascapeType} \n                                        onChange={(e) => setEditableAquascapeType(e.target.value)} \n                                        className=\"modal-edit-coral-name-input\"\n                                    />\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={handleSave}>Save</button>\n                                    <button onClick={onClose}>Dismiss</button> \n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <textarea \n                                        value={editableDescription} \n                                        onChange={(e) => setEditableDescription(e.target.value)}\n                                        className=\"modal-edit-description-input\"\n                                    ></textarea>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    \n\n    const fetchImages = async () => {\n        try {\n            const zoaCollection = collection(db, \"zoas palys\");\n            const descriptionDocs = await getDocs(zoaCollection);\n    \n            let images = [];\n            for (const doc of descriptionDocs.docs) {\n                const data = doc.data();\n                let lastEditedBy = data.lastEditedBy || auth.currentUser.displayName || 'Unknown';\n    \n                // Check if 'last edited by' field is missing and update the document\n                if (!data.lastEditedBy) {\n                    await updateDoc(doc.ref, { lastEditedBy });\n                }\n    \n                images.push({\n                    id: doc.id,\n                    ...data,\n                    description: data.description || '',\n                    lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n                    lastEditedBy // Use updated lastEditedBy\n                });\n            }\n    \n            // Sort images by last edited timestamp\n            images.sort((a, b) => b.lastEdited - a.lastEdited);\n    \n            setImageList(images);\n        } catch (error) {\n            console.error(\"Error fetching images:\", error);\n        }\n    };\n    \n    \n   \n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    useEffect(() => {\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in\n                setCurrentUser(user);\n            } else {\n                // User is signed out\n                setCurrentUser(null);\n            }\n        });\n    \n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n        console.log(\"Auth State Changed: \", user);\n        setCurrentUser(user);\n    });\n    return () => unsubscribe();\n}, []);\n\n\n\n    const handleDescriptionChange = (id, newDescription) => {\n        setDescriptions(prevDescriptions => ({\n            ...prevDescriptions,\n            [id]: newDescription\n        }));\n        // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n        setSelectedDescription(newDescription);\n    }\n    };\n    \n\n    const saveDescription = async (id) => {\n        const description = descriptions[id];\n        if (!id || !description) {\n            alert(\"Cannot save description: No document ID found or description is empty\");\n            return;\n        }\n    \n        try {\n            // Use the state for the current user's email, fallback to 'Unknown' if not available\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"zoas palys\", id);\n            await updateDoc(docRef, {\n                description,\n                lastEditedBy: userEmail, // Use email instead of displayName\n                lastEdited: new Date()\n            });\n            alert(\"Description saved!\");\n    \n            // Update the state to reflect the change\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === id) {\n                    return { ...image, description, lastEditedBy: userEmail, lastEdited: new Date() };\n                }\n                return image;\n            }));\n        } catch (error) {\n            alert(\"Failed to save description: \" + error.message);\n        }\n    };\n    \n    return (\n        <div className=\"page-main-box\">\n      <div className=\"page-inputbox\">\n        <div className=\"page-input-boxes\">\n        \n        <input \n                type=\"text\" \n                id=\"AquascapeTypeInput\"  // Adding an id attribute\n                name=\"aquascapeType\"     // Adding a name attribute\n                className=\"coral-name-input\"\n                placeholder=\"Aquascape Type...\"\n                maxLength=\"30\"\n                value={imageAquascapeType}\n                onChange={handleAquascapeTypeInput}\n            />\n            <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n          </div>\n        <div className=\"page-input-box2\">\n            <input \n            type=\"file\" \n            id=\"imageUpload\"       // Existing id attribute\n            name=\"imageUpload\" \n            className=\"file-box\"    // Adding a name attribute \n            value={fileInputValue}\n            onChange={handleFileInputChange}\n             />\n            <button className=\"page-btn-upload\" onClick={uploadImage}>Upload Image</button>\n            </div>\n            </div> \n\n            <div className=\"page-images-list\">\n            {currentImages.map((image, index) =>  (\n                    <div key={image.imageName} className=\"page-image-container\">\n                        <img src={image.url} className=\"page-img-grid\" onClick={() => handleImageClick(image)} />\n                        <button className=\"page-btn\" onClick={() => deleteImage(image.id, image.imageName)}>Delete</button>\n                        \n                    </div>\n                ))}\n            </div>\n\n            <div className=\"pagination\">\n                <button onClick={() => setCurrentPage(prev => prev > 1 ? prev - 1 : prev)}>Prev</button>\n                <span>Page {currentPage} of {totalPages}</span>\n                <button onClick={() => setCurrentPage(prev => prev < totalPages ? prev + 1 : prev)}>Next</button>\n            </div>\n\n            {isModalOpen && (\n                <ImageModal\n                url={selectedImage} \n                description={selectedDescription} \n                imageAquascapeType={selectedImageAquascapeType}\n                lastEdited={selectedLastEdited}\n                onClose={() => setIsModalOpen(false)}\n                onEdit={handleEdit}\n                imageId={currentImageId}\n            />\n            )}\n            {isModalEdit && (\n                <ModalEdit \n                    url={selectedImage} \n                    description={selectedDescription} \n                    imageAquascapeType={selectedImageAquascapeType}\n                    lastEdited={selectedLastEdited}\n                    onSaveEdit={onSaveEdit}\n                    onClose={handleDismiss}\n                />\n            )}\n       </div>\n    );\n};\n\nexport default Zoas;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from \"./CoralFirebase-config\";\nimport {\n  ref,\n  uploadBytes,\n  getDownloadURL,\n  deleteObject,\n} from \"firebase/storage\";\nimport {\n  collection,\n  addDoc,\n  getDocs,\n  deleteDoc,\n  doc,\n  updateDoc,\n  query,\n  where,\n  getDoc,\n} from \"firebase/firestore\";\nimport { v4 } from \"uuid\";\n\nconst Acro = () => {\n  const [imageUpload, setImageUpload] = useState(null);\n  const [imageList, setImageList] = useState([]);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isModalEdit, setModalEdit] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [selectedDescription, setSelectedDescription] = useState(\"\");\n  const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n  const [selectedImageCoralName, setSelectedImageCoralName] = useState(\"\");\n  const [descriptions, setDescriptions] = useState({});\n  const [currentUser, setCurrentUser] = useState(null);\n  const [imageDescription, setImageDescription] = useState(\"\");\n  const [imageCoralName, setImageCoralName] = useState(\"\");\n  const [fileInputValue, setFileInputValue] = useState(\"\");\n  const [currentImageId, setCurrentImageId] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const imagesPerPage = 12; // 12 images per page\n  const indexOfLastImage = currentPage * imagesPerPage;\n  const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n  const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n  const totalImages = imageList.length;\n  const totalPages = Math.ceil(totalImages / imagesPerPage);\n\n  const handleEdit = () => {\n    setModalEdit(true); // Open ModalEdit\n    setIsModalOpen(false); // Close ImageModal\n  };\n  const handleDismiss = () => {\n    setModalEdit(false); // Close ModalEdit\n    setIsModalOpen(true); // Reopen ImageModal\n  };\n\n  const handleImageClick = async (image) => {\n    try {\n      const docRef = doc(db, \"corals\", image.id);\n      const docSnapshot = await getDoc(docRef);\n      if (docSnapshot.exists()) {\n        const imageData = docSnapshot.data();\n        console.log(\"Fetched data for image click:\", imageData); // Debugging log\n        setSelectedImage(image.url);\n        setSelectedDescription(imageData.description);\n        setSelectedImageCoralName(imageData.coralName);\n        setSelectedLastEdited({\n          editedBy: imageData.lastEditedBy,\n          lastEdited: imageData.lastEdited.toDate().toLocaleString(),\n        });\n        setCurrentImageId(image.id);\n        setIsModalOpen(true);\n      } else {\n        console.log(\"No such document!\");\n      }\n    } catch (error) {\n      console.error(\"Error getting document:\", error);\n    }\n  };\n\n  const handleDescriptionInput = (event) => {\n    setImageDescription(event.target.value);\n  };\n  const handleCoralNameInput = (event) => {\n    setImageCoralName(event.target.value);\n  };\n\n  const uploadImage = async () => {\n    if (!imageUpload) return;\n\n    const imageName = v4(); // Random file name\n    const imageRef = ref(storage, `Acropora/${imageName}`);\n    const userEmail = currentUser ? currentUser.email || \"Unknown\" : \"Unknown\";\n\n    try {\n      const snapshot = await uploadBytes(imageRef, imageUpload);\n      const url = await getDownloadURL(snapshot.ref);\n\n      // Initialize fields when creating a new document\n      const newDocRef = await addDoc(collection(db, \"corals\"), {\n        url,\n        imageName,\n        description: imageDescription,\n        coralName: imageCoralName,\n        lastEdited: new Date(), // Use current date\n        lastEditedBy: userEmail, // Use current user or 'Unknown'\n      });\n\n      setImageList((prevList) => [\n        {\n          id: newDocRef.id,\n          url,\n          imageName,\n          description: imageDescription,\n          coralName: imageCoralName,\n          lastEdited: new Date(),\n          lastEditedBy: userEmail,\n        },\n        ...prevList,\n      ]);\n      // Reset the description input after upload\n\n      setImageDescription(\"\");\n      setImageCoralName(\"\");\n      setFileInputValue(\"\"); // Reset file input value\n    } catch (error) {\n      console.error(\n        \"Error uploading image or creating Firestore document:\",\n        error\n      );\n    }\n  };\n\n  const handleFileInputChange = (event) => {\n    setImageUpload(event.target.files[0]);\n    setFileInputValue(event.target.value); // Update the file input value state\n  };\n\n  const getDocumentIdFromImageName = async (imageName) => {\n    try {\n      const q = query(\n        collection(db, \"corals\"),\n        where(\"imageName\", \"==\", imageName)\n      );\n      const querySnapshot = await getDocs(q);\n      console.log(\n        `Documents found for image name '${imageName}':`,\n        querySnapshot.docs.length\n      );\n      querySnapshot.forEach((doc) => console.log(doc.id, doc.data()));\n\n      if (!querySnapshot.empty) {\n        return querySnapshot.docs[0].id;\n      } else {\n        console.log(\"No matching document found for image name:\", imageName);\n        return null;\n      }\n    } catch (error) {\n      console.error(\"Error fetching document ID:\", error);\n      return null;\n    }\n  };\n\n  const deleteImage = async (imageId, imageName, isOrphan) => {\n    console.log(\"Attempting to delete image with Name:\", imageName);\n    // Ensure the image name does not contain 'Acropora/' prefix\n    if (imageName.startsWith(\"Acropora/\")) {\n      imageName = imageName.replace(\"Acropora/\", \"\");\n    }\n\n    const isConfirmed = window.confirm(\n      \"Are you sure you want to delete this image?\"\n    );\n    if (isConfirmed) {\n      try {\n        const imageRef = ref(storage, `Acropora/${imageName}`);\n        await deleteObject(imageRef);\n\n        if (!isOrphan) {\n          const docRef = doc(db, \"corals\", imageId);\n          await deleteDoc(docRef);\n        }\n\n        setImageList(\n          imageList.filter((image) => image.imageName !== imageName)\n        );\n        alert(\"Image deleted successfully.\");\n      } catch (error) {\n        console.error(\"Error deleting image:\", error);\n        alert(\"Failed to delete image: \" + error.message);\n      }\n    }\n  };\n\n  const onSaveEdit = async (imageId, description, coralName) => {\n    console.log(\"onSaveEdit params:\", { imageId, description, coralName });\n\n    if (!imageId || description === undefined || coralName === undefined) {\n      let missingData = \"\";\n      if (!imageId) missingData += \"Image ID \";\n      if (description === undefined) missingData += \"Description \";\n      if (coralName === undefined) missingData += \"Coral Name \";\n      alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n      return;\n    }\n\n    try {\n      const userEmail = currentUser\n        ? currentUser.email || \"Unknown\"\n        : \"Unknown\";\n      const docRef = doc(db, \"corals\", imageId);\n      await updateDoc(docRef, {\n        description: description,\n        coralName: coralName,\n        lastEdited: new Date(),\n        lastEditedBy: userEmail,\n      });\n\n      alert(\"Changes saved successfully!\");\n\n      // Update the image list state\n      setImageList((prevList) =>\n        prevList.map((image) => {\n          if (image.id === imageId) {\n            return {\n              ...image,\n              description: description,\n              coralName: coralName,\n              lastEditedBy: userEmail,\n              lastEdited: new Date(),\n            };\n          }\n          return image;\n        })\n      );\n      try {\n        const docRef = doc(db, \"corals\", imageId);\n        const docSnapshot = await getDoc(docRef);\n        if (docSnapshot.exists()) {\n          const imageData = docSnapshot.data();\n          setSelectedDescription(imageData.description);\n          setSelectedImageCoralName(imageData.coralName);\n          // Update last edited info if needed\n        } else {\n          console.log(\"Document not found after update.\");\n        }\n      } catch (error) {\n        console.error(\"Error refetching the updated document:\", error);\n      }\n\n      setIsModalOpen(true);\n      setModalEdit(false);\n    } catch (error) {\n      console.error(\"Error saving changes: \", error);\n      alert(\"Failed to save changes: \" + error.message);\n    }\n  };\n\n  const ImageModal = ({\n    url,\n    description,\n    imageCoralName,\n    lastEdited,\n    onClose,\n    onEdit,\n  }) => {\n    if (!url) return null;\n\n    return (\n      <div className=\"modal-backdrop\" onClick={onClose}>\n        <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-image-container\">\n            <img src={url} alt=\"Full Size\" />\n          </div>\n          <table className=\"modal-info-table\">\n            <tbody>\n              <tr>\n                <td className=\"coral-name-cell\">\n                  <div className=\"coral-name-label\">\n                    <b>Coral Name:</b>\n                  </div>\n                  <div className=\"coral-name-value\">{imageCoralName}</div>\n                </td>\n                <td className=\"last-edited-cell\">\n                  Last Edited: {lastEdited.lastEdited}\n                  <br />\n                  Edited by: {lastEdited.editedBy}\n                </td>\n                <td className=\"modal-buttons-cell\">\n                  <button onClick={onEdit}>Edit</button>\n                  <button onClick={onClose}>Close</button>\n                </td>\n              </tr>\n              <tr>\n                <td colSpan=\"3\" className=\"modal-description-cell\">\n                  <p>{description}</p>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n\n  const ModalEdit = ({\n    url,\n    description,\n    imageCoralName,\n    lastEdited,\n    onClose,\n    onSaveEdit,\n    imageId,\n  }) => {\n    const [editableDescription, setEditableDescription] = useState(description);\n    const [editableCoralName, setEditableCoralName] = useState(imageCoralName);\n\n    useEffect(() => {\n      setEditableDescription(description);\n      setEditableCoralName(imageCoralName);\n    }, [description, imageCoralName]);\n\n    const handleSave = () => {\n      if (!editableDescription || !editableCoralName) {\n        alert(\"Please fill out all fields before saving.\");\n        return;\n      }\n      if (!currentImageId) {\n        alert(\"Error: Image ID is missing.\");\n        return;\n      }\n      onSaveEdit(currentImageId, editableDescription, editableCoralName);\n      onClose();\n    };\n\n    return (\n      <div className=\"modal-backdrop\" onClick={onClose}>\n        <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n          <div className=\"modal-image-container\">\n            <img src={url} alt=\"Full Size\" />\n          </div>\n          <table className=\"modal-info-table\">\n            <tbody>\n              <tr>\n                <td className=\"coral-name-cell\">\n                  <p>\n                    <b>Coral Name:</b>\n                  </p>\n                  <input\n                    type=\"text\"\n                    value={editableCoralName}\n                    onChange={(e) => setEditableCoralName(e.target.value)}\n                    className=\"modal-edit-coral-name-input\"\n                  />\n                </td>\n                <td className=\"last-edited-cell\">\n                  Last Edited: {lastEdited.lastEdited}\n                  <br />\n                  Edited by: {lastEdited.editedBy}\n                </td>\n                <td className=\"modal-buttons-cell\">\n                  <button onClick={handleSave}>Save</button>\n                  <button onClick={onClose}>Dismiss</button>\n                </td>\n              </tr>\n              <tr>\n                <td colSpan=\"3\" className=\"modal-description-cell\">\n                  <textarea\n                    value={editableDescription}\n                    onChange={(e) => setEditableDescription(e.target.value)}\n                    className=\"modal-edit-description-input\"\n                  ></textarea>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n\n  const fetchImages = async () => {\n    try {\n      const coralsCollection = collection(db, \"corals\");\n      const descriptionDocs = await getDocs(coralsCollection);\n\n      let images = [];\n      for (const doc of descriptionDocs.docs) {\n        const data = doc.data();\n        let lastEditedBy =\n          data.lastEditedBy || auth.currentUser.displayName || \"Unknown\";\n\n        // Check if 'last edited by' field is missing and update the document\n        if (!data.lastEditedBy) {\n          await updateDoc(doc.ref, { lastEditedBy });\n        }\n\n        images.push({\n          id: doc.id,\n          ...data,\n          description: data.description || \"\",\n          lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n          lastEditedBy, // Use updated lastEditedBy\n        });\n      }\n\n      // Sort images by last edited timestamp\n      images.sort((a, b) => b.lastEdited - a.lastEdited);\n\n      setImageList(images);\n    } catch (error) {\n      console.error(\"Error fetching images:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchImages();\n  }, []);\n\n  useEffect(() => {\n    // Listen for auth state changes\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (user) {\n        // User is signed in\n        setCurrentUser(user);\n      } else {\n        // User is signed out\n        setCurrentUser(null);\n      }\n    });\n\n    // Cleanup subscription on unmount\n    return () => unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      console.log(\"Auth State Changed: \", user);\n      setCurrentUser(user);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  const handleDescriptionChange = (id, newDescription) => {\n    setDescriptions((prevDescriptions) => ({\n      ...prevDescriptions,\n      [id]: newDescription,\n    }));\n    // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n      setSelectedDescription(newDescription);\n    }\n  };\n\n  const saveDescription = async (id) => {\n    const description = descriptions[id];\n    if (!id || !description) {\n      alert(\n        \"Cannot save description: No document ID found or description is empty\"\n      );\n      return;\n    }\n\n    try {\n      // Use the state for the current user's email, fallback to 'Unknown' if not available\n      const userEmail = currentUser\n        ? currentUser.email || \"Unknown\"\n        : \"Unknown\";\n      const docRef = doc(db, \"corals\", id);\n      await updateDoc(docRef, {\n        description,\n        lastEditedBy: userEmail, // Use email instead of displayName\n        lastEdited: new Date(),\n      });\n      alert(\"Description saved!\");\n\n      // Update the state to reflect the change\n      setImageList((prevList) =>\n        prevList.map((image) => {\n          if (image.id === id) {\n            return {\n              ...image,\n              description,\n              lastEditedBy: userEmail,\n              lastEdited: new Date(),\n            };\n          }\n          return image;\n        })\n      );\n    } catch (error) {\n      alert(\"Failed to save description: \" + error.message);\n    }\n  };\n\n  return (\n    <div className=\"page-main-box\">\n      <div className=\"page-inputbox\">\n        <div className=\"page-input-boxes\">\n          <input\n            type=\"text\"\n            id=\"coralNameInput\" // Adding an id attribute\n            name=\"coralName\" // Adding a name attribute\n            className=\"coral-name-input\"\n            placeholder=\"Coral Name...\"\n            maxLength=\"30\"\n            value={imageCoralName}\n            onChange={handleCoralNameInput}\n          />\n          <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n        </div>\n        <div className=\"page-input-box2\">\n          <input\n            type=\"file\"\n            id=\"imageUpload\" // Existing id attribute\n            name=\"imageUpload\"\n            className=\"file-box\" // Adding a name attribute\n            value={fileInputValue}\n            onChange={handleFileInputChange}\n          />\n          <button className=\"page-btn-upload\" onClick={uploadImage}>\n            Upload\n          </button>\n        </div>\n      </div>\n\n      <div className=\"page-images-list\">\n        {currentImages.map((image, index) => (\n          <div key={image.imageName} className=\"page-image-container\">\n            <img\n              src={image.url}\n              className=\"page-img-grid\"\n              onClick={() => handleImageClick(image)}\n            />\n            <button\n              className=\"page-btn\"\n              onClick={() => deleteImage(image.id, image.imageName)}\n            >\n              Delete\n            </button>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"pagination\">\n        <button\n          onClick={() => setCurrentPage((prev) => (prev > 1 ? prev - 1 : prev))}\n        >\n          Prev\n        </button>\n        <span>\n          Page {currentPage} of {totalPages}\n        </span>\n        <button\n          onClick={() =>\n            setCurrentPage((prev) => (prev < totalPages ? prev + 1 : prev))\n          }\n        >\n          Next\n        </button>\n      </div>\n\n      {isModalOpen && (\n        <ImageModal\n          url={selectedImage}\n          description={selectedDescription}\n          imageCoralName={selectedImageCoralName}\n          lastEdited={selectedLastEdited}\n          onClose={() => setIsModalOpen(false)}\n          onEdit={handleEdit}\n          imageId={currentImageId}\n        />\n      )}\n      {isModalEdit && (\n        <ModalEdit\n          url={selectedImage}\n          description={selectedDescription}\n          imageCoralName={selectedImageCoralName}\n          lastEdited={selectedLastEdited}\n          onSaveEdit={onSaveEdit}\n          onClose={handleDismiss}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Acro;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from './CoralFirebase-config';\nimport { ref, listAll, getDownloadURL, uploadBytes, deleteObject } from 'firebase/storage';\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where, getDoc,writeBatch } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\n\n\nconst Favia = () => {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageList, setImageList] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEdit, setModalEdit] = useState(false);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [selectedDescription, setSelectedDescription] = useState('');\n    const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n    const [selectedImageAquascapeType, setSelectedImageAquascapeType] = useState('')\n    const [descriptions, setDescriptions] = useState({});\n    const [currentUser, setCurrentUser] = useState(null); \n    const [imageDescription, setImageDescription] = useState('');\n    const [imageAquascapeType, setImageAquascapeType] = useState('');\n    const [fileInputValue, setFileInputValue] = useState(\"\");\n    const [currentImageId, setCurrentImageId] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const imagesPerPage = 12; // 12 images per page\n    const indexOfLastImage = currentPage * imagesPerPage;\n    const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n    const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n    const totalImages = imageList.length;\n    const totalPages = Math.ceil(totalImages / imagesPerPage);\n\n\n  // create new collection\n \n\n\n\n    \n    const handleEdit = () => {\n        setModalEdit(true); // Open ModalEdit\n        setIsModalOpen(false); // Close ImageModal\n    };\n    const handleDismiss = () => {\n        setModalEdit(false); // Close ModalEdit\n        setIsModalOpen(true); // Reopen ImageModal\n    };\n\n    const handleImageClick = async (image) => {\n        try {\n            const docRef = doc(db, \"favia\", image.id);\n            const docSnapshot = await getDoc(docRef);\n            if (docSnapshot.exists()) {\n                const imageData = docSnapshot.data();\n                console.log(\"Fetched data for image click:\", imageData);\n    \n                setSelectedImage(image.url);\n                setSelectedDescription(imageData.description);\n                setSelectedImageAquascapeType(imageData.aquascapeType);\n    \n                let lastEditedDate = '';\n                if (imageData.lastEdited && imageData.lastEdited.toDate instanceof Function) {\n                    lastEditedDate = imageData.lastEdited.toDate().toLocaleString();\n                }\n    \n                setSelectedLastEdited({\n                    editedBy: imageData.lastEditedBy,\n                    lastEdited: lastEditedDate\n                });\n    \n                setCurrentImageId(image.id);\n                setIsModalOpen(true);\n            } else {\n                console.log(\"No such document!\");\n            }\n        } catch (error) {\n            console.error(\"Error getting document:\", error);\n        }\n    };\n    \n    \n\n    const handleDescriptionInput = (event) => {\n        setImageDescription(event.target.value);\n    };\n    const handleAquascapeTypeInput = (event) => {\n        setImageAquascapeType(event.target.value)\n    }\n    \n    const uploadImage = async () => {\n        if (!imageUpload) return;\n    \n        const imageName = v4(); // Random file name\n        const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n        const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n\n        try {\n            \n            const snapshot = await uploadBytes(imageRef, imageUpload);\n            const url = await getDownloadURL(snapshot.ref);\n    \n            // Initialize fields when creating a new document\n            const newDocRef = await addDoc(collection(db, \"favia\"), {\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType: imageAquascapeType,\n                lastEdited: new Date(), // Use current date\n                lastEditedBy: userEmail // Use current user or 'Unknown'\n            });\n           \n\n            setImageList(prevList => [{\n                id: newDocRef.id,\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType:imageAquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            }, ...prevList]);\n    // Reset the description input after upload\n   \n            setImageDescription('');\n            setImageAquascapeType('');\n            setFileInputValue(''); // Reset file input value\n        } catch (error) {\n            console.error(\"Error uploading image or creating Firestore document:\", error);\n        }\n    };\n    \n    const handleFileInputChange = (event) => {\n        setImageUpload(event.target.files[0]);\n        setFileInputValue(event.target.value); // Update the file input value state\n    };\n\n    const getDocumentIdFromImageName = async (imageName) => {\n        try {\n            const q = query(collection(db, \"favia\"), where(\"imageName\", \"==\", imageName));\n            const querySnapshot = await getDocs(q);\n            console.log(`Documents found for image name '${imageName}':`, querySnapshot.docs.length);\n            querySnapshot.forEach(doc => console.log(doc.id, doc.data()));\n    \n            if (!querySnapshot.empty) {\n                return querySnapshot.docs[0].id;\n            } else {\n                console.log(\"No matching document found for image name:\", imageName);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Error fetching document ID:\", error);\n            return null;\n        }\n    };\n    \n\n    const deleteImage = async (imageId, imageName, isOrphan) => {\n        console.log(\"Attempting to delete image with Name:\", imageName);\n        // Ensure the image name does not contain 'Aquascape Ideas/' prefix\n        if (imageName.startsWith('Aquascape Ideas/')) {\n            imageName = imageName.replace('Aquascape Ideas/', '');\n        }\n    \n        \n    \n        const isConfirmed = window.confirm(\"Are you sure you want to delete this image?\");\n        if (isConfirmed) {\n        try {\n            const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n            await deleteObject(imageRef);\n    \n                if (!isOrphan) {\n                    const docRef = doc(db, \"favia\", imageId);\n                    await deleteDoc(docRef);\n                }\n    \n                setImageList(imageList.filter(image => image.imageName !== imageName));\n                alert(\"Image deleted successfully.\");\n            } catch (error) {\n                console.error(\"Error deleting image:\", error);\n                alert(\"Failed to delete image: \" + error.message);\n            }\n        }\n    };\n    \n    const onSaveEdit = async (imageId, description, aquascapeType) => {\n        console.log(\"onSaveEdit params:\", { imageId, description, aquascapeType });\n\n\n        if (!imageId || description === undefined || aquascapeType === undefined) {\n            let missingData = '';\n            if (!imageId) missingData += 'Image ID ';\n            if (description === undefined) missingData += 'Description ';\n            if (aquascapeType === undefined) missingData += 'Aquascape Type ';\n            alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n            return;\n        }\n    \n        try {\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"favia\", imageId);\n            await updateDoc(docRef, {\n                description: description,\n                aquascapeType: aquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            });\n    \n            alert(\"Changes saved successfully!\");\n    \n            // Update the image list state\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === imageId) {\n                    return { \n                        ...image, \n                        description: description, \n                        aquascapeType: aquascapeType,\n                        lastEditedBy: userEmail, \n                        lastEdited: new Date()\n                    };\n                }\n                return image;\n            }));\n            try {\n                const docRef = doc(db, \"favia\", imageId);\n                const docSnapshot = await getDoc(docRef);\n                if (docSnapshot.exists()) {\n                    const imageData = docSnapshot.data();\n                    setSelectedDescription(imageData.description);\n                    setSelectedImageAquascapeType(imageData.aquascapeType);\n                    // Update last edited info if needed\n                } else {\n                    console.log(\"Document not found after update.\");\n                }\n            } catch (error) {\n                console.error(\"Error refetching the updated document:\", error);\n            }\n    \n            setIsModalOpen(true);\n            setModalEdit(false);\n    \n        } catch (error) {\n            console.error(\"Error saving changes: \", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n    \n    \n    const ImageModal = ({ url, description, imageAquascapeType, lastEdited, onClose, onEdit }) => {\n        if (!url) return null;\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <div className=\"coral-name-label\"><b>Aquascape Type:</b></div>\n                                    <div className=\"coral-name-value\">{imageAquascapeType}</div>\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={onEdit}>Edit</button>\n                                    <button onClick={onClose}>Close</button>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <p>{description}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    const ModalEdit = ({ url, description, imageAquascapeType, lastEdited, onClose, onSaveEdit, imageId }) => {\n        const [editableDescription, setEditableDescription] = useState(description);\n        const [editableAquascapeType, setEditableAquascapeType] = useState(imageAquascapeType);\n    \n        useEffect(() => {\n            setEditableDescription(description);\n            setEditableAquascapeType(imageAquascapeType);\n        }, [description, imageAquascapeType]);\n    \n        const handleSave = () => {\n            if (!editableDescription || !editableAquascapeType) {\n                alert(\"Please fill out all fields before saving.\");\n                return;\n            }\n            if (!currentImageId) {\n                alert(\"Error: Image ID is missing.\");\n                return;\n            }\n            onSaveEdit(currentImageId, editableDescription, editableAquascapeType);\n            onClose();\n        };\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <p><b>Aquascape Type:</b></p>\n                                    <input \n                                        type=\"text\" \n                                        value={editableAquascapeType} \n                                        onChange={(e) => setEditableAquascapeType(e.target.value)} \n                                        className=\"modal-edit-coral-name-input\"\n                                    />\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={handleSave}>Save</button>\n                                    <button onClick={onClose}>Dismiss</button> \n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <textarea \n                                        value={editableDescription} \n                                        onChange={(e) => setEditableDescription(e.target.value)}\n                                        className=\"modal-edit-description-input\"\n                                    ></textarea>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    \n\n    const fetchImages = async () => {\n        try {\n            const faviaCollection = collection(db, \"favia\");\n            const descriptionDocs = await getDocs(faviaCollection);\n    \n            let images = [];\n            for (const doc of descriptionDocs.docs) {\n                const data = doc.data();\n                let lastEditedBy = data.lastEditedBy || auth.currentUser.displayName || 'Unknown';\n    \n                // Check if 'last edited by' field is missing and update the document\n                if (!data.lastEditedBy) {\n                    await updateDoc(doc.ref, { lastEditedBy });\n                }\n    \n                images.push({\n                    id: doc.id,\n                    ...data,\n                    description: data.description || '',\n                    lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n                    lastEditedBy // Use updated lastEditedBy\n                });\n            }\n    \n            // Sort images by last edited timestamp\n            images.sort((a, b) => b.lastEdited - a.lastEdited);\n    \n            setImageList(images);\n        } catch (error) {\n            console.error(\"Error fetching images:\", error);\n        }\n    };\n    \n    \n   \n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    useEffect(() => {\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in\n                setCurrentUser(user);\n            } else {\n                // User is signed out\n                setCurrentUser(null);\n            }\n        });\n    \n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n        console.log(\"Auth State Changed: \", user);\n        setCurrentUser(user);\n    });\n    return () => unsubscribe();\n}, []);\n\n\n\n    const handleDescriptionChange = (id, newDescription) => {\n        setDescriptions(prevDescriptions => ({\n            ...prevDescriptions,\n            [id]: newDescription\n        }));\n        // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n        setSelectedDescription(newDescription);\n    }\n    };\n    \n\n    const saveDescription = async (id) => {\n        const description = descriptions[id];\n        if (!id || !description) {\n            alert(\"Cannot save description: No document ID found or description is empty\");\n            return;\n        }\n    \n        try {\n            // Use the state for the current user's email, fallback to 'Unknown' if not available\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"favia\", id);\n            await updateDoc(docRef, {\n                description,\n                lastEditedBy: userEmail, // Use email instead of displayName\n                lastEdited: new Date()\n            });\n            alert(\"Description saved!\");\n    \n            // Update the state to reflect the change\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === id) {\n                    return { ...image, description, lastEditedBy: userEmail, lastEdited: new Date() };\n                }\n                return image;\n            }));\n        } catch (error) {\n            alert(\"Failed to save description: \" + error.message);\n        }\n    };\n    \n    return (\n        <div className=\"page-main-box\">\n      <div className=\"page-inputbox\">\n        <div className=\"page-input-boxes\">\n        \n        <input \n                type=\"text\" \n                id=\"AquascapeTypeInput\"  // Adding an id attribute\n                name=\"aquascapeType\"     // Adding a name attribute\n                className=\"coral-name-input\"\n                placeholder=\"Aquascape Type...\"\n                maxLength=\"30\"\n                value={imageAquascapeType}\n                onChange={handleAquascapeTypeInput}\n            />\n            <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n        </div>\n        <div className=\"page-input-box2\">\n            <input \n            type=\"file\" \n            id=\"imageUpload\"       // Existing id attribute\n            name=\"imageUpload\"\n            className=\"file-box\"     // Adding a name attribute \n            value={fileInputValue}\n            onChange={handleFileInputChange}\n             />\n            <button className=\"page-btn-upload\" onClick={uploadImage}>Upload Image</button>\n            </div>\n            </div>\n\n            <div className=\"page-images-list\">\n            {currentImages.map((image, index) =>  (\n                    <div key={image.imageName} className=\"page-image-container\">\n                        <img src={image.url} className=\"page-img-grid\" onClick={() => handleImageClick(image)} />\n                        <button className=\"page-btn\" onClick={() => deleteImage(image.id, image.imageName)}>Delete</button>\n                        \n                    </div>\n                ))}\n            </div>\n\n            <div className=\"pagination\">\n                <button onClick={() => setCurrentPage(prev => prev > 1 ? prev - 1 : prev)}>Prev</button>\n                <span>Page {currentPage} of {totalPages}</span>\n                <button onClick={() => setCurrentPage(prev => prev < totalPages ? prev + 1 : prev)}>Next</button>\n            </div>\n\n            {isModalOpen && (\n                <ImageModal\n                url={selectedImage} \n                description={selectedDescription} \n                imageAquascapeType={selectedImageAquascapeType}\n                lastEdited={selectedLastEdited}\n                onClose={() => setIsModalOpen(false)}\n                onEdit={handleEdit}\n                imageId={currentImageId}\n            />\n            )}\n            {isModalEdit && (\n                <ModalEdit \n                    url={selectedImage} \n                    description={selectedDescription} \n                    imageAquascapeType={selectedImageAquascapeType}\n                    lastEdited={selectedLastEdited}\n                    onSaveEdit={onSaveEdit}\n                    onClose={handleDismiss}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Favia;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from './CoralFirebase-config';\nimport { ref, uploadBytes, getDownloadURL, deleteObject } from 'firebase/storage';\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where, getDoc } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\n\n\nconst Aquascape = () => {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageList, setImageList] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEdit, setModalEdit] = useState(false);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [selectedDescription, setSelectedDescription] = useState('');\n    const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n    const [selectedImageAquascapeType, setSelectedImageAquascapeType] = useState('')\n    const [descriptions, setDescriptions] = useState({});\n    const [currentUser, setCurrentUser] = useState(null); \n    const [imageDescription, setImageDescription] = useState('');\n    const [imageAquascapeType, setImageAquascapeType] = useState('');\n    const [fileInputValue, setFileInputValue] = useState(\"\");\n    const [currentImageId, setCurrentImageId] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const imagesPerPage = 12; // 12 images per page\n    const indexOfLastImage = currentPage * imagesPerPage;\n    const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n    const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n    const totalImages = imageList.length;\n    const totalPages = Math.ceil(totalImages / imagesPerPage);\n    \n    const handleEdit = () => {\n        setModalEdit(true); // Open ModalEdit\n        setIsModalOpen(false); // Close ImageModal\n    };\n    const handleDismiss = () => {\n        setModalEdit(false); // Close ModalEdit\n        setIsModalOpen(true); // Reopen ImageModal\n    };\n\n    const handleImageClick = async (image) => {\n        try {\n            const docRef = doc(db, \"aquascapes\", image.id);\n            const docSnapshot = await getDoc(docRef);\n            if (docSnapshot.exists()) {\n                const imageData = docSnapshot.data();\n                console.log(\"Fetched data for image click:\", imageData);\n    \n                setSelectedImage(image.url);\n                setSelectedDescription(imageData.description);\n                setSelectedImageAquascapeType(imageData.aquascapeType);\n    \n                let lastEditedDate = '';\n                if (imageData.lastEdited && imageData.lastEdited.toDate instanceof Function) {\n                    lastEditedDate = imageData.lastEdited.toDate().toLocaleString();\n                }\n    \n                setSelectedLastEdited({\n                    editedBy: imageData.lastEditedBy,\n                    lastEdited: lastEditedDate\n                });\n    \n                setCurrentImageId(image.id);\n                setIsModalOpen(true);\n            } else {\n                console.log(\"No such document!\");\n            }\n        } catch (error) {\n            console.error(\"Error getting document:\", error);\n        }\n    };\n    \n    \n\n    const handleDescriptionInput = (event) => {\n        setImageDescription(event.target.value);\n    };\n    const handleAquascapeTypeInput = (event) => {\n        setImageAquascapeType(event.target.value)\n    }\n    \n    const uploadImage = async () => {\n        if (!imageUpload) return;\n    \n        const imageName = v4(); // Random file name\n        const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n        const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n\n        try {\n            \n            const snapshot = await uploadBytes(imageRef, imageUpload);\n            const url = await getDownloadURL(snapshot.ref);\n    \n            // Initialize fields when creating a new document\n            const newDocRef = await addDoc(collection(db, \"aquascapes\"), {\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType: imageAquascapeType,\n                lastEdited: new Date(), // Use current date\n                lastEditedBy: userEmail // Use current user or 'Unknown'\n            });\n           \n\n            setImageList(prevList => [{\n                id: newDocRef.id,\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType:imageAquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            }, ...prevList]);\n    // Reset the description input after upload\n   \n            setImageDescription('');\n            setImageAquascapeType('');\n            setFileInputValue(''); // Reset file input value\n        } catch (error) {\n            console.error(\"Error uploading image or creating Firestore document:\", error);\n        }\n    };\n    \n    const handleFileInputChange = (event) => {\n        setImageUpload(event.target.files[0]);\n        setFileInputValue(event.target.value); // Update the file input value state\n    };\n\n    const getDocumentIdFromImageName = async (imageName) => {\n        try {\n            const q = query(collection(db, \"aquascapes\"), where(\"imageName\", \"==\", imageName));\n            const querySnapshot = await getDocs(q);\n            console.log(`Documents found for image name '${imageName}':`, querySnapshot.docs.length);\n            querySnapshot.forEach(doc => console.log(doc.id, doc.data()));\n    \n            if (!querySnapshot.empty) {\n                return querySnapshot.docs[0].id;\n            } else {\n                console.log(\"No matching document found for image name:\", imageName);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Error fetching document ID:\", error);\n            return null;\n        }\n    };\n    \n\n    const deleteImage = async (imageId, imageName, isOrphan) => {\n        console.log(\"Attempting to delete image with Name:\", imageName);\n        // Ensure the image name does not contain 'Aquascape Ideas/' prefix\n        if (imageName.startsWith('Aquascape Ideas/')) {\n            imageName = imageName.replace('Aquascape Ideas/', '');\n        }\n    \n        \n    \n        const isConfirmed = window.confirm(\"Are you sure you want to delete this image?\");\n        if (isConfirmed) {\n        try {\n            const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n            await deleteObject(imageRef);\n    \n                if (!isOrphan) {\n                    const docRef = doc(db, \"aquascapes\", imageId);\n                    await deleteDoc(docRef);\n                }\n    \n                setImageList(imageList.filter(image => image.imageName !== imageName));\n                alert(\"Image deleted successfully.\");\n            } catch (error) {\n                console.error(\"Error deleting image:\", error);\n                alert(\"Failed to delete image: \" + error.message);\n            }\n        }\n    };\n    \n    const onSaveEdit = async (imageId, description, aquascapeType) => {\n        console.log(\"onSaveEdit params:\", { imageId, description, aquascapeType });\n\n\n        if (!imageId || description === undefined || aquascapeType === undefined) {\n            let missingData = '';\n            if (!imageId) missingData += 'Image ID ';\n            if (description === undefined) missingData += 'Description ';\n            if (aquascapeType === undefined) missingData += 'Aquascape Type ';\n            alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n            return;\n        }\n    \n        try {\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"aquascapes\", imageId);\n            await updateDoc(docRef, {\n                description: description,\n                aquascapeType: aquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            });\n    \n            alert(\"Changes saved successfully!\");\n    \n            // Update the image list state\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === imageId) {\n                    return { \n                        ...image, \n                        description: description, \n                        aquascapeType: aquascapeType,\n                        lastEditedBy: userEmail, \n                        lastEdited: new Date()\n                    };\n                }\n                return image;\n            }));\n            try {\n                const docRef = doc(db, \"aquascapes\", imageId);\n                const docSnapshot = await getDoc(docRef);\n                if (docSnapshot.exists()) {\n                    const imageData = docSnapshot.data();\n                    setSelectedDescription(imageData.description);\n                    setSelectedImageAquascapeType(imageData.aquascapeType);\n                    // Update last edited info if needed\n                } else {\n                    console.log(\"Document not found after update.\");\n                }\n            } catch (error) {\n                console.error(\"Error refetching the updated document:\", error);\n            }\n    \n            setIsModalOpen(true);\n            setModalEdit(false);\n    \n        } catch (error) {\n            console.error(\"Error saving changes: \", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n    \n    \n    const ImageModal = ({ url, description, imageAquascapeType, lastEdited, onClose, onEdit }) => {\n        if (!url) return null;\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <div className=\"coral-name-label\"><b>Aquascape Type:</b></div>\n                                    <div className=\"coral-name-value\">{imageAquascapeType}</div>\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={onEdit}>Edit</button>\n                                    <button onClick={onClose}>Close</button>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <p>{description}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    const ModalEdit = ({ url, description, imageAquascapeType, lastEdited, onClose, onSaveEdit, imageId }) => {\n        const [editableDescription, setEditableDescription] = useState(description);\n        const [editableAquascapeType, setEditableAquascapeType] = useState(imageAquascapeType);\n    \n        useEffect(() => {\n            setEditableDescription(description);\n            setEditableAquascapeType(imageAquascapeType);\n        }, [description, imageAquascapeType]);\n    \n        const handleSave = () => {\n            if (!editableDescription || !editableAquascapeType) {\n                alert(\"Please fill out all fields before saving.\");\n                return;\n            }\n            if (!currentImageId) {\n                alert(\"Error: Image ID is missing.\");\n                return;\n            }\n            onSaveEdit(currentImageId, editableDescription, editableAquascapeType);\n            onClose();\n        };\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <p><b>Aquascape Type:</b></p>\n                                    <input \n                                        type=\"text\" \n                                        value={editableAquascapeType} \n                                        onChange={(e) => setEditableAquascapeType(e.target.value)} \n                                        className=\"modal-edit-coral-name-input\"\n                                    />\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={handleSave}>Save</button>\n                                    <button onClick={onClose}>Dismiss</button> \n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <textarea \n                                        value={editableDescription} \n                                        onChange={(e) => setEditableDescription(e.target.value)}\n                                        className=\"modal-edit-description-input\"\n                                    ></textarea>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    \n\n    const fetchImages = async () => {\n        try {\n            const aquascapesCollection = collection(db, \"aquascapes\");\n            const descriptionDocs = await getDocs(aquascapesCollection);\n    \n            let images = [];\n            for (const doc of descriptionDocs.docs) {\n                const data = doc.data();\n                let lastEditedBy = data.lastEditedBy || auth.currentUser.displayName || 'Unknown';\n    \n                // Check if 'last edited by' field is missing and update the document\n                if (!data.lastEditedBy) {\n                    await updateDoc(doc.ref, { lastEditedBy });\n                }\n    \n                images.push({\n                    id: doc.id,\n                    ...data,\n                    description: data.description || '',\n                    lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n                    lastEditedBy // Use updated lastEditedBy\n                });\n            }\n    \n            // Sort images by last edited timestamp\n            images.sort((a, b) => b.lastEdited - a.lastEdited);\n    \n            setImageList(images);\n        } catch (error) {\n            console.error(\"Error fetching images:\", error);\n        }\n    };\n    \n    \n   \n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    useEffect(() => {\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in\n                setCurrentUser(user);\n            } else {\n                // User is signed out\n                setCurrentUser(null);\n            }\n        });\n    \n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n        console.log(\"Auth State Changed: \", user);\n        setCurrentUser(user);\n    });\n    return () => unsubscribe();\n}, []);\n\n\n\n    const handleDescriptionChange = (id, newDescription) => {\n        setDescriptions(prevDescriptions => ({\n            ...prevDescriptions,\n            [id]: newDescription\n        }));\n        // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n        setSelectedDescription(newDescription);\n    }\n    };\n    \n\n    const saveDescription = async (id) => {\n        const description = descriptions[id];\n        if (!id || !description) {\n            alert(\"Cannot save description: No document ID found or description is empty\");\n            return;\n        }\n    \n        try {\n            // Use the state for the current user's email, fallback to 'Unknown' if not available\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"aquascapes\", id);\n            await updateDoc(docRef, {\n                description,\n                lastEditedBy: userEmail, // Use email instead of displayName\n                lastEdited: new Date()\n            });\n            alert(\"Description saved!\");\n    \n            // Update the state to reflect the change\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === id) {\n                    return { ...image, description, lastEditedBy: userEmail, lastEdited: new Date() };\n                }\n                return image;\n            }));\n        } catch (error) {\n            alert(\"Failed to save description: \" + error.message);\n        }\n    };\n    \n    return (\n        <div className=\"page-main-box\">\n        <div className=\"page-inputbox\">\n          <div className=\"page-input-boxes\">\n        \n        <input \n                type=\"text\" \n                id=\"AquascapeTypeInput\"  // Adding an id attribute\n                name=\"aquascapeType\"     // Adding a name attribute\n                className=\"coral-name-input\"\n                placeholder=\"Aquascape Type...\"\n                maxLength=\"30\"\n                value={imageAquascapeType}\n                onChange={handleAquascapeTypeInput}\n            />\n            <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n        </div>\n        <div className=\"page-input-box2\">\n          <input\n            type=\"file\"\n            id=\"imageUpload\" // Existing id attribute\n            name=\"imageUpload\"\n            className=\"file-box\" // Adding a name attribute\n            value={fileInputValue}\n            onChange={handleFileInputChange}\n          />\n          <button className=\"page-btn-upload\" onClick={uploadImage}>\n            Upload\n          </button>\n        </div>\n      </div>\n\n      <div className=\"page-images-list\">\n        {currentImages.map((image, index) => (\n          <div key={image.imageName} className=\"page-image-container\">\n            <img\n              src={image.url}\n              className=\"page-img-grid\"\n              onClick={() => handleImageClick(image)}\n            />\n            <button\n              className=\"page-btn\"\n              onClick={() => deleteImage(image.id, image.imageName)}\n            >\n              Delete\n            </button>\n          </div>\n        ))}\n      </div>\n\n            <div className=\"pagination\">\n                <button onClick={() => setCurrentPage(prev => prev > 1 ? prev - 1 : prev)}>Prev</button>\n                <span>Page {currentPage} of {totalPages}</span>\n                <button onClick={() => setCurrentPage(prev => prev < totalPages ? prev + 1 : prev)}>Next</button>\n            </div>\n\n            {isModalOpen && (\n                <ImageModal\n                url={selectedImage} \n                description={selectedDescription} \n                imageAquascapeType={selectedImageAquascapeType}\n                lastEdited={selectedLastEdited}\n                onClose={() => setIsModalOpen(false)}\n                onEdit={handleEdit}\n                imageId={currentImageId}\n            />\n            )}\n            {isModalEdit && (\n                <ModalEdit \n                    url={selectedImage} \n                    description={selectedDescription} \n                    imageAquascapeType={selectedImageAquascapeType}\n                    lastEdited={selectedLastEdited}\n                    onSaveEdit={onSaveEdit}\n                    onClose={handleDismiss}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default Aquascape;\n","import React, { useState, useEffect } from \"react\";\nimport { storage, db, auth } from './CoralFirebase-config';\nimport { ref, listAll, getDownloadURL, uploadBytes, deleteObject } from 'firebase/storage';\nimport { collection, addDoc, getDocs, deleteDoc, doc, updateDoc, query, where, getDoc,writeBatch } from 'firebase/firestore';\nimport { v4 } from 'uuid';\n\n\n\n\nconst FishTankFurn = () => {\n    const [imageUpload, setImageUpload] = useState(null);\n    const [imageList, setImageList] = useState([]);\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [isModalEdit, setModalEdit] = useState(false);\n    const [selectedImage, setSelectedImage] = useState(null);\n    const [selectedDescription, setSelectedDescription] = useState('');\n    const [selectedLastEdited, setSelectedLastEdited] = useState(null);\n    const [selectedImageAquascapeType, setSelectedImageAquascapeType] = useState('')\n    const [descriptions, setDescriptions] = useState({});\n    const [currentUser, setCurrentUser] = useState(null); \n    const [imageDescription, setImageDescription] = useState('');\n    const [imageAquascapeType, setImageAquascapeType] = useState('');\n    const [fileInputValue, setFileInputValue] = useState(\"\");\n    const [currentImageId, setCurrentImageId] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const imagesPerPage = 12; // 12 images per page\n    const indexOfLastImage = currentPage * imagesPerPage;\n    const indexOfFirstImage = indexOfLastImage - imagesPerPage;\n    const currentImages = imageList.slice(indexOfFirstImage, indexOfLastImage);\n    const totalImages = imageList.length;\n    const totalPages = Math.ceil(totalImages / imagesPerPage);\n\n\n  // create new collection\n \n\n\n    \n    const handleEdit = () => {\n        setModalEdit(true); // Open ModalEdit\n        setIsModalOpen(false); // Close ImageModal\n    };\n    const handleDismiss = () => {\n        setModalEdit(false); // Close ModalEdit\n        setIsModalOpen(true); // Reopen ImageModal\n    };\n\n    const handleImageClick = async (image) => {\n        try {\n            const docRef = doc(db, \"fishtankfurniture\", image.id);\n            const docSnapshot = await getDoc(docRef);\n            if (docSnapshot.exists()) {\n                const imageData = docSnapshot.data();\n                console.log(\"Fetched data for image click:\", imageData);\n    \n                setSelectedImage(image.url);\n                setSelectedDescription(imageData.description);\n                setSelectedImageAquascapeType(imageData.aquascapeType);\n    \n                let lastEditedDate = '';\n                if (imageData.lastEdited && imageData.lastEdited.toDate instanceof Function) {\n                    lastEditedDate = imageData.lastEdited.toDate().toLocaleString();\n                }\n    \n                setSelectedLastEdited({\n                    editedBy: imageData.lastEditedBy,\n                    lastEdited: lastEditedDate\n                });\n    \n                setCurrentImageId(image.id);\n                setIsModalOpen(true);\n            } else {\n                console.log(\"No such document!\");\n            }\n        } catch (error) {\n            console.error(\"Error getting document:\", error);\n        }\n    };\n    \n    \n\n    const handleDescriptionInput = (event) => {\n        setImageDescription(event.target.value);\n    };\n    const handleAquascapeTypeInput = (event) => {\n        setImageAquascapeType(event.target.value)\n    }\n    \n    const uploadImage = async () => {\n        if (!imageUpload) return;\n    \n        const imageName = v4(); // Random file name\n        const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n        const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n\n        try {\n            \n            const snapshot = await uploadBytes(imageRef, imageUpload);\n            const url = await getDownloadURL(snapshot.ref);\n    \n            // Initialize fields when creating a new document\n            const newDocRef = await addDoc(collection(db, \"fishtankfurniture\"), {\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType: imageAquascapeType,\n                lastEdited: new Date(), // Use current date\n                lastEditedBy: userEmail // Use current user or 'Unknown'\n            });\n           \n\n            setImageList(prevList => [{\n                id: newDocRef.id,\n                url,\n                imageName,\n                description: imageDescription,\n                aquascapeType:imageAquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            }, ...prevList]);\n    // Reset the description input after upload\n   \n            setImageDescription('');\n            setImageAquascapeType('');\n            setFileInputValue(''); // Reset file input value\n        } catch (error) {\n            console.error(\"Error uploading image or creating Firestore document:\", error);\n        }\n    };\n    \n    const handleFileInputChange = (event) => {\n        setImageUpload(event.target.files[0]);\n        setFileInputValue(event.target.value); // Update the file input value state\n    };\n\n    const getDocumentIdFromImageName = async (imageName) => {\n        try {\n            const q = query(collection(db, \"fishtankfurniture\"), where(\"imageName\", \"==\", imageName));\n            const querySnapshot = await getDocs(q);\n            console.log(`Documents found for image name '${imageName}':`, querySnapshot.docs.length);\n            querySnapshot.forEach(doc => console.log(doc.id, doc.data()));\n    \n            if (!querySnapshot.empty) {\n                return querySnapshot.docs[0].id;\n            } else {\n                console.log(\"No matching document found for image name:\", imageName);\n                return null;\n            }\n        } catch (error) {\n            console.error(\"Error fetching document ID:\", error);\n            return null;\n        }\n    };\n    \n\n    const deleteImage = async (imageId, imageName, isOrphan) => {\n        console.log(\"Attempting to delete image with Name:\", imageName);\n        // Ensure the image name does not contain 'Aquascape Ideas/' prefix\n        if (imageName.startsWith('Aquascape Ideas/')) {\n            imageName = imageName.replace('Aquascape Ideas/', '');\n        }\n    \n        \n    \n        const isConfirmed = window.confirm(\"Are you sure you want to delete this image?\");\n        if (isConfirmed) {\n        try {\n            const imageRef = ref(storage, `Aquascape Ideas/${imageName}`);\n            await deleteObject(imageRef);\n    \n                if (!isOrphan) {\n                    const docRef = doc(db, \"fishtankfurniture\", imageId);\n                    await deleteDoc(docRef);\n                }\n    \n                setImageList(imageList.filter(image => image.imageName !== imageName));\n                alert(\"Image deleted successfully.\");\n            } catch (error) {\n                console.error(\"Error deleting image:\", error);\n                alert(\"Failed to delete image: \" + error.message);\n            }\n        }\n    };\n    \n    const onSaveEdit = async (imageId, description, aquascapeType) => {\n        console.log(\"onSaveEdit params:\", { imageId, description, aquascapeType });\n\n\n        if (!imageId || description === undefined || aquascapeType === undefined) {\n            let missingData = '';\n            if (!imageId) missingData += 'Image ID ';\n            if (description === undefined) missingData += 'Description ';\n            if (aquascapeType === undefined) missingData += 'Aquascape Type ';\n            alert(`Cannot save changes: Missing information (${missingData.trim()})`);\n            return;\n        }\n    \n        try {\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"fishtankfurniture\", imageId);\n            await updateDoc(docRef, {\n                description: description,\n                aquascapeType: aquascapeType,\n                lastEdited: new Date(),\n                lastEditedBy: userEmail\n            });\n    \n            alert(\"Changes saved successfully!\");\n    \n            // Update the image list state\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === imageId) {\n                    return { \n                        ...image, \n                        description: description, \n                        aquascapeType: aquascapeType,\n                        lastEditedBy: userEmail, \n                        lastEdited: new Date()\n                    };\n                }\n                return image;\n            }));\n            try {\n                const docRef = doc(db, \"fishtankfurniture\", imageId);\n                const docSnapshot = await getDoc(docRef);\n                if (docSnapshot.exists()) {\n                    const imageData = docSnapshot.data();\n                    setSelectedDescription(imageData.description);\n                    setSelectedImageAquascapeType(imageData.aquascapeType);\n                    // Update last edited info if needed\n                } else {\n                    console.log(\"Document not found after update.\");\n                }\n            } catch (error) {\n                console.error(\"Error refetching the updated document:\", error);\n            }\n    \n            setIsModalOpen(true);\n            setModalEdit(false);\n    \n        } catch (error) {\n            console.error(\"Error saving changes: \", error);\n            alert(\"Failed to save changes: \" + error.message);\n        }\n    };\n    \n    \n    const ImageModal = ({ url, description, imageAquascapeType, lastEdited, onClose, onEdit }) => {\n        if (!url) return null;\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <div className=\"coral-name-label\"><b>Aquascape Type:</b></div>\n                                    <div className=\"coral-name-value\">{imageAquascapeType}</div>\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={onEdit}>Edit</button>\n                                    <button onClick={onClose}>Close</button>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <p>{description}</p>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    const ModalEdit = ({ url, description, imageAquascapeType, lastEdited, onClose, onSaveEdit, imageId }) => {\n        const [editableDescription, setEditableDescription] = useState(description);\n        const [editableAquascapeType, setEditableAquascapeType] = useState(imageAquascapeType);\n    \n        useEffect(() => {\n            setEditableDescription(description);\n            setEditableAquascapeType(imageAquascapeType);\n        }, [description, imageAquascapeType]);\n    \n        const handleSave = () => {\n            if (!editableDescription || !editableAquascapeType) {\n                alert(\"Please fill out all fields before saving.\");\n                return;\n            }\n            if (!currentImageId) {\n                alert(\"Error: Image ID is missing.\");\n                return;\n            }\n            onSaveEdit(currentImageId, editableDescription, editableAquascapeType);\n            onClose();\n        };\n    \n        return (\n            <div className=\"modal-backdrop\" onClick={onClose}>\n                <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n                    <div className=\"modal-image-container\">\n                        <img src={url} alt=\"Full Size\" />\n                    </div>\n                    <table className=\"modal-info-table\">\n                        <tbody>\n                            <tr>\n                                <td className=\"coral-name-cell\">\n                                    <p><b>Aquascape Type:</b></p>\n                                    <input \n                                        type=\"text\" \n                                        value={editableAquascapeType} \n                                        onChange={(e) => setEditableAquascapeType(e.target.value)} \n                                        className=\"modal-edit-coral-name-input\"\n                                    />\n                                </td>\n                                <td className=\"last-edited-cell\">\n                                    Last Edited: {lastEdited.lastEdited}<br />\n                                    Edited by: {lastEdited.editedBy}\n                                </td>\n                                <td className=\"modal-buttons-cell\">\n                                    <button onClick={handleSave}>Save</button>\n                                    <button onClick={onClose}>Dismiss</button> \n                                </td>\n                            </tr>\n                            <tr>\n                                <td colSpan=\"3\" className=\"modal-description-cell\">\n                                    <textarea \n                                        value={editableDescription} \n                                        onChange={(e) => setEditableDescription(e.target.value)}\n                                        className=\"modal-edit-description-input\"\n                                    ></textarea>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    };\n    \n    \n\n    const fetchImages = async () => {\n        try {\n            const fishtankfurnitureCollection = collection(db, \"fishtankfurniture\");\n            const descriptionDocs = await getDocs(fishtankfurnitureCollection);\n    \n            let images = [];\n            for (const doc of descriptionDocs.docs) {\n                const data = doc.data();\n                let lastEditedBy = data.lastEditedBy || auth.currentUser.displayName || 'Unknown';\n    \n                // Check if 'last edited by' field is missing and update the document\n                if (!data.lastEditedBy) {\n                    await updateDoc(doc.ref, { lastEditedBy });\n                }\n    \n                images.push({\n                    id: doc.id,\n                    ...data,\n                    description: data.description || '',\n                    lastEdited: data.lastEdited ? data.lastEdited.toDate() : new Date(),\n                    lastEditedBy // Use updated lastEditedBy\n                });\n            }\n    \n            // Sort images by last edited timestamp\n            images.sort((a, b) => b.lastEdited - a.lastEdited);\n    \n            setImageList(images);\n        } catch (error) {\n            console.error(\"Error fetching images:\", error);\n        }\n    };\n    \n    \n   \n\n    useEffect(() => {\n        fetchImages();\n    }, []);\n\n    useEffect(() => {\n        // Listen for auth state changes\n        const unsubscribe = auth.onAuthStateChanged(user => {\n            if (user) {\n                // User is signed in\n                setCurrentUser(user);\n            } else {\n                // User is signed out\n                setCurrentUser(null);\n            }\n        });\n    \n        // Cleanup subscription on unmount\n        return () => unsubscribe();\n    }, []);\n\n    useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n        console.log(\"Auth State Changed: \", user);\n        setCurrentUser(user);\n    });\n    return () => unsubscribe();\n}, []);\n\n\n\n    const handleDescriptionChange = (id, newDescription) => {\n        setDescriptions(prevDescriptions => ({\n            ...prevDescriptions,\n            [id]: newDescription\n        }));\n        // If the updated image is the currently selected one, update the selectedDescription\n    if (selectedImage && id === selectedImage.id) {\n        setSelectedDescription(newDescription);\n    }\n    };\n    \n\n    const saveDescription = async (id) => {\n        const description = descriptions[id];\n        if (!id || !description) {\n            alert(\"Cannot save description: No document ID found or description is empty\");\n            return;\n        }\n    \n        try {\n            // Use the state for the current user's email, fallback to 'Unknown' if not available\n            const userEmail = currentUser ? currentUser.email || 'Unknown' : 'Unknown';\n            const docRef = doc(db, \"fishtankfurniture\", id);\n            await updateDoc(docRef, {\n                description,\n                lastEditedBy: userEmail, // Use email instead of displayName\n                lastEdited: new Date()\n            });\n            alert(\"Description saved!\");\n    \n            // Update the state to reflect the change\n            setImageList(prevList => prevList.map(image => {\n                if (image.id === id) {\n                    return { ...image, description, lastEditedBy: userEmail, lastEdited: new Date() };\n                }\n                return image;\n            }));\n        } catch (error) {\n            alert(\"Failed to save description: \" + error.message);\n        }\n    };\n    \n    return (\n        <div className=\"page-main-box\">\n      <div className=\"page-inputbox\">\n        <div className=\"page-input-boxes\">\n     \n        \n        <input \n                type=\"text\" \n                id=\"AquascapeTypeInput\"  // Adding an id attribute\n                name=\"aquascapeType\"     // Adding a name attribute\n                className=\"coral-name-input\"\n                placeholder=\"Aquascape Type...\"\n                maxLength=\"30\"\n                value={imageAquascapeType}\n                onChange={handleAquascapeTypeInput}\n            />\n            <textarea\n            id=\"descriptionInput\"\n            name=\"description\"\n            className=\"description-input\"\n            placeholder=\"Enter image description (max 300 characters)\"\n            maxLength=\"255\"\n            rows=\"4\" // Sets the initial visible number of lines\n            onChange={handleDescriptionInput}\n            value={imageDescription}\n          ></textarea>\n        </div>\n        <div className=\"page-input-box2\">\n          <input\n            type=\"file\"\n            id=\"imageUpload\" // Existing id attribute\n            name=\"imageUpload\"\n            className=\"file-box\" // Adding a name attribute\n            value={fileInputValue}\n            onChange={handleFileInputChange}\n          />\n          <button className=\"page-btn-upload\" onClick={uploadImage}>\n            Upload\n          </button>\n        </div>\n      </div>\n\n      <div className=\"page-images-list\">\n        {currentImages.map((image, index) => (\n          <div key={image.imageName} className=\"page-image-container\">\n            <img\n              src={image.url}\n              className=\"page-img-grid\"\n              onClick={() => handleImageClick(image)}\n            />\n            <button\n              className=\"page-btn\"\n              onClick={() => deleteImage(image.id, image.imageName)}\n            >\n              Delete\n            </button>\n          </div>\n        ))}\n      </div>\n\n            <div className=\"pagination\">\n                <button onClick={() => setCurrentPage(prev => prev > 1 ? prev - 1 : prev)}>Prev</button>\n                <span>Page {currentPage} of {totalPages}</span>\n                <button onClick={() => setCurrentPage(prev => prev < totalPages ? prev + 1 : prev)}>Next</button>\n            </div>\n\n            {isModalOpen && (\n                <ImageModal\n                url={selectedImage} \n                description={selectedDescription} \n                imageAquascapeType={selectedImageAquascapeType}\n                lastEdited={selectedLastEdited}\n                onClose={() => setIsModalOpen(false)}\n                onEdit={handleEdit}\n                imageId={currentImageId}\n            />\n            )}\n            {isModalEdit && (\n                <ModalEdit \n                    url={selectedImage} \n                    description={selectedDescription} \n                    imageAquascapeType={selectedImageAquascapeType}\n                    lastEdited={selectedLastEdited}\n                    onSaveEdit={onSaveEdit}\n                    onClose={handleDismiss}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default FishTankFurn;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  useNavigate,\n  useLocation,\n  Routes,\n  Route,\n  Navigate,\n} from \"react-router-dom\";\nimport { auth } from \"./CoralFirebase-config\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport CoralHeader from \"./CoralHeader\";\nimport CoralFooter from \"./CoralFooter\";\nimport CoralIndex from \"./CoralIndex\";\nimport CoralHomepage from \"./CoralHomepage\";\nimport CoralSignup from \"./CoralSignup\";\nimport CoralChalice from \"./CoralChalice\";\nimport CoralMonti from \"./CoralMonti\";\nimport CoralMushrooms from \"./CoralMushrooms\";\nimport CoralNPSCorals from \"./CoralNPSCorals\";\nimport CoralScoly from \"./CoralScoly\";\nimport CoralZoas from \"./CoralZoas\";\nimport CoralAcro from \"./CoralAcro\";\nimport CoralFavia from './CoralFavia';\nimport CoralAquascape from './CoralAquascape';\nimport CoralFishTankFurn from './CoralFishTankFurn';\nimport \"./corals_page.css\";\n\nconst Coral_Main = () => {\n  const [user, setUser] = useState(null);\n  const [darkMode, setDarkMode] = useState(false); // Added state to manage dark mode\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const toggleDarkMode = () => {\n    // Define toggleDarkMode function\n    setDarkMode(!darkMode);\n    document.body.classList.toggle(\"dark-mode\");\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (currentUser) => {\n      setUser(currentUser);\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    if (!loading) {\n      // Directly consider only the first segment after `/corals/` as valid.\n      const pathSegment = location.pathname.split('/').pop();\n  \n      console.log(\"Current Path Segment:\", pathSegment);\n  \n      const allowedPathsAuthenticated = [\"homepage\", \"index\", \"scoly\", \"chalice\", \"signup\",\"monti\",\"mushroom\",\"nps\",\"zoas\",\"acro\",\"favia\",\"fishtank\",\"aquascape\"];\n      const allowedPathsUnauthenticated = [\"index\", \"signup\"];\n  \n      if (!user && !allowedPathsUnauthenticated.includes(pathSegment)) {\n        console.log(\"Unauthorized access - redirecting to index\");\n        navigate(\"/corals/index\", { replace: true });\n      } else if (user && !allowedPathsAuthenticated.includes(pathSegment)) {\n        console.log(\"Authorized but wrong path - redirecting to homepage\");\n        navigate(\"/corals/homepage\", { replace: true });\n      }\n    }\n  }, [user, location.pathname, navigate, loading]);\n  \n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"coral-main-page-container\">\n      <CoralHeader\n        user={user}\n        onToggleDarkMode={toggleDarkMode}\n        onNavigate={navigate}\n      />\n      <Routes>\n        <Route path=\"index\" element={<CoralIndex />} />\n        \n        <Route path=\"homepage\" element={user ? <CoralHomepage /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"acro\" element={user ? <CoralAcro /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"favia\" element={user ? <CoralFavia /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"chalice\" element={user ? <CoralChalice /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"scoly\" element={user ? <CoralScoly /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"monti\" element={user ? <CoralMonti /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"mushroom\" element={user ? <CoralMushrooms /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"nps\" element={user ? <CoralNPSCorals /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"zoas\" element={user ? <CoralZoas /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"fishtank\" element={user ? <CoralFishTankFurn /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"aquascape\" element={user ? <CoralAquascape /> : <Navigate replace to=\"/corals/index\" />} />\n        <Route path=\"signup\" element={<CoralSignup />} />\n        <Route path=\"*\" element={<Navigate replace to=\"/corals/index\" />} />\n      </Routes>\n      <CoralFooter />\n    </div>\n  );\n};\n\nexport default Coral_Main;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header className=\"p-3 text-bg-dark\">\n      <div className=\"container\">\n        <div className=\"d-flex flex-wrap align-items-center justify-content-center justify-content-lg-start\">\n          <a\n            href=\"/\"\n            className=\"d-flex align-items-center mb-2 mb-lg-0 text-white text-decoration-none\"\n          >\n            <svg\n              className=\"bi me-2\"\n              width=\"40\"\n              height=\"32\"\n              role=\"img\"\n              aria-label=\"Bootstrap\"\n            >\n              <use href=\"#bootstrap\"></use>\n            </svg>\n          </a>\n\n          <ul className=\"nav col-12 col-lg-auto me-lg-auto mb-2 justify-content-center mb-md-0\">\n            <li>\n              <a href=\"#\" className=\"nav-link px-2 text-secondary\">\n                Home\n              </a>\n            </li>\n            <li>\n              <a href=\"#\" className=\"nav-link px-2 text-white\">\n                About\n              </a>\n            </li>\n          </ul>\n\n          <form\n            className=\"col-12 col-lg-auto mb-3 mb-lg-0 me-lg-3\"\n            role=\"search\"\n          >\n            <input\n              type=\"search\"\n              className=\"form-control form-control-dark text-bg-dark\"\n              placeholder=\"Search...\"\n              aria-label=\"Search\"\n            />\n          </form>\n\n          <div className=\"text-end\">\n            <button type=\"button\" className=\"btn btn-outline-light me-2\">\n              Login\n            </button>\n            <button type=\"button\" className=\"btn btn-warning\">\n              Sign-up\n            </button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"container\">\n      <footer className=\"d-flex flex-wrap justify-content-between align-items-center py-3 my-4 border-top\">\n        <p className=\"col-md-4 mb-0 text-body-secondary\">\n          © 2024 Dmitri Morozov\n        </p>\n\n        <a\n          href=\"/\"\n          className=\"col-md-4 d-flex align-items-center justify-content-center mb-3 mb-md-0 me-md-auto link-body-emphasis text-decoration-none\"\n        >\n          <svg className=\"bi me-2\" width=\"40\" height=\"32\">\n            <use href=\"#bootstrap\"></use>\n          </svg>\n        </a>\n\n        <ul className=\"nav col-md-4 justify-content-end\">\n          <li className=\"nav-item\">\n            <a href=\"#\" className=\"nav-link px-2 text-body-secondary\">\n              Home\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a href=\"#\" className=\"nav-link px-2 text-body-secondary\">\n              About\n            </a>\n          </li>\n        </ul>\n      </footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React,{useState} from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport \"../../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport \"./bootstrap_page.css\";\nconst Main = () => {\n  const [openAccordion, setOpenAccordion] = useState(null);\n\n  // Function to handle accordion toggle\n  const toggleAccordion = (id) => {\n    if (openAccordion === id) {\n      setOpenAccordion(null); // If clicked on an open accordion, close it\n    } else {\n      setOpenAccordion(id); // Else open the clicked accordion\n    }\n  };\n  return (\n    <>\n      <Header />\n  \n\n      <h1 className=\"head-h1\" red>\n        8 must-know sorting algorithms\n      </h1>\n\n      <div className=\"accordion\" id=\"accordionExample\">\n        \n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className={`accordion-button ${openAccordion !== 'collapseOne' ? 'collapsed' : ''}`}\n              type=\"button\"\n              onClick={() => toggleAccordion('collapseOne')}\n              aria-expanded={openAccordion === 'collapseOne'}\n              aria-controls=\"collapseOne\"\n            >\n              Bubble Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className={`accordion-collapse collapse ${openAccordion === 'collapseOne' ? 'show' : ''}`}\n            aria-labelledby=\"headingOne\"\n          >\n            <div className=\"accordion-body\">\n              <strong>\n                Bubble sort a simple sorting algorithm that works by swapping\n                the items between them if they are in the wrong order.\n              </strong>{\" \"}\n              The worst and average-case complexity of the Bubble Sort is О(n2),\n              meaning that the data is in the opposite order we want to sort, or\n              the elements are arbitrarily distributed in the list. The\n              best-case complexity is O(n). That's the case where the data is\n              already sorted.{\" \"}\n              <p>\n                Bubble sort is used when :\n                <ul>\n                  <li>simple code is preferred;</li>\n                  <li>the complexity doesn't matter.</li>\n                </ul>\n              </p>\n              <code>{`#Bubble Sort Algorithm\n\ndef bubbleSort(data):\n    lenght = len(data)\n\n    for iIndex in range(lenght):\n        swapped = False\n\n        for jIndex in range(0, lenght - iIndex - 1):\n\n            if data[jIndex] > data[jIndex + 1]:\n                data[jIndex], data[jIndex + 1] = data[jIndex + 1], data[jIndex]\n                swapped = True\n\n        if swapped == False:\n            break\n\n    print(data)`}</code>\n              ,\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className={`accordion-button ${openAccordion !== 'collapseTwo' ? 'collapsed' : ''}`}\n              type=\"button\"\n              onClick={() => toggleAccordion('collapseTwo')}\n              aria-expanded={openAccordion === 'collapseTwo'}\n              aria-controls=\"collapseTwo\"\n            >\n              Selection Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className={`accordion-collapse collapse ${openAccordion === 'collapseTwo' ? 'show' : ''}`}\n            aria-labelledby=\"headingTwo\"\n          >\n            <div className=\"accordion-body\">\n              <strong>\n                Selection Sort is an ameliorated version of Bubble Sort because\n                of the performance.\n              </strong>{\" \"}\n              Even if they have the same worst-case performance, Selection Sort\n              performs fewer swaps. Selection sort works in one of two ways: It\n              either looks for the smallest item in the list and places it in\n              the front of the list (ensuring that the item is in its correct\n              location) or looks for the largest item and places it in the back\n              of the list.\n              <code>{`#Selection Sort Algorithm\n\ndef selectionSort(data):\n\n    for scanIndex in range(0, len(data)):\n\n        minIndex = scanIndex\n\n        for compIndex in range(scanIndex + 1, len(data)):\n            if data[compIndex] < data[minIndex]:\n                minIndex = compIndex\n\n        if minIndex != scanIndex:\n            data[scanIndex], data[minIndex] = data[minIndex], data[scanIndex]\n\n            print(data)`}</code>\n              Selection Sort has the same complexities as Bubble Sort. Selection\n              Sort is used when:\n              <ul>\n                <li>Sorting small arrays</li>\n                <li>checking off all the elements is compulsory</li>\n                <li>Less swapping is required</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className={`accordion-button ${openAccordion !== 'collapseThree' ? 'collapsed' : ''}`}\n              type=\"button\"\n              onClick={() => toggleAccordion('collapseThree')}\n              aria-expanded={openAccordion === 'collapseThree'}\n              aria-controls=\"collapseThree\"\n            >\n              Insertion Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className={`accordion-collapse collapse ${openAccordion === 'collapseThree' ? 'show' : ''}`}\n            aria-labelledby=\"headingThree\"\n          >\n            <div className=\"accordion-body\">\n              <strong>\n                Insertion is a brute-force sorting algorithm but it does fewer\n                comparisons than the Selection sort.\n              </strong>\n              <p>\n                Insertion Sort works by choosing an item and by ordering the\n                directs neighbors whether they are greater/smaller than the\n                chosen item. As the number of sorted items builds, the algorithm\n                checks new items against the sorted items and inserts the new\n                item into the right position in the list. Example :\n              </p>\n              <code>{`#Insertion Sort Algorithm\n\ndef insertionSort(data):\n\n    for scanIndex in range(1, len(data)):\n        tmp = data[scanIndex]\n\n        minIndex = scanIndex\n\n        while minIndex > 0 and tmp < data[minIndex - 1]:\n            data[minIndex] = data[minIndex - 1]\n            minIndex -= 1\n\n        data[minIndex] = tmp\n\n        print(data)`}</code>\n              <ul>\n                <li>\n                  Insertion Sort has a worst and average complexity case of\n                  O(n2). This occurs respectively when the array is sorted in\n                  reverse order and when the elements are arbitrarily organized\n                  in the array.\n                </li>\n                <li>\n                  The best-case complexity is O(n). It occurs when the data is\n                  already sorted in the desired order.\n                </li>\n                <li>Insertion Sort is used when :</li>\n                <li>There are a few elements left to sort;</li>\n                <li>The array is small.</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingFour\">\n            <button\n              className={`accordion-button ${openAccordion !== 'collapseFour' ? 'collapsed' : ''}`}\n              type=\"button\"\n              onClick={() => toggleAccordion('collapseFour')}\n              aria-expanded={openAccordion === 'collapseFour'}\n              aria-controls=\"collapseFour\"\n            >\n              QuickSort\n            </button>\n          </h2>\n          <div\n            id=\"collapseFour\"\n            className={`accordion-collapse collapse ${openAccordion === 'collapseFour' ? 'show' : ''}`}\n            aria-labelledby=\"headingFour\"\n          >\n            <div className=\"accordion-body\">\n              <strong>\n                QuickSort is an efficient sorting algorithm. It uses the\n                divide-conquer approach to split the array into sub-arrays that\n                is recursively called to sort the elements.\n              </strong>{\" \"}\n              <p>\n                Implement a QuickSort algorithm requires to choose a pivot, then\n                split the array into two sub-arrays according to the pivot, then\n                arrange them following if they are greater/smaller than the\n                pivot. Then we sort the two sub-arrays and repeat the process\n                again.\n              </p>\n              <code>{`#Quick Sort Algorithm\n\n\ndef quickSort(data, left, right):\n    if right<= left:\n        return \n    else:\n        pivot = partition(data, left, right)\n        quickSort(data, left, pivot - 1)\n        quickSort(data, pivot + 1, right)\n\n    return data\n\ndef partition(data, left, right):\n    \"\"\"This function chooses a pivot point that dertermines the left and right side of the sort\"\"\"\n    pivot = data[left]\n    leftIndex = left + 1\n    rightIndex = right\n\n    while True:\n        while leftIndex <= rightIndex and data[leftIndex] <= pivot:\n            leftIndex += 1\n        while rightIndex >= leftIndex and data[rightIndex] >= pivot:\n            rightIndex -= 1\n        if rightIndex <= leftIndex:\n            break\n        data[leftIndex], data[rightIndex] = data[rightIndex], data [leftIndex]\n        print(data)\n\n    data[left], data[rightIndex] = data[rightIndex], data[left]\n    print(data)\n\n    return rightIndex`}</code>\n              <ul>\n                <li>\n                  QuickSort has worst-case complexity of O(n2). It occurs when\n                  the pivot element picked is always either the greatest or the\n                  smallest element.\n                </li>\n                <li>\n                  The best-case and average-case complexity are O(n*log(n)). It\n                  occurs when the pivot element is always the middle element or\n                  near to the middle element.\n                </li>\n                <li>QuickSort is used when :</li>\n                <li>Recursion is needed and supported;</li>\n                <li>The array is small;</li>\n                <li>There are a few elements left to sort.</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingFive\">\n            <button\n              className={`accordion-button ${openAccordion !== 'collapseFive' ? 'collapsed' : ''}`}\n              type=\"button\"\n              onClick={() => toggleAccordion('collapseFive')}\n              aria-expanded={openAccordion === 'collapseFive'}\n              aria-controls=\"collapseFive\"\n            >\n              MergeSort\n            </button>\n          </h2>\n          <div\n            id=\"collapseFive\"\n            className={`accordion-collapse collapse ${openAccordion === 'collapseFive' ? 'show' : ''}`}\n            aria-labelledby=\"headingFive\"\n          >\n            <div className=\"accordion-body\">\n              <p>\n                A Mergesort works by applying the divide and conquer approach.\n                The sort begins by breaking the dataset into individual pieces\n                and sorting the pieces. It then merges the pieces in a manner\n                that ensures that it has sorted the merged piece.\n              </p>\n              <p>\n                The sorting and merging continue until the entire dataset is\n                again a single piece\n              </p>\n              <p>\n                An example of a merge sort. First divide the list into the\n                smallest unit (1 element), then compare each element with the\n                adjacent list to sort and merge the two adjacent lists. Finally,\n                all the elements are sorted and merged.\n              </p>\n              <code>\n                {`#Merge Sort Algorithm\n\ndef mergeSort(data):\n    \"\"\"This function determines whether the list is broken\n        into individual parts\"\"\"\n\n    if len(data) < 2:\n        return data\n\n    middle = len(data)//2\n\n    # We break the list in two parts\n    left = mergeSort(data[:middle])\n    right = mergeSort(data[middle:])\n\n    # Merge the two sorted parts into a larger piece.\n\n    print(\"The left side is: \", left)\n    print(\"The right side is: \", right)\n\n    merged = merge(left, right)\n\n    print(\"Merged \", merged)\n    return merged\ndef merge(left, right):\n    \"\"\"When left side/right side is empty, \n    It means that this is an individual item and is already sorted.\"\"\"\n\n    #We make sure the right/left side is not empty\n    #meaning that it's an individual item and it's already sorted.\n    if not len(left):\n        return left\n\n    if not len(right):\n        return right\n\n    result = []\n    leftIndex = 0\n    rightIndex = 0\n    totalLen = len(left) + len(right)\n\n    #\n    while (len(result) < totalLen):\n\n        #Perform the required comparisons and merge the two parts\n\n        if left[leftIndex] < right[rightIndex]:\n            result.append(left[leftIndex])\n            leftIndex += 1\n        else:\n            result.append(right[rightIndex])\n            rightIndex += 1\n\n        if leftIndex == len(left) or rightIndex == len(right):\n            result.extend(left[leftIndex:] or right[rightIndex:])\n\n            break\n\n    return result`}\n              </code>\n              <p>\n                MergeSort has worst-case and average-case complexity of\n                O(n*log(n)) which makes it fastest than some of the other\n                sorting algorithms.\n              </p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingSix\">\n            <button\n              className={`accordion-button ${openAccordion !== 'collapseSix' ? 'collapsed' : ''}`}\n              type=\"button\"\n              onClick={() => toggleAccordion('collapseSix')}\n              aria-expanded={openAccordion === 'collapseSix'}\n              aria-controls=\"collapseSix\"\n            >\n              Bucket Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseSix\"\n            className={`accordion-collapse collapse ${openAccordion === 'collapseSix' ? 'show' : ''}`}\n            aria-labelledby=\"headingSix\"\n          >\n            <div className=\"accordion-body\">\n              <p>\n                Bucket Sort algorithm work by dividing the array into buckets.\n                Then the elements in each bucket are sorted using any sorting\n                algorithms or by recursively calling the Bucket Sort algorithm.\n              </p>\n              <p>\n                The process of bucket sort can be view as a scatter-gather\n                approach. The elements are first scattered into buckets then the\n                elements of buckets are sorted. Finally, the elements are\n                gathered in order.\n              </p>\n              <code>\n                {`#Bucket Sort Algorithm\n\ndef bucketSort(data):\n    bucket = []\n\n    for iIndex in range(len(data)):\n        bucket.append([])\n\n    for jIndex in data:\n        index_bucket = int(10 * jIndex)\n        bucket[index_bucket].append(jIndex)\n        print(bucket)\n\n    for iIndex in range(len(data)):\n#I used the built-in method sorted() to sort the array. \n        bucket[iIndex] = sorted(bucket[iIndex])\n\n        kIndex = 0\n\n        for iIndex in range(len(data)):\n\n            for jIndex in range(len(bucket[iIndex])):\n                data\\[kIndex] = bucket[iIndex\\][jIndex]\n                kIndex += 1\n\n    print(data)`}\n              </code>\n              <p>\n                Bucket Sort algorithm has the worst-case complexity of O(n2). It\n                occurs when elements in the same range are put in the same\n                bucket, resulting in more elements in some buckets than others.\n                Also, it can be even worse when an inappropriate sorting\n                algorithm is used to sort elements in the buckets.\n              </p>\n              <p>\n                The best-case complexity is O(n+k). It occurs when the elements\n                are uniformly distributed in the buckets with a nearly equal\n                number of elements in each bucket. It can even be better if the\n                array is already sorted.\n              </p>\n              <p>\n                The average-case complexity is O(n). It occurs when elements are\n                randomly distributed in the array.\n              </p>\n              Bucket Sort is used when :\n              <ul>\n                <li>Bucket Sort is used when :</li>\n                <li>Input is uniformly distributed over a range.</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingSeven\">\n            <button\n              className={`accordion-button ${openAccordion !== 'collapseSeven' ? 'collapsed' : ''}`}\n              type=\"button\"\n              onClick={() => toggleAccordion('collapseSeven')}\n              aria-expanded={openAccordion === 'collapseSeven'}\n              aria-controls=\"collapseSeven\"\n            >\n              Shell Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseSeven\"\n            className={`accordion-collapse collapse ${openAccordion === 'collapseSeven' ? 'show' : ''}`}\n            aria-labelledby=\"headingSeven\"\n          >\n            <div className=\"accordion-body\">\n              <p>\n                Shell Sort is a variation of Insertion Sort. With this\n                algorithm, the array is sorted at a specific interval based on\n                the chosen sequence. The interval between the elements is\n                gradually decreased based on the sequence used. The performance\n                of the shell sort depends on the type of sequence used for a\n                given input array.\n              </p>{\" \"}\n              <code>\n                {`#Shell Sort Algorithm\n\ndef shellSort(data, length):\n\n    gap = length//2\n\n    while gap > 0:\n        for iIndex in range(gap, length):\n\n            temp = data[iIndex]\n\n            jIndex = iIndex\n\n            while jIndex >= gap and data[jIndex - gap] > temp:\n                data[jIndex] = data[jIndex - gap]\n\n                jIndex -= gap\n\n            data[jIndex] = temp\n\n        gap //= 2\n\n    print(data)`}\n              </code>\n              <ul>\n                <li>\n                  Shell Sort has worst-case complexity less or equal than O(n2).\n                </li>\n                <li>\n                  Shell Sort has average-case and best-case complexity of\n                  O(n*log(n)).\n                </li>\n                <li>Shell Sort is used when:</li>\n                <li>Recursion exceeds a limit.</li>\n                <li>\n                  Insertion doesn't perform well when close elements are far.\n                </li>\n              </ul>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingEight\">\n            <button\n              className={`accordion-button ${openAccordion !== 'collapseEight' ? 'collapsed' : ''}`}\n              type=\"button\"\n              onClick={() => toggleAccordion('collapseEight')}\n              aria-expanded={openAccordion === 'collapseEight'}\n              aria-controls=\"collapseEight\"\n            >\n              Heap Sort\n            </button>\n          </h2>\n          <div\n            id=\"collapseEight\"\n            className={`accordion-collapse collapse ${openAccordion === 'collapseEight' ? 'show' : ''}`}\n            aria-labelledby=\"headingEight\"\n          >\n            <div className=\"accordion-body\">\n              <p>\n                Heap Sort is one of the best sorting methods being in-place and\n                with no quadratic worst-case complexity. Heap Sort uses a heap\n                data structure. A heap is a complete binary tree. It also\n                verifies such rules as:\n              </p>\n              <ul>\n                <li>children are smaller than parents;</li>\n                <li>\n                  The largest/smallest element is at the root of the heap,\n                  depending on the way you sorted it.\n                </li>\n              </ul>\n              <p>\n                To make a heap sort algorithm, we must create a heap of the\n                array first. When done, we can now write the Heap Sort\n                algorithm. The advantage with Heap Sort is that the value at the\n                root is always greater than all value, so we can put it at the\n                end of the sorted array, remove it from the heap, and then\n                heapify the binary tree again to have the greater value at the\n                top again.\n              </p>\n              <code>\n                {`#Heap Sort Algorithm\n\ndef createHeap(data, length, index):\n\n    largest = index\n    left = 2 * index + 1\n    right = 2 * index + 2\n\n    if left < length and data[index] < data[left]:\n        largest = left\n\n    if right < length and data[largest] < data[right]:\n        largest = right\n\n    if largest != index:\n        data[index], data[largest] = data[largest], data[index]\n        createHeap(data, length, largest)\n\ndef heapSort(data):\n    length = len(data)\n\n    #We build max heap\n    for index in range(length, 0, -1):\n        createHeap(data, length, index)\n\n    for index in range(length -1, 0, -1):\n        data[index], data[0] = data[0], data[index]\n\n        createHeap(data, index, 0)\n\n    print(data)`}\n              </code>\n              <p>\n                Heap Sort has O(n*log(n)) time complexities for all the cases (\n                best case, average case, and worst case) making it one of the\n                most used sorting algorithms.\n              </p>\n              <p>\n                Heapsort is great when you need to know just the \"smallest\" (or\n                \"largest\") of a collection of items, without the overhead of\n                keeping the remaining items in sorted order. For example, a\n                Priority Queue.\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n};\n\nexport default Main;\n","// import React,{ useState, useEffect } from \"react\"\nimport React from \"react\";\nimport Main from \"./Main_Page/Main\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport BlackJack from \"./BlackJack/BlackJack\";\nimport Corals from \"./Corals_Page/CoralMain\";\nimport Bootstrap from './Bootstrap_Page/Main';\nimport './Corals_Page/corals_page.css';\nimport './Main_Page/main.css';\n\n\n\n\nexport default function App() {\n  \n  return (\n    <BrowserRouter>\n      <Routes>\n        \n        <Route path=\"/blackjack\" element={<BlackJack />} />\n        <Route path=\"/corals/*\" element={<Corals />} />\n        <Route path=\"/bootstrap\" element={<Bootstrap />} />\n        <Route path=\"/\" element={<Main />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \nimport './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\nimport './App.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}