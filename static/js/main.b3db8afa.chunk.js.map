{"version":3,"sources":["BlackJack/images/stand-button2.png","BlackJack/images/hit-button2.png","BlackJack/images/logo-blackjack.png","BlackJack/images/vegas-back2.png","BlackJack/images/ace_of_hearts.png","BlackJack/images/2_of_hearts.png","BlackJack/images/3_of_hearts.png","BlackJack/images/4_of_hearts.png","BlackJack/images/5_of_hearts.png","BlackJack/images/6_of_hearts.png","BlackJack/images/7_of_hearts.png","BlackJack/images/8_of_hearts.png","BlackJack/images/9_of_hearts.png","BlackJack/images/10_of_hearts.png","BlackJack/images/jack_of_hearts.png","BlackJack/images/queen_of_hearts.png","BlackJack/images/king_of_hearts.png","BlackJack/images/ace_of_diamonds.png","BlackJack/images/2_of_diamonds.png","BlackJack/images/3_of_diamonds.png","BlackJack/images/4_of_diamonds.png","BlackJack/images/5_of_diamonds.png","BlackJack/images/6_of_diamonds.png","BlackJack/images/7_of_diamonds.png","BlackJack/images/8_of_diamonds.png","BlackJack/images/9_of_diamonds.png","BlackJack/images/10_of_diamonds.png","BlackJack/images/jack_of_diamonds.png","BlackJack/images/queen_of_diamonds.png","BlackJack/images/king_of_diamonds.png","BlackJack/images/ace_of_spades.png","BlackJack/images/2_of_spades.png","BlackJack/images/3_of_spades.png","BlackJack/images/4_of_spades.png","BlackJack/images/5_of_spades.png","BlackJack/images/6_of_spades.png","BlackJack/images/7_of_spades.png","BlackJack/images/8_of_spades.png","BlackJack/images/9_of_spades.png","BlackJack/images/10_of_spades.png","BlackJack/images/jack_of_spades.png","BlackJack/images/queen_of_spades.png","BlackJack/images/king_of_spades.png","BlackJack/images/ace_of_clubs.png","BlackJack/images/2_of_clubs.png","BlackJack/images/3_of_clubs.png","BlackJack/images/4_of_clubs.png","BlackJack/images/5_of_clubs.png","BlackJack/images/6_of_clubs.png","BlackJack/images/7_of_clubs.png","BlackJack/images/8_of_clubs.png","BlackJack/images/9_of_clubs.png","BlackJack/images/10_of_clubs.png","BlackJack/images/jack_of_clubs.png","BlackJack/images/queen_of_clubs.png","BlackJack/images/king_of_clubs.png","BlackJack/images/5-chip-v2.png","BlackJack/images/10-chip-v2.png","BlackJack/images/25-chip-v2.png","BlackJack/images/50-chip-v2.png","BlackJack/images/100-chip-v2.png","BlackJack/images/250-chip-v2.png","BlackJack/images/double-button2.png","BlackJack/images/clear-button2.png","BlackJack/images/bet-button2.png","BlackJack/images/split-button.png","assets/images/codepen.svg","assets/images/linkedin.svg","assets/images/new-twitter-logo.svg","assets/images/FacebookIcon.svg","assets/images/icons8-instagram.svg","assets/images/GitHubIcon.svg","Main_Page/Header.js","Main_Page/Body.js","Main_Page/Main.js","Main_Page/Utilities.js","BlackJack/Deck.js","BlackJack/Card.js","BlackJack/Player.js","BlackJack/Controls.js","BlackJack/Header.js","BlackJack/GameRecap.js","BlackJack/GameHistory.js","BlackJack/GameBoard.js","BlackJack/BlackJack.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Header","_ref","activeLink","setActiveLink","handleLinkClick","e","linkName","preventDefault","window","location","hash","React","createElement","Fragment","className","id","href","onClick","FontAwesomeIcon","icon","faGithub","faLinkedin","faCodepen","faSquareInstagram","faSquareXTwitter","faSquareFacebook","Body","Link","to","src","bjlogo","alt","role","aria-label","Main","useState","spotlightPosition","setSpotlightPosition","x","y","useEffect","debouncedHandleScroll","func","wait","timeout","immediate","arguments","length","undefined","_len","args","Array","_key","context","this","later","apply","callNow","clearTimeout","setTimeout","debounce","handleScroll","currentActiveLink","scrollPosition","scrollY","forEach","sectionId","sectionEl","document","getElementById","sectionTop","offsetTop","sectionHeight","offsetHeight","addEventListener","removeEventListener","updateSpotlightPosition","clientX","clientY","style","position","top","left","right","bottom","background","concat","pointerEvents","zIndex","Deck","constructor","cards","createDeck","suits","ranks","deck","suit","rank","push","shuffleDeck","i","random","Math","floor","drawCard","pop","cardImages","heartsAce","heartsTwo","heartsThree","heartsFour","heartsFive","heartsSix","heartsSeven","heartsEight","heartsNine","heartsTen","heartsJack","heartsQueen","heartsKing","diamondsAce","diamondsTwo","diamondsThree","diamondsFour","diamondsFive","diamondsSix","diamondsSeven","diamondsEight","diamondsNine","diamondsTen","diamondsJack","diamondsQueen","diamondsKing","spadesAce","spadesTwo","spadesThree","spadesFour","spadesFive","spadesSix","spadesSeven","spadesEight","spadesNine","spadesTen","spadesJack","spadesQueen","spadesKing","clubsAce","clubsTwo","clubsThree","clubsFour","clubsFive","clubsSix","clubsSeven","clubsEight","clubsNine","clubsTen","clubsJack","clubsQueen","clubsKing","cardBack","Card","isFaceDown","Player","hand","isDealer","map","card","index","key","Controls","onNewGame","handleStand","handleDouble","handleHit","gameRunning","onBetPlaced","bet","buttonsHidden","handleChipClick","standPressed","handleSplit","splitAvailable","hitPressed","twoHands","setPreviousBet","clearBet","previousBet","setBet","setBetChips","playerChips","chips","value","img","chip5","chip10","chip25","chip50","chip100","chip250","btnDouble","title","cursor","btnStand","btnHit","btnSplit","btnBet","btnClear","height","overflow","visibility","display","gap","justifyContent","transform","chip","event","playerHandValue","dealerHandValue","result","progressBarWidth","callSettings","width","GameRecap","gameResultsCount","results","fontSize","totalGamesPlayed","gamesWon","gamesLoss","numberOfTie","numberOfBusts","numberOfBlackJacksByPlayer","numberOfBlackJacksByDealer","numberOfSplitsAvailable","numberOfsplitsPlayed","totalAmountOfBetsLost","numberOfWinsWith2Cards","totalAmountOfBets","totalAmountOfBetsWon","GameHistory","gameRoundsHistory","slice","reverse","round","roundNumber","dealerHand","join","playerHand","outcome","GameBoard","onGameRunningChange","showMessages","setShowMessages","messages","setMessages","clickCount","setClickCount","handleSettings","setHandleSettings","setDeck","setDealerHand","dealerHandText","setDealerHandText","setPlayerHand","playerHandText","setPlayerHandText","setGameRunning","setButtonsHidden","setPlayerHandValue","setDealerHandValue","setPlayerChips","gameMessage","setGameMessage","gameOutcome","setGameOutcome","gameOutcome1","setGameOutcome1","gameOutcome2","setGameOutcome2","showScores","setShowScores","endGameTimeout","useRef","gamePause","setGamePause","betChips","totalChipTypes","Object","keys","totalWidth","dealerFirstCardValue","setDealerFirstCardValue","isFirstRender","setStandPressed","setSplitAvailable","playerHand1","setPlayerHand1","playerHand2","setPlayerHand2","setTwoHands","playerHand1Value","setPlayerHand1Value","playerHand2Value","setPlayerHand2Value","setHitPressed","betHand1","setBetHand1","betHand2","setBetHand2","hand1TurnFinished","setHand1TurnFinished","hand2TurnFinished","setHand2TurnFinished","splitPressed","setSplitPressed","gamesCount","setGamesCount","setResult","setProgressBarWidth","setRoundNumber","roundOutcome","setRoundOutcome","setGameRoundsHistory","setGameResultsCount","numberOfDoubles","cardToString","convertHandToText","playerWins","prevState","playerLoss","playerPush","playerBlackJack","dealerBlackJack","playerBusts","winWithOutHit","currentBet","playerBetsWon","betWon","betsWon","playerBetsLost","betLost","betsLost","newBet","sendingPreviousBet","prev","prevBet","prevChips","asignPreviousBet","endGame","roundResults","newRoundResults","prevHistory","prevRoundNumber","prevResult","count","current","newHandValue","updatedDealerHand","updatedDealerHandValue","calculateHandValue","drawCardforDealer","newCard","newHand","finishDealerTurn","finalDealerHand","finalDealerHandValue","outcome1","outcome2","newOutcome","updatedPlayerHand1","updatedPlayerHand2","updatedPlayerHand","total","aceCount","newPlayerHandText","newDealerHandText","newWidth","timeoutId","handleGameResult","splitHand1","betOneHand","bet1","bet2","betOutcome","bet1Outcome","bet2Outcome","newOutcomeMessage","newOutcomeMessage1","newOutcomeMessage2","twoHandsPosibilities","cardValues","j","cardValue1","cardValue2","message","stopPropagation","entries","_ref2","chipType","imgSrc","from","_","chipIndex","replace","console","log","newPlayerHandValue","handleNewGame","newDeck","playerFirstCard","playerSecondCard","dealerFirstCard","dealerSecondCard","playerFirstCardValue","playerSecondCardValue","dealerHandValueOneCard","handsPosibilities","playerCard1Value","playerCard2Value","dealerCard1Value","dCard1Value","pCard1Value","pCard2Value","winningDealerCardValue","cardCounts","totalWinningCards","totalCardsRemaining","reduce","acc","safeCardsTotal","currentHandValue","valueToIndex","maxSafeValue","secondCardIndex","possibleDealerValueAfterSecondCard","thirdCardIndex","finalDealerValue","probabilityOfWinningW3cards","toFixed","probabilityOfNotBusting","numberOfWinningCards","probabilityOfWinning","parseFloat","amount","currentChips","newChips","playerHand1SecondCard","playerHand2SecondCard","BlackJack","isLoading","setIsLoading","opacity","setOpacity","isGameActive","setIsGameActive","fadeOutTimer","removeOverlayTimer","App","BrowserRouter","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,iBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,sDCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,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","file":"static/js/main.b3db8afa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stand-button2.b6985f69.png\";","module.exports = __webpack_public_path__ + \"static/media/hit-button2.2121fae0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-blackjack.96aa3714.png\";","module.exports = __webpack_public_path__ + \"static/media/vegas-back2.6fd38ed5.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_hearts.41453bfa.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_hearts.f97ad85b.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_hearts.1c16fe10.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_hearts.5ad913da.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_hearts.8f6a2068.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_hearts.9cd2258c.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_hearts.a9afa10f.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_hearts.e6c01b13.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_hearts.cdb8fda5.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_hearts.2e6327a6.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_hearts.260cdba6.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_hearts.cf894646.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_hearts.37b5b9d7.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_diamonds.60b16fda.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_diamonds.0b5b5249.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_diamonds.b529e1c1.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_diamonds.58bd0a63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_diamonds.e27b4b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_diamonds.ee5053d4.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_diamonds.df3e8e93.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_diamonds.8afee604.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_diamonds.86608eb9.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_diamonds.4324d712.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_diamonds.ac2092c1.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_diamonds.d5647c19.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_diamonds.1a5882a6.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_spades.ce4f163f.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_spades.2354275d.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_spades.ad02dc95.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_spades.df185c63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_spades.aa8a0720.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_spades.5d221b2a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_spades.c0f5e5f9.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_spades.74766755.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_spades.e5b29fde.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_spades.2401fe36.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_spades.92aff044.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_spades.6d100fc3.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_spades.9b18a729.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_clubs.07d1c180.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_clubs.c83a7af4.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_clubs.23a7a6ac.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_clubs.02deab49.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_clubs.3781bf44.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_clubs.9c2fdf6a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_clubs.112be1df.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_clubs.6ed0b85e.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_clubs.784ea770.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_clubs.c29b28f3.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_clubs.1861c1e4.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_clubs.9e84dd75.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_clubs.2ad9bff3.png\";","module.exports = __webpack_public_path__ + \"static/media/5-chip-v2.5a524f75.png\";","module.exports = __webpack_public_path__ + \"static/media/10-chip-v2.3a023e24.png\";","module.exports = __webpack_public_path__ + \"static/media/25-chip-v2.c7981237.png\";","module.exports = __webpack_public_path__ + \"static/media/50-chip-v2.b270a5eb.png\";","module.exports = __webpack_public_path__ + \"static/media/100-chip-v2.56f3f00f.png\";","module.exports = __webpack_public_path__ + \"static/media/250-chip-v2.b303ef66.png\";","module.exports = __webpack_public_path__ + \"static/media/double-button2.ae841ef6.png\";","module.exports = __webpack_public_path__ + \"static/media/clear-button2.00626382.png\";","module.exports = __webpack_public_path__ + \"static/media/bet-button2.0ae68190.png\";","module.exports = __webpack_public_path__ + \"static/media/split-button.97e0472c.png\";","module.exports = __webpack_public_path__ + \"static/media/codepen.59a86445.svg\";","module.exports = __webpack_public_path__ + \"static/media/linkedin.2ed42d14.svg\";","module.exports = __webpack_public_path__ + \"static/media/new-twitter-logo.25bfe418.svg\";","module.exports = __webpack_public_path__ + \"static/media/FacebookIcon.e95a77ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-instagram.b6c744ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/GitHubIcon.c9140343.svg\";","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport imagepath1 from \"../assets/images/codepen.svg\"\nimport imagepath2 from \"../assets/images/linkedin.svg\"\nimport imagepath3 from \"../assets/images/new-twitter-logo.svg\"\nimport imagepath4 from \"../assets/images/FacebookIcon.svg\"\nimport imagepath5 from \"../assets/images/icons8-instagram.svg\"\nimport imagepath6 from \"../assets/images/GitHubIcon.svg\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSquareXTwitter } from '@fortawesome/free-brands-svg-icons';\nimport { faSquareFacebook } from '@fortawesome/free-brands-svg-icons';\nimport { faSquareInstagram } from '@fortawesome/free-brands-svg-icons';\nimport { faCodepen } from '@fortawesome/free-brands-svg-icons';\nimport { faLinkedin } from '@fortawesome/free-brands-svg-icons';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\n\nconst Header = ({activeLink, setActiveLink}) => {\n  const handleLinkClick = (e, linkName) => {\n    e.preventDefault(); // Prevent default anchor link behavior\n    setActiveLink(linkName);\n    window.location.hash = linkName;\n  };\n  return (\n    <>\n    <div className='header-container'>\n        \n        <div className='page1'>\n                <div className='header-box'><h1 className='header-h1'><b>Dmitri Morozov</b></h1></div>\n                <div className='textbox-h5'><h5 className='header-h5'><b>Junior Software Engineer</b></h5></div>\n                <div className='textbox-p1'>I build pixel-perfect, engaging, and accessible digital experiences.</div>\n\n                <div className='local-links-box'>\n                    <div className='header-links'id='header-link-about'>\n                      <a href=\"#about\" \n                      onClick={(e) => handleLinkClick(e,'about')}\n                      className={activeLink === 'about' ? 'active-link' : ''}>ABOUT</a>\n                    </div>\n                    <div className='header-links'id='header-link-experience'>\n                      <a href=\"#experience\" \n                      onClick={(e) => handleLinkClick(e,'experience')}\n                      className={activeLink === 'experience' ? 'active-link' : ''}>EXPERIENCE</a>\n                    </div>\n                    <div className='header-links'id='header-link-projects'>\n                      <a href=\"#projects\" \n                      onClick={(e) => handleLinkClick(e,'projects')}\n                      className={activeLink === 'projects' ? 'active-link' : ''}>PROJECTS</a>\n                    </div>\n                    <div className='header-links'>\n                    </div>\n                    \n                </div>\n            \n            <div className=\"social-icons-box\">\n            <div className=\"social-icons\">\n                <a href=\"https://github.com/dmitrim80\">\n                  <FontAwesomeIcon icon={faGithub} />\n                </a>\n                <a href=\"https://www.linkedin.com/in/dmitri-morozov-260b2920/\">\n                  <FontAwesomeIcon icon={faLinkedin} />\n                </a>\n                <a href=\"https://codepen.io/dmitrim80\">\n                  <FontAwesomeIcon icon={faCodepen} />\n                </a>\n                <a href=\"http://www.instagram.com/dmitrim80\">\n                  <FontAwesomeIcon icon={faSquareInstagram} />\n                </a>\n                <a href=\"http://www.twitter.com/DmitriM80\">\n                  <FontAwesomeIcon icon={faSquareXTwitter} />\n                </a>\n                <a href=\"http://www.facebook.com/dmitrim80\">\n                  <FontAwesomeIcon icon={faSquareFacebook} />\n                </a>\n                \n                \n            </div>\n        </div>\n        </div>\n\n        \n\n    </div>\n    \n    \n    </>\n  )\n}\n\nexport default Header","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport bjlogo from \"../BlackJack/images/logo-blackjack.png\";\n\nconst Body = () => {\n  return (\n    <>\n      <div className=\"body-container\">\n        <div className=\"more-pages\">\n          <section id=\"about\">\n            <p className=\"header-p\">\n            With a Bachelor of Science in Computer Science, my academic and\n            internship experiences have equipped me with a solid foundation in\n            software development, data structures, and algorithms. I am eager to\n            apply my knowledge and skills in a professional setting as an\n            Entry-Level Software Engineer, crafting solutions that make a\n            difference.\n            </p>\n            \n            <div className=\"headline-box\">About Me</div>\n            <div>\n              As a graduate with a passion for software engineering, I have\n              always been fascinated by the ability of code to solve complex\n              problems and create impactful digital experiences. My journey in\n              computer science has been marked by a relentless pursuit of\n              knowledge, from mastering programming languages to understanding\n              the nuances of user-centric design. Outside the classroom and\n              coding environment, I'm an avid sports fan, music and theater\n              lover, and an enthusiast of marine biology and aquatic life. These\n              diverse interests have shaped my approach to problem-solving,\n              fostering a unique blend of creativity, persistence, and attention\n              to detail.\n            </div>\n          </section>\n\n          <section id=\"experience\">\n            <div className=\"headline-box\">Experience</div>\n            <div>\n              Throughout my academic career, I have undertaken various projects\n              and internships that have allowed me to apply theoretical\n              knowledge in practical settings. These experiences have honed my\n              skills in software development, project management, and team\n              collaboration. I've contributed to software projects from concept\n              to deployment, ensuring that each solution is not only functional\n              but also meets the highest standards of quality and user\n              experience.\n            </div>\n          </section>\n\n          <section id=\"projects\">\n            \n            <ol className=\"projects-list\">\n            \n            <Link className=\"project-link\" to=\"/blackjack\"> \n              <li>\n                <div className=\"project-container\">\n                  <div className=\"overLay-project-container\"></div>\n                  <header className=\"header-time\">2024 — Present</header>\n                  <div className=\"project-main-content\">\n                    <p>\n                        <img \n                            src={bjlogo}\n                            className=\"project-img\"\n                            alt=\"logo-blackjack\"\n                        /> \n                        <span className=\"project-header\">BlackJack Game</span>\n                        <span \n                            id=\"project-arrow\"\n                            role=\"img\"\n                            aria-label=\"Link to project\">\n                        ↗</span>\n                    </p>  \n                    <p className=\"project-description\">\n                    As part of my capstone project, I developed a fully-functional\n                BlackJack game. This project allowed me to apply and showcase my\n                proficiency in JavaScript, HTML, and CSS, creating a game that\n                is not only enjoyable but also visually appealing and\n                accessible. Responsibilities included: Designing and\n                implementing game logic to ensure a seamless and engaging user\n                experience. Utilizing React for the UI to create a dynamic and\n                responsive design. Ensuring the application's performance and\n                security using Firebase as a backend service. Collaborating with\n                peers for code reviews and optimizations, emphasizing clean,\n                maintainable code.\n                    </p>\n\n                    <ul\n                      className=\"skill-elements\"\n                      aria-label=\"Technologies used\"\n                    >\n                      <li>\n                        <div className=\"skill-e\">JavaScript</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">React</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">CSS</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">HTML</div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </li>\n              </Link>\n\n              <Link className=\"project-link\" to=\"/\"> \n              <li>\n                <div className=\"project-container\">\n                  <div className=\"overLay-project-container\"></div>\n                  <header className=\"header-time\">2023 — Present</header>\n                  <div className=\"project-main-content\">\n                  <p id=\"project-head\">\n                        \n                        <span className=\"project-header\">Coral Database Website</span>\n                        <span \n                            id=\"project-arrow\"\n                            role=\"img\"\n                            aria-label=\"Link to project\">\n                        ↗</span>\n                    </p>  \n                    <p className=\"project-description\">\n                    Developed a vibrant website designed for marine-life enthusiasts to share and explore images of diverse coral species. This platform utilizes Google's robust database services for secure image storage, complete with user authentication to ensure privacy and safety. Users can upload and download images, update descriptions, curate personal favorites, and share their discoveries with the community. The project is actively evolving, with ongoing enhancements to enrich user experience and interaction.\n                    </p>\n\n                    <ul\n                      className=\"skill-elements\"\n                      aria-label=\"Technologies used\"\n                    >\n                      <li>\n                        <div className=\"skill-e\">JavaScript</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">React</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">CSS</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">HTML</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">Firebase</div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </li>\n              </Link>\n              <Link className=\"project-link\" to=\"/\"> \n              <li>\n                <div className=\"project-container\">\n                  <div className=\"overLay-project-container\"></div>\n                  <header className=\"header-time\">July 2023 — Dec 2023</header>\n                  <div className=\"project-main-content\">\n                    <p id=\"project-head\">\n                        \n                        <span className=\"project-header\">Casino Game</span>\n                        <span \n                            id=\"project-arrow\"\n                            role=\"img\"\n                            aria-label=\"Link to project\">\n                        ↗</span>\n                    </p>  \n                    <p className=\"project-description\">\n                    Dive into the sleek world of app development with our Swift-based casino game! Enjoy smooth, intuitive gameplay on your iOS device, featuring rich graphics and seamless performance. Perfect for gamers looking to experience top-tier casino action on the go.\n                    </p>\n\n                    <ul\n                      className=\"skill-elements\"\n                      aria-label=\"Technologies used\"\n                    >\n                      <li>\n                        <div className=\"skill-e\">Swift</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">Firebase</div>\n                      </li>\n                      <li>\n                        <div className=\"skill-e\">Firestore</div>\n                      </li>\n                    </ul>\n                  </div>\n                </div>\n              </li>\n              </Link>\n            </ol>\n          </section>\n\n          <section id=\"personal\">\n            <div className=\"headline-box\">Personal Interests</div>\n            <div>\n              In addition to my passion for software engineering, I maintain an\n              active lifestyle and diverse interests outside of work. Whether\n              it's hitting the gym, participating in rowing competitions,\n              cheering for my favorite football and basketball teams, or\n              exploring the wonders of marine life, these activities reflect my\n              enthusiasm for life and learning. My love for music and theater\n              also speaks to my appreciation for creativity and expression,\n              qualities that I bring to every project I undertake.\n            </div>\n          </section>\n\n          <section id=\"contact\">\n            <div className=\"headline-box\">Contact</div>\n            <div className=\"bottom-contact-box\">\n            Designed and coded in Visual Studio Code by yours truly. Built with React and CSS. All text is set in the Inter font.\n            You can reach out to me at{\" \"}\n              <a\n                href=\"mailto:dmitri.m80@gmail.com\"\n                className=\"bottom-email-link\"\n              >\n                dmitri.m80@gmail.com\n              </a>\n            </div>\n          </section>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Body;\n","import React, { useState, useEffect } from \"react\";\nimport \"./main.css\";\nimport Header from \"./Header\";\nimport Body from \"./Body\";\nimport { debounce } from \"./Utilities\";\n\nconst Main = () => {\n  const [activeLink, setActiveLink] = useState(\"about\");\n  const [spotlightPosition, setSpotlightPosition] = useState({\n    x: -200,\n    y: -200,\n  });\n\n  useEffect(() => {\n    // The handleScroll function that you want to debounce\n    const handleScroll = () => {\n      const sections = [\"about\", \"interests\", \"projects\"]; // Update with your section IDs\n      let currentActiveLink = \"\";\n      const scrollPosition = window.scrollY;\n\n      sections.forEach((sectionId) => {\n        const sectionEl = document.getElementById(sectionId);\n        if (sectionEl) {\n          const sectionTop = sectionEl.offsetTop;\n          const sectionHeight = sectionEl.offsetHeight;\n          // Check if the section is at least halfway in view\n          if (\n            scrollPosition >= sectionTop - sectionHeight / 2 &&\n            scrollPosition < sectionTop + sectionHeight / 2\n          ) {\n            currentActiveLink = sectionId;\n          }\n        }\n      });\n\n      setActiveLink(currentActiveLink);\n    };\n\n    // Apply debounce to the handleScroll function\n    const debouncedHandleScroll = debounce(handleScroll, 100);\n\n    window.addEventListener(\"scroll\", debouncedHandleScroll);\n    return () => window.removeEventListener(\"scroll\", debouncedHandleScroll);\n  }, []); // Note: Since debounce creates a new function, dependencies related to the effect should be stable or included in the dependency array.\n\n  useEffect(() => {\n    const updateSpotlightPosition = (e) => {\n      setSpotlightPosition({ x: e.clientX, y: e.clientY });\n    };\n\n    // Listen for mouse movement across the entire window\n    window.addEventListener(\"mousemove\", updateSpotlightPosition);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", updateSpotlightPosition);\n    };\n  }, []);\n\n  return (\n    <>\n      <main className=\"main-box\">\n        <div\n          className=\"overlay\"\n          style={{\n            position: \"fixed\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: `radial-gradient(circle 100px at \n                ${spotlightPosition.x}px \n                ${spotlightPosition.y}px, \n                rgba(255,255,255,0.055) 0%,\n                rgba(0,0,0,0.2) 700%)`,\n            pointerEvents: \"none\", // Allow clicks to pass through\n            zIndex: 9999,\n          }}\n        ></div>\n\n        <aside>\n          <Header activeLink={activeLink} setActiveLink={setActiveLink} />\n        </aside>\n\n        <div className=\"spacer\"></div>\n\n        <section className=\"body-wrapper\">\n          <Body />\n        </section>\n      </main>\n    </>\n  );\n};\n\nexport default Main;\n","export function debounce(func, wait, immediate = false) {\n    let timeout;\n    return function(...args) {\n      const context = this;\n      const later = () => {\n        timeout = null;\n        if (!immediate) func.apply(context, args);\n      };\n      const callNow = immediate && !timeout;\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n      if (callNow) func.apply(context, args);\n    };\n  }\n  ","class Deck{\n    constructor(){\n        this.cards = this.createDeck();\n    }\n\n    createDeck(){\n        const suits = [\"hearts\", \"diamonds\",\"spades\",\"clubs\"];\n        const ranks = [\"ace\", \"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"jack\",\"queen\",\"king\"];\n        const deck = [];\n        \n        for (const suit of suits){\n            for(const rank of ranks){\n                deck.push({suit,rank});\n            }\n        }\n        return deck;\n    }\n    \n    shuffleDeck(){\n        for(let i = this.cards.length - 1; i>0;i-- ){\n            const random = Math.floor(Math.random()*(i+1));\n            [this.cards[i],this.cards[random]] = [this.cards[random],this.cards[i]];\n        }\n    }\n\n    drawCard(){\n        return this.cards.pop();\n    }\n}\nexport default Deck;","import React from 'react'\nimport cardBack from './images/vegas-back2.png';\nimport heartsAce from './images/ace_of_hearts.png';\nimport heartsTwo from './images/2_of_hearts.png';\nimport heartsThree from './images/3_of_hearts.png';\nimport heartsFour from './images/4_of_hearts.png';\nimport heartsFive from './images/5_of_hearts.png';\nimport heartsSix from './images/6_of_hearts.png';\nimport heartsSeven from './images/7_of_hearts.png';\nimport heartsEight from './images/8_of_hearts.png';\nimport heartsNine from './images/9_of_hearts.png';\nimport heartsTen from './images/10_of_hearts.png';\nimport heartsJack from './images/jack_of_hearts.png';\nimport heartsQueen from './images/queen_of_hearts.png';\nimport heartsKing from './images/king_of_hearts.png';\n\nimport diamondsAce from './images/ace_of_diamonds.png';\nimport diamondsTwo from './images/2_of_diamonds.png';\nimport diamondsThree from './images/3_of_diamonds.png';\nimport diamondsFour from './images/4_of_diamonds.png';\nimport diamondsFive from './images/5_of_diamonds.png';\nimport diamondsSix from './images/6_of_diamonds.png';\nimport diamondsSeven from './images/7_of_diamonds.png';\nimport diamondsEight from './images/8_of_diamonds.png';\nimport diamondsNine from './images/9_of_diamonds.png';\nimport diamondsTen from './images/10_of_diamonds.png';\nimport diamondsJack from './images/jack_of_diamonds.png';\nimport diamondsQueen from './images/queen_of_diamonds.png';\nimport diamondsKing from './images/king_of_diamonds.png';\n\nimport spadesAce from './images/ace_of_spades.png';\nimport spadesTwo from './images/2_of_spades.png';\nimport spadesThree from './images/3_of_spades.png';\nimport spadesFour from './images/4_of_spades.png';\nimport spadesFive from './images/5_of_spades.png';\nimport spadesSix from './images/6_of_spades.png';\nimport spadesSeven from './images/7_of_spades.png';\nimport spadesEight from './images/8_of_spades.png';\nimport spadesNine from './images/9_of_spades.png';\nimport spadesTen from './images/10_of_spades.png';\nimport spadesJack from './images/jack_of_spades.png';\nimport spadesQueen from './images/queen_of_spades.png';\nimport spadesKing from './images/king_of_spades.png';\n\nimport clubsAce from './images/ace_of_clubs.png';\nimport clubsTwo from './images/2_of_clubs.png';\nimport clubsThree from './images/3_of_clubs.png';\nimport clubsFour from './images/4_of_clubs.png';\nimport clubsFive from './images/5_of_clubs.png';\nimport clubsSix from './images/6_of_clubs.png';\nimport clubsSeven from './images/7_of_clubs.png';\nimport clubsEight from './images/8_of_clubs.png';\nimport clubsNine from './images/9_of_clubs.png';\nimport clubsTen from './images/10_of_clubs.png';\nimport clubsJack from './images/jack_of_clubs.png';\nimport clubsQueen from './images/queen_of_clubs.png';\nimport clubsKing from './images/king_of_clubs.png';\n\nconst cardImages = {\n    \"hearts-ace\": heartsAce,\n     \"hearts-two\": heartsTwo,\n     \"hearts-three\":heartsThree,\n     \"hearts-four\":heartsFour ,\n     \"hearts-five\":heartsFive ,\n     \"hearts-six\":heartsSix ,\n     \"hearts-seven\":heartsSeven ,\n     \"hearts-eight\":heartsEight, \n     \"hearts-nine\":heartsNine ,\n     \"hearts-ten\":heartsTen ,\n     \"hearts-jack\":heartsJack ,\n     \"hearts-queen\":heartsQueen ,\n     \"hearts-king\":heartsKing ,\n     \n     \"diamonds-ace\": diamondsAce,\n     \"diamonds-two\": diamondsTwo,\n     \"diamonds-three\":diamondsThree,\n     \"diamonds-four\":diamondsFour ,\n     \"diamonds-five\":diamondsFive ,\n     \"diamonds-six\":diamondsSix ,\n     \"diamonds-seven\":diamondsSeven ,\n     \"diamonds-eight\":diamondsEight, \n     \"diamonds-nine\":diamondsNine ,\n     \"diamonds-ten\":diamondsTen ,\n     \"diamonds-jack\":diamondsJack ,\n     \"diamonds-queen\":diamondsQueen ,\n     \"diamonds-king\":diamondsKing ,\n    \n     \"spades-ace\": spadesAce,\n     \"spades-two\": spadesTwo,\n     \"spades-three\":spadesThree,\n     \"spades-four\":spadesFour ,\n     \"spades-five\":spadesFive ,\n     \"spades-six\":spadesSix ,\n     \"spades-seven\":spadesSeven ,\n     \"spades-eight\":spadesEight, \n     \"spades-nine\":spadesNine ,\n     \"spades-ten\":spadesTen ,\n     \"spades-jack\":spadesJack ,\n     \"spades-queen\":spadesQueen ,\n     \"spades-king\":spadesKing ,\n    \n     \"clubs-ace\": clubsAce,\n     \"clubs-two\": clubsTwo,\n     \"clubs-three\":clubsThree,\n     \"clubs-four\":clubsFour ,\n     \"clubs-five\":clubsFive ,\n     \"clubs-six\":clubsSix ,\n     \"clubs-seven\":clubsSeven ,\n     \"clubs-eight\":clubsEight, \n     \"clubs-nine\":clubsNine ,\n     \"clubs-ten\":clubsTen ,\n     \"clubs-jack\":clubsJack ,\n     \"clubs-queen\":clubsQueen ,\n     \"clubs-king\":clubsKing ,\n     \"back\": cardBack,\n  };\n\n\nconst Card = ({suit,rank, isFaceDown}) => {\n  // const cardImage = isFaceDown ? cardBack : cardImages[`${suit}-${rank}`];\n  \n    return (\n      <div className=\"card-box\">\n      <div className={`card-content ${!isFaceDown ? 'flip' : ''}`}>\n        <div className=\"card-front\">\n          <img src={cardImages[`${suit}-${rank}`]} alt={`${rank} of ${suit}`} />\n        </div>\n        <div className=\"card-back\">\n          <img src={cardBack} alt=\"Card Back\" />\n        </div>\n      </div>\n    </div>\n    )\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card';\nimport PropTypes from 'prop-types';\n\nconst Player = ({hand,isDealer}) => {\n\n\n\n  return (\n    <>\n        <div className={`${isDealer ? 'dealer-hand' : 'player-hand'}`}>\n            {hand.length > 0 ? (\n            <div id=\"hand\">\n            {hand.map((card, index) => (\n                <Card key={index} suit={card.suit} rank={card.rank} isFaceDown={card.isFaceDown} />\n            ))}\n            </div>\n             ) : (\n            <>\n            </>\n        )}\n        </div>\n\n    </>\n  );\n}\n\nPlayer.propTypes = {\n    hand: PropTypes.array,\n    isDealer: PropTypes.bool,\n}\n\nexport default Player","import React from 'react';\nimport chip5 from './images/5-chip-v2.png';\nimport chip10 from './images/10-chip-v2.png';\nimport chip25 from './images/25-chip-v2.png';\nimport chip50 from './images/50-chip-v2.png';\nimport chip100 from './images/100-chip-v2.png';\nimport chip250 from './images/250-chip-v2.png';\nimport btnStand from './images/stand-button2.png';\nimport btnDouble from './images/double-button2.png';\nimport btnHit from './images/hit-button2.png';\nimport btnClear from './images/clear-button2.png';\nimport btnBet from './images/bet-button2.png';\nimport btnSplit from './images/split-button.png';\n\nconst Controls = ({ onNewGame, \n                    handleStand, \n                    handleDouble, \n                    handleHit, \n                    gameRunning, \n                    onBetPlaced,\n                    bet,\n                    buttonsHidden,\n                    handleChipClick,\n                    standPressed,\n                    handleSplit,\n                    splitAvailable,\n                    hitPressed,\n                    twoHands,\n                    setPreviousBet,\n                    clearBet,\n                    previousBet,\n                    setBet,\n                    setBetChips,\n                    playerChips,\n                    }) => \n    {\n    const chips = [\n        { value: 5, img: chip5 },\n        { value: 10, img: chip10 },\n        { value: 25, img: chip25 },\n        { value: 50, img: chip50 },\n        { value: 100, img: chip100 },\n        { value: 250, img: chip250 },\n    ];\n\n    return (\n        <>\n        \n            <div id='buttons-container'>\n                {gameRunning ? (\n                    <>\n                        {!buttonsHidden && (\n                            <>\n                            <img    \n                                    src={btnDouble}\n                                    className={`btn-double ${standPressed || hitPressed ? 'disabled' : ''}`}\n                                    alt='double-button' \n                                    title=\"Double\"\n                                    onClick={!standPressed ? ()=>handleDouble() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnStand} \n                                    className={`btn-stand ${standPressed ? 'disabled' : ''}`}\n                                    alt='stand-button' \n                                    title=\"Stand\"\n                                    onClick={!standPressed ? ()=>handleStand() : undefined}\n                                    style={{cursor: standPressed?'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnHit} \n                                    className={`btn-hit ${standPressed ? 'disabled': ''}`}\n                                    alt='hit-button' \n                                    title=\"Hit\"\n                                    onClick={!standPressed ? ()=>handleHit() : undefined}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            <img    \n                                    src={btnSplit} \n                                    className={`btn-split ${(standPressed || !splitAvailable || hitPressed )? 'disabled': ''}`}\n                                    alt='split-button' \n                                    title=\"Split\"\n                                    onClick={() => !standPressed && handleSplit()}\n                                    style={{cursor:(standPressed) ? 'not-allowed':'pointer'}}\n                            />\n                            \n                            </>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        <img \n                            src={btnBet} \n                            className='btn-new-game' \n                            alt='bet-button' \n                            title=\"Place A Bet\"\n                            onClick={() => bet === 0 ? onBetPlaced(0):onNewGame()}\n                        />\n                        <img \n                            src={btnClear} \n                            className='btn-clear-bet' \n                            alt='clear-button' \n                            title=\"Clear\"\n                            onClick={() => {\n                                \n                                if(previousBet>0){\n                                    setBetChips([]);\n                                    setPreviousBet(0);\n                                    setBet(0);\n                                }else{\n                                    onBetPlaced(0);\n\n                                    \n                                }\n                                \n                            }}\n                        />\n                    </>\n                )}\n            </div>\n            \n            <div id='chips-row-wrapper-arrows' style={{\n                                        height: 'auto', \n                                        overflow: 'hidden'}}>\n                <div id='pointer-row-animation' style={{\n                                                visibility: !gameRunning ? 'visible' : 'hidden', \n                                                display: 'flex', \n                                                gap: '44px', \n                                                justifyContent: 'center', \n                                                transform: 'translateY(3px)'}}>\n\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                </div>\n            </div>\n            <div id='chips-row-wrapper' style={{ visibility: gameRunning ? 'hidden' : 'visible' }}>\n\n                {chips.map((chip, index) => (\n                <img key={index}\n                    src={chip.img}\n                    alt={`Chip ${chip.value}`}\n                    title={`$${chip.value}`}\n                    className='chip-img'\n                    onClick={(event) => {\n                        if(chip.value > playerChips){\n                            return;\n                        }else{\n                            if(previousBet > 0){\n                                setPreviousBet(0);\n                                setBet(0);\n                                setBetChips([]);\n                                onBetPlaced(chip.value); \n                                handleChipClick(chip.value, chip.img, event);\n                            }else{\n                                onBetPlaced(chip.value); \n                                handleChipClick(chip.value, chip.img, event);\n                            }\n                        }\n                        \n                        \n                    }}\n                    style={{ cursor: 'pointer' }} />\n                ))}\n                \n            </div>  \n        </>\n    );\n};\n\nexport default Controls;","import React from 'react'\n\n\nconst Header = ({playerHandValue,dealerHandValue,result,bet,playerChips,progressBarWidth,callSettings}) => {\n  return (\n    <>\n      <div id='blackjack-header-container'>\n        <div className='chips-count'>{`$${playerChips}`}</div>\n        <div id='games-count'>\n          <div id='games-count-filler' style={{width:`${progressBarWidth}%`}}></div>\n        </div>\n        {/* <div id='game-result'>{result}</div>  */}\n        <span id='game-settings' role='img' aria-label=\"Settings\" onClick={()=>callSettings()}>⚙️</span>\n      </div>\n      <div id='deck-dealer-row'>\n        {/* <div id='discard-tray'>{<img id='card-image-left-corner' alt='back-image' src={BackCard} />}</div>\n        <div id='new-deck'>{<img id='card-image-right-corner' alt='back-image' src={BackCard} />}</div> */}\n      </div>\n    </>\n  )\n}\n\nexport default Header","import React from 'react'\n\nconst GameRecap = ({gameResultsCount}) => {\n    const results = gameResultsCount;\n  return (\n    <div id='gamerecap-container'>\n        \n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>winnig chance:<br/><br/></div>\n            <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n            <div id='gamerecap-cell'>Games Won:<br/><br/>{results.gamesWon}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n            <div id='gamerecap-cell'>Games Lost:<br/><br/>{results.gamesLoss}</div>\n            <div id='gamerecap-cell'># of Tied Games:<br/><br/>{results.numberOfTie}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n            <div id='gamerecap-cell'># of Busts:<br/><br/>{results.numberOfBusts}</div>\n            <div id='gamerecap-cell'># of BlackJacks by Player:<br/><br/>{results.numberOfBlackJacksByPlayer}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n        <div id='gamerecap-cell'># of BlackJacks by Dealer:<br/><br/>{results.numberOfBlackJacksByDealer}</div>\n            <div id='gamerecap-cell'># of Splits Available:<br/><br/>{results.numberOfSplitsAvailable}</div>\n            \n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n        <div id='gamerecap-cell'># of Splits Played:<br/><br/>{results.numberOfsplitsPlayed}</div>\n            <div id='gamerecap-cell'>Amount of Bets Lost:<br/><br/>${results.totalAmountOfBetsLost}</div>\n           \n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n             <div id='gamerecap-cell'># of Wins With Two Cards:<br/><br/>{results.numberOfWinsWith2Cards}</div>\n            <div id='gamerecap-cell'>Bets total:<br/><br/>${results.totalAmountOfBets}</div>\n            \n        </div>\n        <div id='gamerecap-element'>\n        <div id='gamerecap-cell' style={{ fontSize:'8.9px'}}>Game Playeds:<br/><br/>{results.totalGamesPlayed}</div>\n            <div id='gamerecap-cell'>Bets total won:<br/><br/>${results.totalAmountOfBetsWon}</div>\n            <div id='gamerecap-cell'>Number of Doubles Played:<br/><br/>{results.numberOfBusts}</div>\n           \n        </div>\n        \n        \n    </div>\n  )\n}\n\nexport default GameRecap","import React from 'react'\n\nconst GameHistory = ({gameRoundsHistory}) => {\n  return (\n    <div id='gamerecap-container'>\n        <div id='gamerecap-element'>\n            <div id='recap-cell'>Game Results<br/>\n                {gameRoundsHistory && gameRoundsHistory.slice().reverse().map((round, index) => ( \n                    <div key={index}>\n                        \n                        {`---------------------------`}<br/>\n                        {`Round: ${round.roundNumber}`}<br/>\n                        {`Dealer: ${round.dealerHand.join(', ')}`}<br/> \n                        {`Value: ${round.dealerHandValue}`}<br/>\n                        {`Player: ${round.playerHand.join(', ')}`}<br/>\n                        {`Value: ${round.playerHandValue}`}<br/>\n                        {`Outcome: ${round.outcome}`}<br/>\n                    </div>\n                ))}\n            </div>\n        </div>\n    </div>\n  )\n}\n\nexport default GameHistory","import React, { useEffect, useState,useRef } from \"react\";\nimport Deck from './Deck';\nimport Player from './Player';\nimport Controls from \"./Controls\";\nimport Header from \"./Header\";\nimport btnStand from './images/stand-button2.png';\nimport btnHit from './images/hit-button2.png';\nimport GameRecap from \"./GameRecap\";\nimport GameHistory from \"./GameHistory\";\n\n\nconst GameBoard = ({ onGameRunningChange }) => {\n    const [showMessages, setShowMessages] = useState(false); \n    const [messages, setMessages] = useState([]);\n    const [clickCount, setClickCount] = useState(0); // State to count clicks\n    const [handleSettings,setHandleSettings] = useState(false);\n    const [deck, setDeck] = useState(null);\n    const [dealerHand, setDealerHand] = useState([]);\n    const [dealerHandText,setDealerHandText]=useState([]);\n    const [playerHand, setPlayerHand] = useState([]);\n    const [playerHandText,setPlayerHandText]=useState([]);\n\n    const [gameRunning, setGameRunning] = useState(false);\n    const [buttonsHidden,setButtonsHidden] = useState(false);\n    const [playerHandValue, setPlayerHandValue] = useState(0);\n    const [dealerHandValue, setDealerHandValue] = useState(0);\n    const [playerChips, setPlayerChips] = useState(1000);\n    const [bet, setBet] = useState(0);\n    const [gameMessage, setGameMessage] = useState(\"Place a bet...\");\n    const [gameOutcome, setGameOutcome] = useState(\"\");\n    const [gameOutcome1, setGameOutcome1] = useState(\"\");\n    const [gameOutcome2, setGameOutcome2] = useState(\"\");\n    const [showScores, setShowScores] = useState(false);\n    const endGameTimeout = useRef();\n    const [gamePause,setGamePause] = useState(false);\n    \n    const [betChips,setBetChips] = useState([]);\n    const chipWidth = 40;\n    const gap = 0.1;\n    const [previousBet,setPreviousBet] = useState(0);\n    const totalChipTypes = Object.keys(betChips).length;\n    const totalWidth = totalChipTypes * chipWidth + (totalChipTypes - 1) * gap;\n    const [dealerFirstCardValue,setDealerFirstCardValue] = useState(0);\n    const isFirstRender = useRef(true);\n    const [standPressed, setStandPressed] = useState(false);\n    const [splitAvailable,setSplitAvailable] = useState(false);\n    const [playerHand1,setPlayerHand1] = useState([]);\n    const [playerHand2,setPlayerHand2] = useState([]);\n    const [twoHands,setTwoHands] = useState(false);\n    const [playerHand1Value,setPlayerHand1Value]= useState(0);\n    const [playerHand2Value,setPlayerHand2Value]=useState(0);\n    const [hitPressed,setHitPressed] = useState(false);\n    const [betHand1,setBetHand1] = useState(0);\n    const [betHand2,setBetHand2] = useState(0);\n    const [hand1TurnFinished,setHand1TurnFinished] = useState(false);\n    const [hand2TurnFinished,setHand2TurnFinished] = useState(false);\n    const [splitPressed,setSplitPressed] = useState(false);\n    \n    //counter for progressBar\n    const [gamesCount,setGamesCount] = useState(1);\n    const [result,setResult] = useState(\"\");\n    const [progressBarWidth,setProgressBarWidth] = useState(5);\n    const [roundNumber,setRoundNumber] = useState(1);\n    const [roundOutcome,setRoundOutcome] = useState(\"\");\n    const [gameRoundsHistory, setGameRoundsHistory] = useState([]);\n    const [gameResultsCount, setGameResultsCount] = useState({\n        totalGamesPlayed: 0,\n        gamesWon: 0,\n        gamesLoss: 0,\n        numberOfTie: 0,\n        numberOfBlackJacksByPlayer: 0,\n        numberOfBlackJacksByDealer:0,\n        numberOfSplitsAvailable: 0,\n        numberOfsplitsPlayed:0,\n        numberOfDoubles: 0,\n        numberOfBusts: 0,\n        numberOfWinsWith2Cards: 0,\n        totalAmountOfBets:0,\n        totalAmountOfBetsWon:0,\n        totalAmountOfBetsLost:0,\n        });\n        \n    \n    \n    const handsPosibilities = (playerCard1Value,playerCard2Value,dealerCard1Value) =>{\n        const cardValues = [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11];\n        const dCard1Value = dealerCard1Value;\n        const pCard1Value = playerCard1Value;\n        const pCard2Value = playerCard2Value;\n        let winningDealerCardValue = (pCard1Value+pCard2Value)-dCard1Value+1;\n        const cardCounts = [0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 16, 4];\n        const dealerStopValue = 17;\n        const playerHandValue = 18; // Player's hand value for comparison\n        let totalWinningCards = 0;\n        let totalCardsRemaining = cardCounts.reduce((acc, count) => acc + count, 0);\n        let safeCardsTotal = 0;\n        const currentHandValue = pCard1Value + pCard2Value;\n        \n        const valueToIndex = (value) => {\n            if (value >= 2 && value <= 10) return value;\n            if (value === 11) return 12; // Assuming Ace is represented as 11\n            return 10; // Face cards (J, Q, K) are all treated as 10\n        };\n        cardCounts[valueToIndex(playerCard1Value)]--;\n        cardCounts[valueToIndex(playerCard2Value)]--;\n        cardCounts[valueToIndex(dealerCard1Value)]--;\n\n        const maxSafeValue = 21 - currentHandValue;\n        \n        //calculating safe cards for players 3rd card.\n        cardCounts.forEach((count, index) => {\n            if (index === 12 && maxSafeValue >= 11) { // Ace as 11\n              safeCardsTotal += count;\n            } else if (index === 12 && maxSafeValue >= 1) { // Ace as 1\n              safeCardsTotal += count;\n            } else if (index <= maxSafeValue) {\n              safeCardsTotal += count;\n            }\n          });\n\n          for (let secondCardIndex = 2; secondCardIndex <= 11; secondCardIndex++) {\n            let possibleDealerValueAfterSecondCard = dCard1Value + (secondCardIndex === 11 ? 11 : secondCardIndex);\n            \n            // Exclude scenarios where the dealer reaches the stop value or higher with the second card\n            if (possibleDealerValueAfterSecondCard >= dealerStopValue) continue;\n        \n            // Iterate over potential third cards\n            for (let thirdCardIndex = 2; thirdCardIndex <= 11; thirdCardIndex++) {\n                let finalDealerValue = possibleDealerValueAfterSecondCard + (thirdCardIndex === 11 ? 11 : thirdCardIndex);\n                \n                // Conditions for the dealer's win with the third card\n                if (finalDealerValue > playerHandValue && finalDealerValue <= 21) {\n                    totalWinningCards += cardCounts[thirdCardIndex];\n                }\n            }\n        }\n        \n        let probabilityOfWinningW3cards = (totalWinningCards / totalCardsRemaining) * 100;\n        console.log(`Probability of dealer winning with 3rd card: ${probabilityOfWinningW3cards.toFixed(2)}%`);\n          // player 3rd card probability\n        const probabilityOfNotBusting = (safeCardsTotal / totalCardsRemaining) * 100;\n        console.log(\"3rd card probability:\",probabilityOfNotBusting);\n\n        //dealer card probability\n        let numberOfWinningCards = cardCounts.slice(winningDealerCardValue, 12).reduce((acc, count) => acc + count, 0);\n        console.log(\"Number of wining cards remain for dealer:\",numberOfWinningCards);\n        let probabilityOfWinning = parseFloat((numberOfWinningCards / totalCardsRemaining) * 100).toFixed(2);\n\n        console.log(\"Probability of drawing a card of \",winningDealerCardValue,\"or higher:\" + probabilityOfWinning + \"%\");\n\n        // console.log(\"Number of hands greater than \",currentHandValue,\" \",numberOfHigherHands);\n\n    }\n    \n   \n    const twoHandsPosibilities = () => {\n        const cardValues = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11];\n        let messages = [];\n        let x = 1; // Ensure this starts at 1 every time this function is called\n        for (let i = 0; i < 52; i++) {\n            for (let j = i + 1; j < 52; j++) {\n                let cardValue1 = cardValues[i%13];\n                let cardValue2 = cardValues[j%13];\n                let value = cardValue1 + cardValue2;\n                let message = `${x} Combo: ${cardValue1} + ${cardValue2} = ${value}`;\n                \n                messages.push(message);\n                x++;\n            }\n        }  \n        return messages;\n    };\n\n    \n    const callSettings = () =>{\n        setHandleSettings(!handleSettings);\n    }    \n    const cardToString = (card) => {\n        return `${card.rank} of ${card.suit}`;\n        };\n    const convertHandToText = (hand) => {\n        return hand.map(cardToString);\n        };\n\n    const clearBet = () => {\n        // Assuming you want to clear the bet and return the bet amount to the player's chips only if the bet hasn't been played yet\n        if (!gameRunning) {\n            setPlayerChips((prevChips) => prevChips + bet); // Return the current bet amount to the player's chips\n        }\n        setBet(0); // Reset the current bet to 0\n        setPreviousBet(0); // Reset the previous bet to 0\n        // Additional logic as needed\n    };\n\n    // calculates number of games Won\n    const playerWins = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, gamesWon:prevState.gamesWon + 1};\n        });\n    }\n    // calculates number of games Lost\n    const playerLoss = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, gamesLoss:prevState.gamesLoss + 1};\n        });\n    }\n    // calculates number of Tie games.\n    const playerPush = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfTie:prevState.numberOfTie + 1};\n        });\n    }\n    // calculate number of blackjack by player.\n    const playerBlackJack = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfBlackJacksByPlayer: prevState.numberOfBlackJacksByPlayer +1};\n        });\n    }\n    // calculate number of blackjack by dealer.\n    const dealerBlackJack = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfBlackJacksByDealer: prevState.numberOfBlackJacksByDealer +1};\n        });\n    }\n//calculate number of splits available\n    const splitsAvailable = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfSplitsAvailable:prevState.numberOfSplitsAvailable + 1};\n        });\n    }\n    //calculate number of splits played\n    const splitsPlayed = () =>{\n        setGameResultsCount(prevState =>{\n            return{...prevState, numberOfsplitsPlayed:prevState.numberOfsplitsPlayed + 1};\n        });\n    }\n     //calculate number of doubles played\n     const doublesPlayed = () =>{\n        console.log(\"running doublesPlayed inside doublesPlayed\");\n        setGameResultsCount(prevState =>{\n            return{...prevState, numberOfDoubles:prevState.numberOfDoubles + 1};\n        });\n    }\n     //calculates number of Bust games.\n     const playerBusts = () =>{\n        setGameResultsCount(prevState => {\n            return{...prevState, numberOfBusts:prevState.numberOfBusts + 1};\n        });\n    }\n    //calculates number of games won with 2 cards, excluding blackjack\n    const winWithOutHit = () =>{\n        if(!hitPressed){\n            setGameResultsCount(prevState => {\n                return{...prevState,numberOfWinsWith2Cards: prevState.numberOfWinsWith2Cards+1 };\n            });\n        }\n    }\n    //calculates total amount of Bets\n    const totalAmountOfBets = (bet) => {\n        let currentBet = bet;\n        setGameResultsCount(prevState => {\n            return{...prevState,totalAmountOfBets:prevState.totalAmountOfBets + currentBet};\n        });\n    }\n    //calculates total amount of bets won\n    const playerBetsWon = (betWon) =>{\n        let betsWon = betWon;\n        setGameResultsCount(prevState =>{\n            return{...prevState, totalAmountOfBetsWon:prevState.totalAmountOfBetsWon +betsWon};\n        })\n    }\n    //calculates total amount of bets lost\n    const playerBetsLost = (betLost) =>{\n        let betsLost = betLost;\n        setGameResultsCount(prevState =>{\n            return{...prevState, totalAmountOfBetsLost:prevState.totalAmountOfBetsLost -betsLost};\n        })\n    }\n   \n    \n    const updateGameRoundsHistory = (newRoundResults) => {\n        setGameRoundsHistory(prevHistory => [...prevHistory, newRoundResults]);\n      };\n\n    \n    \n\n    const handleGameResult = () => {\n        \n        \n        let splitHand1=\"\";\n        let splitHand2=\"\";\n        let preBet = previousBet;\n        let chips = playerChips;\n        let betOneHand = bet;\n        let bet1 = betHand1;\n        let bet2 = betHand2;\n        let betOutcome = 0;\n        let bet1Outcome=0;\n        let bet2Outcome=0;\n        let newOutcomeMessage =\"\";\n        let newOutcomeMessage1=\"\";\n        let newOutcomeMessage2=\"\";\n        totalAmountOfBets(bet1);\n        totalAmountOfBets(bet2);\n        totalAmountOfBets(bet);\n        // let finalOutcome;\n    \n\n        if(splitPressed){\n            if(gameOutcome2===\"\" || gameOutcome1 ===\"\"){\n                return;\n            }else{\n                switch(gameOutcome1) {\n                    case \"PlayerWins BlackJack\":\n                        newOutcomeMessage1 = `BlackJack 1st hand, win: ${bet1*1.5}`;\n                        bet1Outcome = bet1*2.5;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        playerWins();\n                        playerBlackJack();\n                        playerBetsWon(bet1Outcome);\n                        \n                        break;\n                    case \"DealerWins BlackJack\":\n                        newOutcomeMessage1 = `BlackJack, Dealer wins...1st hand -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        playerLoss();\n                        dealerBlackJack();\n                        playerBetsLost(bet1);\n                        break;\n                    case \"DealerWins Bust\":\n                        newOutcomeMessage1 = `Bust! Dealer Wins! 1st hand  -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        playerLoss();\n                        playerBusts();\n                        playerBetsLost(bet1);\n                        break;\n                    case \"DealerWins\":\n                        newOutcomeMessage1 = `Dealer Wins...1st hand -$${bet1}`;\n                        splitHand1 = \"1st Hand - Dealer Wins\";\n                        bet1Outcome = bet1 * (-1);\n                        playerLoss();\n                        playerBetsLost(bet1);\n                        break;\n                    case \"PlayerWins Bust\":\n                        newOutcomeMessage1 = `Dealer Bust...1st hand Win! +$${bet1}`;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        bet1Outcome = bet1;\n                        playerWins();\n                        winWithOutHit();\n                        playerBetsWon(bet1Outcome);\n                        break;\n                    case \"PlayerWins\":\n                        newOutcomeMessage1 = `1st Hand Win! +$${bet1}!`;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        bet1Outcome = bet1;\n                        playerWins();\n                        winWithOutHit();\n                        playerBetsWon(bet1Outcome);\n                        break;\n                    case \"Push\":\n                        newOutcomeMessage1 = `Push! 1st Hand Tie... Bet returned: $${bet1}`;\n                        splitHand1 = \"1st Hand - Push\";\n                        bet1Outcome = 0;\n                        playerPush();\n                        break;\n                    default:\n                        newOutcomeMessage1 = \"Unknown outcome.\";\n                        splitHand1 = \"1st Hand - Unknown\";\n                        break;\n                }\n                switch(gameOutcome2) {\n                    case \"PlayerWins BlackJack\":\n                        newOutcomeMessage2 = `BlackJack 2nd hand, win: ${bet2*1.5}`;\n                        bet2Outcome = bet2*2.5;\n                        splitHand1 = \"1st Hand - Player Wins\";\n                        playerWins();\n                        playerBlackJack();\n                        playerBetsWon(bet2Outcome);\n                \n                        break;\n                    case \"DealerWins BlackJack\":\n                        newOutcomeMessage2 = `BlackJack, Dealer wins...2nd hand -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        playerLoss();\n                        dealerBlackJack();\n                        playerBetsLost(bet2);\n                        break;\n                    case \"DealerWins Bust\":\n                        newOutcomeMessage2 = `Bust! Dealer Wins! 2nd hand  -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        playerLoss();\n                        playerBusts();\n                        playerBetsLost(bet2);\n                        break;\n                    case \"DealerWins\":\n                        newOutcomeMessage2 = `Dealer Wins...2nd hand -$${bet2}`;\n                        splitHand1 = \"2nd Hand - Dealer Wins\";\n                        bet2Outcome = bet2 * (-1);\n                        playerLoss();\n                        playerBetsLost(bet2);\n                        break;\n                    case \"PlayerWins Bust\":\n                        newOutcomeMessage2 = `Dealer Bust...2nd hand Win! +$${bet2}`;\n                        splitHand1 = \"2nd Hand - Player Wins\";\n                        bet2Outcome = bet2;\n                        playerWins();\n                        playerBusts();\n                        winWithOutHit();\n                        playerBetsWon(bet2Outcome);\n                        break;\n                    case \"PlayerWins\":\n                        newOutcomeMessage2 = `2nd Hand Win! +$${bet2}!`;\n                        splitHand1 = \"2nd Hand - Player Wins\";\n                        bet2Outcome = bet2;\n                        playerWins();\n                        winWithOutHit();\n                        playerBetsWon(bet2Outcome);\n                        break;\n                    case \"Push\":\n                        newOutcomeMessage2 = `Push! 1st Hand Tie... Bet returned: $${bet2}`;\n                        splitHand1 = \"2nd Hand - Push\";\n                        bet2Outcome = 0;\n                        playerPush();\n                        break;\n                    default:\n                        newOutcomeMessage2 = \"Unknown outcome.\";\n                        break;\n                }\n                let finalMessage = newOutcomeMessage1 + \"\\n \" +newOutcomeMessage2;\n                setGameMessage(finalMessage);\n                \n            }\n        }else{\n            switch(gameOutcome) {\n                case \"PlayerWins BlackJack\":\n                    newOutcomeMessage = `BlackJack, You Won +$${betOneHand*1.5}!!!`;\n                    betOutcome =  betOneHand *2.5;\n                    playerWins();\n                    playerBlackJack();\n                    playerBetsWon(betOutcome);\n                    break;\n                case \"DealerWins BlackJack\":\n                    newOutcomeMessage = `BlackJack, Dealer wins... -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    playerLoss();\n                    dealerBlackJack();\n                    playerBetsLost(betOneHand);\n                    break;\n                case \"DealerWins Bust\":\n                    newOutcomeMessage = `Bust! Dealer Wins! -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    playerLoss();\n                    playerBusts();\n                    playerBetsLost(betOneHand);\n                    break;\n                case \"DealerWins\":\n                    newOutcomeMessage = `Dealer Wins... -$${betOneHand}`;\n                    betOutcome = betOneHand * (-1);\n                    playerLoss();\n                    playerBetsLost(betOneHand);\n                    break;\n                case \"PlayerWins Bust\":\n                    newOutcomeMessage = `Dealer Bust... Player Wins! +$${betOneHand}`;\n                    betOutcome = betOneHand;\n                    playerWins();\n                    playerBusts();\n                    winWithOutHit();\n                    playerBetsWon(betOutcome);\n                    break;\n                case \"PlayerWins\":\n                    newOutcomeMessage = `You Won +$${betOneHand}!`;\n                    betOutcome = betOneHand;\n                    playerWins();\n                    winWithOutHit();\n                    playerBetsWon(betOutcome);\n                    break;\n                case \"Push\":\n                    newOutcomeMessage = `Push! Tie... Bet returned: $${betOneHand}`;\n                    betOutcome = 0;\n                    playerPush();\n                    break;\n                default:\n                    newOutcomeMessage = \"Unknown outcome.\";\n                    break;\n            }\n            \n            setGameMessage(newOutcomeMessage);\n            \n        }\n        if (newOutcomeMessage === \"\"){\n           \n            betOutcome= bet2Outcome + bet1Outcome + bet1+bet2;\n      \n            chips = betOutcome + chips;\n          \n            setPlayerChips(chips);\n            \n        }else{\n           \n            betOutcome = betOutcome + betOneHand;\n           \n            chips = betOutcome +chips;\n           \n            setPlayerChips(chips);\n            \n        }       \n        \n        endGame();\n    }    \n\n    \n    const handleSplit = ()=>{\n        \n        if (playerChips >= bet && !gamePause)\n        {\n            setButtonsHidden(true);\n            setSplitPressed(true);\n            splitsPlayed();\n            const betHand1 = bet;\n            const betHand2 = bet;\n            setBetHand1(betHand1);\n            setBetHand2(betHand2);\n            setPlayerChips(playerChips-bet);\n            \n            const newDeck = deck;\n            const playerHand1SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerHand2SecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerHand1 = [playerHand[0],playerHand1SecondCard];\n            const playerHand2 = [playerHand[1],playerHand2SecondCard];\n            setPlayerHand1(playerHand1);\n            setPlayerHand2(playerHand2);\n            setTwoHands(true);\n            setPlayerHand([]);\n            setTimeout(()=>{\n                setPlayerHand1(playerHand1.map(card => ({...card,isFaceDown: false})))\n                setPlayerHand2(playerHand2.map(card => ({...card,isFaceDown: false})))\n            },500);\n            const playerHand1Value = calculateHandValue(playerHand1);\n            const playerHand2Value = calculateHandValue(playerHand2);\n            setPlayerHand1Value(playerHand1Value);\n            setPlayerHand2Value(playerHand2Value);\n            setPlayerHandValue(0);\n            \n            if(playerHand1Value===21 && playerHand2Value ===21){\n                \n                // setPlayerChips(playerChips+betHand1*2.5+betHand2*2.5);\n                setGameOutcome1(\"PlayerWins BlackJack\");\n                setGameOutcome2(\"PlayerWins BlackJack\");\n                setHand2TurnFinished(true);\n                setHand1TurnFinished(true);\n            }else{\n                //checking turn for hand2 during split\n                if(playerHand2Value === 21){\n                    // setBetHand2(betHand2*2.5);\n                    setGameOutcome2(\"PlayerWins BlackJack\");\n                    setHand2TurnFinished(true);\n                   \n                }else{\n                    let gameMessage = `What do you want to do? Hit or Stand`;                        \n                    setGameMessage(gameMessage);\n                }\n                //checking turn for hand1 during split\n                if(playerHand1Value === 21){\n                    // let resultHand1 = `Hand1 BlackJack you won ${betHand1*2.5}`;\n                    setGameOutcome1(\"PlayerWins\");\n                    // setBetHand1(betHand1*2.5);\n                    setHand1TurnFinished(true);\n                   \n                }\n                else{\n                    let gameMessage = \"What do you want to do? Hit or Stand\"\n                    setGameMessage(gameMessage);\n\n                }\n                \n\n            }\n        }else{\n            setGameMessage(\"Not enough chips for split...\");\n            return;\n        }\n        \n\n\n    }\n    const handleChipClick = (amount, imgSrc, event) => {\n        event.stopPropagation();\n        \n\n        setBetChips(currentChips => {\n            // Create a new object to avoid direct state mutation\n            const newChips = { ...currentChips };\n            const chipType = `chip${amount}`;\n\n            if (newChips[chipType]) {\n                newChips[chipType].count += 1;\n                // Adjust position logic as necessary\n                // newChips[chipType].position += 10; \n            } else {\n                newChips[chipType] = { imgSrc, count: 1, position: 0 };\n            }\n\n            return newChips;\n        });\n    };\n\n    const onBetPlaced = (newBet, sendingPreviousBet = false) => {\n        if (gamePause) {\n            setGameMessage(\"Game Paused...\");\n            return;\n        }else if (newBet === 0) {\n            setPlayerChips(prev => prev + bet);\n            setGameMessage(\"Place A Bet...\");\n            setBet(0);\n            setBetChips([]);\n        }else if (!gameRunning && playerChips >= newBet) {\n            if(sendingPreviousBet){\n                setPlayerChips(prevChips => prevChips - newBet);\n            \n            }else{\n                setBet(prevBet => prevBet + newBet);\n                setPlayerChips(prevChips => prevChips - newBet);\n            }\n        } else {\n            return;\n        }\n    };\n    \n    \n    const assignGameResults = () =>{\n        setGameResultsCount(prevResult =>({\n            ...prevResult, \n            totalGamesPlayed: prevResult.totalGamesPlayed+1\n        }));\n        setGamesCount(count=>count+1);\n    }\n    \n    \n    const handleNewGame = () => {\n        if (previousBet > playerChips){\n            setGameMessage(`Not enough chips, change your bet...`);\n            return;\n        }else {\n            if(previousBet!==0 ){\n                let sendingPreviousBet = true;\n                onBetPlaced(previousBet,sendingPreviousBet);\n            }\n            asignPreviousBet(bet);\n            setSplitAvailable(false);\n            setHand1TurnFinished(false);\n            setHand2TurnFinished(false);\n            setSplitPressed(false);\n            setHitPressed(false);\n            setButtonsHidden(false);\n            setGameRunning(true);\n            setShowScores(true);\n            setGameMessage(`Your bet is $${bet}`);\n            const newDeck = new Deck();\n            newDeck.shuffleDeck();\n            setDeck(newDeck);\n        \n        \n        \n        \n            const playerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n\n            setPlayerHand([playerFirstCard, playerSecondCard]);\n            setDealerHand([dealerFirstCard, dealerSecondCard]);\n            \n            \n\n            setTimeout(() => {\n                // Flip all player's cards\n                setPlayerHand(playerHand.map(card => ({ ...card, isFaceDown: false })));\n                \n                // Flip 1st dealercards\n                setDealerHand(dealerHand.map((card, index) => \n                    index === 0 ? { ...card, isFaceDown: false } : card // Flip only the first card\n                ));\n            }, 500); // Adjust this delay as needed\n            const playerHand = [playerFirstCard,playerSecondCard];\n            setPlayerHand(playerHand);\n            const dealerHand = [dealerFirstCard,{...dealerSecondCard,isFaceDown: true }];\n            setDealerHand(dealerHand);\n            \n            const playerFirstCardValue = calculateHandValue([playerFirstCard]);\n            const playerSecondCardValue = calculateHandValue([playerSecondCard]);\n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n            const dealerHandValue = calculateHandValue(dealerHand);\n            const dealerHandValueOneCard = calculateHandValue([dealerFirstCard]);\n            setDealerFirstCardValue(dealerHandValueOneCard);\n            //checking for blackjack or 2 blackjacks\n            let newOutcome; \n            //passing 3 card values to check probability\n            handsPosibilities(playerFirstCardValue,playerSecondCardValue,dealerHandValueOneCard);\n\n            if(playerHandValue===21 && dealerHandValue === 21){\n                setDealerHandValue(dealerHandValue);\n                setTimeout(()=>{\n                newOutcome = \"Push\";        \n                setGameOutcome(newOutcome);\n                const updatedDealerHand = dealerHand.map(card => ({\n                    ...card,\n                    isFaceDown: false,\n                }));\n                setDealerHand(updatedDealerHand);\n                               \n            },1500);   \n            }else if(playerHandValue ===21){\n                setDealerHandValue(dealerHandValue);\n                setTimeout(()=>{\n                    newOutcome=\"PlayerWins BlackJack\";\n                    setGameOutcome(newOutcome);\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown: false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    \n                },1500);\n            }else if(dealerHandValue ===21){\n                \n                setDealerHandValue(dealerHandValue);\n                setTimeout(()=>{\n                    newOutcome=\"DealerWins BlackJack\";\n                    setGameOutcome(newOutcome);;\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown:false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                },1500);\n            }else{\n                setDealerHandValue(dealerHandValueOneCard);\n                if(playerFirstCard.rank === playerSecondCard.rank ){\n                    setSplitAvailable(true);\n                    splitsAvailable();\n                };\n            }         \n        }    \n    };\n\n    const asignPreviousBet = (bet) =>{\n        let currentBet = bet;\n        setPreviousBet(currentBet);\n       \n    }\n\n    const endGame = () => {\n            const roundResults = {\n                roundNumber: roundNumber,\n                playerHand: [...playerHandText], // You may need to adjust based on how your card objects are structured\n                playerHandValue: playerHandValue,\n                dealerHand: [...dealerHandText], // Adjust as necessary for your card objects\n                dealerHandValue: dealerHandValue,\n                outcome: gameOutcome // Or any other outcome variable you have\n            };\n\n            updateGameRoundsHistory(roundResults);\n\n            setRoundNumber(prevRoundNumber => prevRoundNumber + 1);\n            assignGameResults();\n            setGamePause(true);\n            endGameTimeout.current = setTimeout(() => {\n                setSplitAvailable(false);\n                setHand1TurnFinished(false);\n                setHand2TurnFinished(false);\n                setSplitPressed(false);\n                setDealerHand([]);\n                setPlayerHand([]);\n                setGameOutcome(\"\");\n                setGameOutcome1(\"\");\n                setGameOutcome2(\"\");\n                setGameMessage(\"Place A Bet...\");\n                setShowScores(false);\n                setGameRunning(false);\n                setHitPressed(false);\n                setTwoHands(false);\n                setStandPressed(false);\n                setButtonsHidden(true);\n                setGamePause(false);\n                setBetHand1(0);\n                setBetHand2(0);\n                clearTimeout(endGameTimeout.current);\n                \n            }, 3000);\n    };\n        \n    const handleStand = (newHandValue = playerHandValue,hand = null) => {\n            \n            if(splitPressed){\n\n                if(hand===\"hand1\" && standPressed === false){\n                    const playerHand1Value = newHandValue;\n                  \n                    setHand1TurnFinished(true);\n                }\n                if(hand===\"hand2\" && standPressed === false){\n                    const playerHand2Value = newHandValue;\n                   \n                    setHand2TurnFinished(true);\n                }\n                \n                if(hand1TurnFinished&&hand2TurnFinished){\n                    \n                    setTimeout(()=>{ \n                        let updatedDealerHand = dealerHand.map((card, index) => ({\n                            ...card,\n                            isFaceDown: index === 1 ? false : card.isFaceDown,\n                        }));\n                        setDealerHand(updatedDealerHand);\n                        \n                    //Recalculate dealerHand value and display it by using setTmeout\n                        let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                    \n                        setDealerHandValue(updatedDealerHandValue);\n                        \n                        if(playerHand1Value>21 && playerHand2Value>21){\n                            setGameMessage(\"Bust... Dealer Wins!\");\n                            let result = \"Dealer Wins\";\n                            setResult(result);\n                            playerBusts();\n                            playerBusts();\n                            endGame();\n                            return;\n                        }\n                        const drawCardforDealer = () => {\n                    //check handValue, drawCard until handValue is 17 or higher\n                            if (updatedDealerHandValue < 17 && deck){\n                                //delay to draw card by 1.5 seconds, card with facedown\n                                setTimeout(() => {\n                                    const newCard = { ...deck.drawCard(), isFaceDown: true };\n                                    updatedDealerHand = [...updatedDealerHand, newCard];\n                                    setDealerHand(updatedDealerHand);\n                                    //delay displaying last card with face up by 1 seconds\n                                    setTimeout(()=>{\n                                        const newHand = [...updatedDealerHand];\n                                        newHand[newHand.length - 1].isFaceDown = false; \n                                        setDealerHand(newHand);\n                                        \n                                        updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                        setDealerHandValue(updatedDealerHandValue);\n                                    },500);\n                                        \n                                }, 500);\n    \n                                setTimeout(()=>{\n                                    if(updatedDealerHandValue < 17){\n                                        setTimeout(()=>{\n                                            drawCardforDealer();\n                                        },1000);\n                                        \n                                    }else {\n                                        setTimeout(()=>{\n                                            finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                        },2000);\n                                        \n                                    }\n                                },1000);\n                                    \n                                }else{\n                                    setTimeout(()=>{\n                                        \n                                        finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                    },500);\n                                    \n                                }\n                        }\n                        \n                        setTimeout(()=>{\n                            drawCardforDealer();\n                        },2000);\n                        \n                    },1000);\n                }\n            }else{\n                setStandPressed(true);\n                // Make 2nd dealer card visible, after 1 second delay\n            setTimeout(()=>{ \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                \n            //Recalculate dealerHand value and display it by using setTmeout\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n            \n                setDealerHandValue(updatedDealerHandValue);\n            \n                const drawCardforDealer = () => {\n            //check handValue, drawCard until handValue is 17 or higher\n                    if (updatedDealerHandValue < 17 && deck){\n                        //delay to draw card by 1.5 seconds, card with facedown\n                        setTimeout(() => {\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            updatedDealerHand = [...updatedDealerHand, newCard];\n                            setDealerHand(updatedDealerHand);\n                            //delay displaying last card with face up by 1 seconds\n                            setTimeout(()=>{\n                                const newHand = [...updatedDealerHand];\n                                newHand[newHand.length - 1].isFaceDown = false; \n                                setDealerHand(newHand);\n                                \n                                updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                setDealerHandValue(updatedDealerHandValue);\n                            },500);\n                                \n                        }, 1000);\n\n                        setTimeout(()=>{\n                            if(updatedDealerHandValue < 17){\n                                setTimeout(()=>{\n                                    drawCardforDealer();\n                                },1500);\n                                \n                            }else {\n                                setTimeout(()=>{\n                                    finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                                },1500);\n                                \n                            }\n                        },1500);\n                            \n                        }else{\n                            setTimeout(()=>{\n                                \n                                finishDealerTurn(updatedDealerHand, updatedDealerHandValue,newHandValue);\n                            },1500);\n                            \n                        }\n                }\n                \n                setTimeout(()=>{\n                    drawCardforDealer();\n                },1500);\n                \n            },1000);\n            }\n    }\n\n    const finishDealerTurn = (finalDealerHand,finalDealerHandValue,newHandValue=playerHandValue) => {\n        \n        setTimeout(()=>{\n            setDealerHand(finalDealerHand);\n            setDealerHandValue(finalDealerHandValue);\n        \n            if (splitPressed){\n                let outcome1=\"\";\n                let outcome2=\"\";\n                //playerHand1 outcome\n                if (finalDealerHandValue > 21) {\n                    outcome1 = \"PlayerWins Bust\";\n            \n                } else if (playerHand1Value > 21) {\n                    outcome1 = \"DealerWins Bust\";\n            \n                } else if (playerHand1Value === 21 && finalDealerHandValue !== 21) {\n                    outcome1 = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && playerHand1Value !== 21) {\n                    outcome1 = \"DealerWins\";\n    \n                } else if (playerHand1Value > finalDealerHandValue) {\n                    outcome1 = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > playerHand1Value) {\n                    outcome1 = \"DealerWins\";\n\n                } else {\n                    outcome1 = \"Push\";\n                }\n                //playerHand2 outcome\n                if (finalDealerHandValue > 21) {\n                    outcome2 = \"PlayerWins Bust\";\n            \n                } else if (playerHand2Value > 21) {\n                    outcome2 = \"DealerWins Bust\";\n            \n                } else if (playerHand2Value === 21 && finalDealerHandValue !== 21) {\n                    outcome2 = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && playerHand2Value !== 21) {\n                    outcome2 = \"DealerWins\";\n    \n                } else if (playerHand2Value > finalDealerHandValue) {\n                    outcome2 = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > playerHand2Value) {\n                    outcome2 = \"DealerWins\";\n\n                } else {\n                    outcome2 = \"Push\";\n                }\n                \n\n                setGameOutcome1(outcome1);\n                setGameOutcome2(outcome2);\n            }else{\n                let outcome=\"\";\n                if (finalDealerHandValue > 21) {\n                    outcome = \"PlayerWins Bust\";\n            \n                } else if (newHandValue > 21) {\n                    outcome = \"DealerWins Bust\";\n            \n                } else if (newHandValue === 21 && finalDealerHandValue !== 21) {\n                    outcome = \"PlayerWins\";\n\n                } else if (finalDealerHandValue === 21 && newHandValue !== 21) {\n                    outcome = \"DealerWins\";\n    \n                } else if (newHandValue > finalDealerHandValue) {\n                    outcome = \"PlayerWins\";\n            \n                } else if (finalDealerHandValue > newHandValue) {\n                    outcome = \"DealerWins\";\n\n                } else {\n                    outcome = \"Push\";\n                }\n\n                setGameOutcome(outcome);\n            }\n        },500);\n        \n    };\n    \n\n    const handleDouble = () =>{\n        \n            \n            if (playerHand.length !== 2) {\n                setGameMessage(\"Doubling down is not allowed at this time.\");\n                return;\n            }\n            \n            // Check if the player has enough chips to double the bet\n            if (playerChips >= bet && !gamePause) {\n                console.log(\"calling doublesPlayed within handleDouble\");\n                doublesPlayed();\n                setStandPressed(true);\n                setPlayerChips((prevChips) => prevChips - bet); // Deduct the additional bet amount from player's chips\n                setBet((prevBet) => prevBet * 2); // Double the bet\n                \n                // Draw one additional card for the player and add it to their hand\n                    setTimeout(() => {\n                        const newCard = { ...deck.drawCard(), isFaceDown: true };\n                        const updatedPlayerHand = [...playerHand, newCard];\n                        setPlayerHand(updatedPlayerHand);\n                        //delay displaying last card with face up by 0.5 seconds\n                        setTimeout(()=>{\n                            const newHand = [...updatedPlayerHand];\n                            newHand[newHand.length - 1].isFaceDown = false; \n                            setPlayerHand(newHand);\n\n                            const newPlayerHandValue = calculateHandValue(newHand);\n                            \n                            setPlayerHandValue(newPlayerHandValue);\n                            // Check if the player is bust after doubling down\n                            setTimeout(()=>{\n                                if (newPlayerHandValue > 21) {\n                                const updatedDealerHand = dealerHand.map((card, index) => ({\n                                    ...card,\n                                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                                }));\n                                setDealerHand(updatedDealerHand);\n                                setGameOutcome(\"DealerWins Bust\");\n                            } else {\n                                handleStand(newPlayerHandValue);\n                            } \n                            },500);\n                        },500);\n                    }, 500);}\n                    else {\n                        // Not enough chips or game is paused\n                        setGameMessage(\"Not enough chips to double down.\");\n                    }\n\n    };\n\n    const handleHit = (hand = null) =>{\n        let outcome1;\n        let outcome2;\n        if(splitPressed){\n            if(hand1TurnFinished && hand2TurnFinished){\n                let newOutcome =\"DealerWins\";\n            \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n                setGameOutcome(newOutcome);\n                setGameMessage(\"Bust... Dealer Wins!\");\n                playerBusts();\n                let result = \"Dealer Wins\";\n                setResult(result);\n                \n                endGame();\n            }else{\n                if(hand===\"hand1\"){\n                    if(hand1TurnFinished){\n                        return;\n                    }else{\n                        if(playerHand1Value ===21){\n                            setHand1TurnFinished(true);\n                            return;\n                        }else\n                        if(deck.cards.length > 0){\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand1 = [...playerHand1, newCard];\n            \n                            setPlayerHand1(updatedPlayerHand1);\n            \n                            setTimeout(() => {\n                                const newHand = [...updatedPlayerHand1];\n                                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                setPlayerHand1(newHand);\n                            },500);\n                            const playerHand1Value = calculateHandValue(updatedPlayerHand1);\n                        \n                            setPlayerHand1Value(playerHand1Value);\n                            if(playerHand1Value > 21){\n                                outcome1 = \"DealerWins Bust\";\n                                setHand1TurnFinished(true);\n                                setGameOutcome1(outcome1);\n                                return;\n                            }\n                        }\n                    }\n                    \n                }else if(hand===\"hand2\"){\n                    if(hand2TurnFinished){\n                        return;\n                    }else{\n                        if(playerHand2Value ===21){\n                            setHand1TurnFinished(true);\n                            return;\n                        }else\n                        if(deck.cards.length > 0){\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand2 = [...playerHand2, newCard];\n            \n                            setPlayerHand2(updatedPlayerHand2);\n            \n                            setTimeout(() => {\n                                const newHand = [...updatedPlayerHand2];\n                                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                                setPlayerHand2(newHand);\n                            },500);\n                            const playerHand2Value = calculateHandValue(updatedPlayerHand2);\n                        \n                            setPlayerHand2Value(playerHand2Value);\n                            if(playerHand2Value > 21){\n                                outcome2 = \"DealerWins Bust\";\n                                setHand2TurnFinished(true);\n                                setGameOutcome1(outcome2);\n                                return;\n                            }\n                        }\n                    }\n                    \n                }    \n            }\n            \n        }else{\n            setHitPressed(true);\n            if(deck.cards.length > 0){\n            const newCard = { ...deck.drawCard(), isFaceDown: true };\n            const updatedPlayerHand = [...playerHand, newCard];\n\n            setPlayerHand(updatedPlayerHand);\n\n            setTimeout(() => {\n                const newHand = [...updatedPlayerHand];\n                newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                setPlayerHand(newHand);\n            },500);\n\n            const playerHandValue = calculateHandValue(updatedPlayerHand);\n            \n            setPlayerHandValue(playerHandValue);\n            let newOutcome;\n\n            if(playerHandValue>21){\n                setStandPressed(true);\n                newOutcome =\"DealerWins Bust\";\n                \n                setGameOutcome(newOutcome);\n            \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n            }else if(playerHandValue ===21){\n        \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                //Recalculate dealerHand value and display it by using setTmeout\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n    \n                const drawCardforDealer = () => {\n                    if (updatedDealerHandValue < 17 && deck){\n                            const newCard = deck.drawCard();\n                            updatedDealerHand = [...updatedDealerHand,newCard];\n                            updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n    \n                            if(updatedDealerHandValue < 17){\n                                drawCardforDealer();\n                            }\n                        }\n                }\n    \n                drawCardforDealer();\n                setDealerHand(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n    \n                if(updatedDealerHandValue>playerHandValue && updatedDealerHandValue<=21){\n                    newOutcome=\"DealerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                \n                }else if(updatedDealerHandValue===playerHandValue){\n\n                    newOutcome=\"Push\";\n                    \n                    setGameOutcome(newOutcome);\n\n\n        \n                }else if(updatedDealerHandValue >21){\n                    newOutcome=\"PlayerWins\";\n                    \n                    setGameOutcome(newOutcome);\n\n                }\n                else{\n                    newOutcome=\"PlayerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                }\n                setGameRunning(false);\n            }\n        }\n        }\n        \n    }\n\n    const getCardValue = (rank) =>{\n        const cardsValue = {\n            'two': 2,\n            'three': 3,\n            'four': 4,\n            'five': 5,\n            'six': 6,\n            'seven': 7,\n            'eight': 8,\n            'nine': 9,\n            'ten': 10,\n            'jack': 10,\n            'queen': 10,\n            'king': 10,\n            'ace': 11,\n        }\n        return cardsValue[rank] || 0;\n    }\n\n    const calculateHandValue = (hand) => {\n        let total = 0;\n        let aceCount = 0;\n\n        hand.forEach(card => {\n            let value = getCardValue(card.rank);\n            if (card.rank === 'ace') {\n                aceCount++;\n            }\n            total += value;\n        })\n\n        while (total > 21 && aceCount > 0) {\n            total -= 10;\n            aceCount -= 1;\n        }\n\n        return total;\n    }\n\n    \n\n  \n    useEffect(() => {\n        const newPlayerHandText = convertHandToText(playerHand);\n        setPlayerHandText(newPlayerHandText);\n      }, [playerHand]);\n      \n    useEffect(() => {\n    const newDealerHandText = convertHandToText(dealerHand);\n    setDealerHandText(newDealerHandText);\n    }, [dealerHand]);\n\n    useEffect(()=>{\n        \n    },[previousBet]);\n\n    useEffect(()=>{\n        if(gameResultsCount.totalGamesPlayed){\n            const newWidth = (gamesCount)/20*100;\n            setProgressBarWidth(newWidth);\n            \n            if(newWidth===100){\n                setPlayerChips(chips=>chips+100);\n                setGameMessage(\"Next Level! You get $100 extra chips!!!\");\n                \n                const timeoutId = setTimeout(() => {\n                    setGamesCount(1);\n                    setProgressBarWidth(5); \n                }, 5000);\n\n                return () => clearTimeout(timeoutId);\n            }\n            ;\n        }\n    },[gameResultsCount.totalGamesPlayed]);\n\n    // useEffect(() => {\n    //     if (playerHand.length > 0) {\n    //         const newPlayerHandValue = calculateHandValue(playerHand);\n    //         setPlayerHandValue(newPlayerHandValue);\n    \n    //         // Move the logic to determine if the game should proceed to handleStand or another function here\n    //         if (newPlayerHandValue > 21) {\n    //             setGameOutcome(\"DealerWins Bust\");\n    //             // Additional logic for dealer's turn can go here\n    //         } else {\n    //             return;\n    //         }\n    //     }\n    // }, [playerHand]); // Only re-run the effect if playerHand changes\n    \n    useEffect(() => {\n        if(playerHand.length>0){\n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n        }\n        if(dealerHand.length>0){\n            const dealerHandValue = calculateHandValue(dealerHand);\n            setDealerHandValue(dealerHandValue);\n        }\n \n    }, [playerHand,dealerHand]);\n\n    useEffect(() => {\n        if (gameOutcome || gameOutcome1 || gameOutcome2) {\n            handleGameResult();\n        }\n        }, [gameOutcome, gameOutcome1, gameOutcome2]);\n\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n        if (bet > 0) {\n            setGameMessage(`$${bet}`);\n        }\n    }, [bet]);\n\n    useEffect(() => {\n        return () => {\n            clearTimeout(endGameTimeout.current);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (isFirstRender.current) {\n            isFirstRender.current = false;\n            return;\n        }\n    }, [bet, playerChips]);\n\n    useEffect(()=>{\n        if (hand1TurnFinished && hand2TurnFinished) {\n            \n            // Now you can safely perform actions that depend on both hands being finished.\n            setStandPressed(true);\n            handleStand();\n            // Any additional logic that needs to run after both hands are finished can go here.\n        }\n    },[hand1TurnFinished,hand2TurnFinished])\n\n    useEffect(() => {\n        setMessages(twoHandsPosibilities());\n    }, []);\n\n\n    return (\n        <>\n        {handleSettings && <div className='odds-main-box' onClick={()=>callSettings()}>\n                <div className=\"message-box-settings\">\n                    <button onClick={\n                        (e) => {e.stopPropagation(); \n                        setShowMessages(!showMessages);\n                        }}>Show Combos\n                    </button>\n                    {/* {showMessages && (\n                        <div className='message-box-settings'>\n                            {messages.map((message, index) => (\n                                <p className=\"combo-text\" key={index}>{message}</p>\n                            ))}\n                        </div>\n                    )} */}\n\n                </div>\n            </div>}\n        \n        <GameHistory\n            gameResultsCount={gameResultsCount}\n            gameRoundsHistory={gameRoundsHistory}\n        />\n        <div id=\"container\">\n        <Header\n            playerHandValue={playerHandValue}\n            dealerHandValue={dealerHandValue}\n            playerChips={playerChips}\n            progressBarWidth={progressBarWidth}\n            result={result}\n            callSettings={callSettings}\n            />\n            \n\n            <div className=\"game-area\">\n                <div id='score-bubble'>\n                    <div id=\"dealer-score-bubble\" \n                        style={\n                        {visibility: showScores ? 'visible' : 'hidden'}}>\n                        {dealerHand[1] && dealerHand[1].isFaceDown ? dealerFirstCardValue : dealerHandValue}\n                    </div>\n                </div>\n                \n                <div id=\"dealer-message-box\">\n                    <div id=\"dealerhand-fixedbox\">\n                        <Player hand={dealerHand} isDealer={true} />\n                    </div>\n\n                    <div className=\"message-container\">\n                        <div id=\"message-box\">{gameMessage}</div>\n                    </div>\n                </div>\n                \n\n                {\n                twoHands ? (\n                    <div id=\"player-2hands-box\">\n                        \n                        <div id=\"player-hand1\">\n                            \n                            <Player hand={playerHand1} isDealer={false} />\n                            \n                            <div id='score-bubble'>\n                                <div id=\"player1-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                    {playerHand1Value}\n                                </div>\n                            </div>\n                            <div id=\"split-buttons-box\">\n                                <img    \n                                        src={btnStand} \n                                        className={`split-btn-stand ${(standPressed || hand1TurnFinished) ? 'disabled' : ''}`}\n                                        alt='stand-button' \n                                        title=\"Stand\"\n                                        onClick={(!standPressed && !hand1TurnFinished)? ()=>handleStand(playerHand1Value,\"hand1\") : undefined}\n                                        style={{cursor: (standPressed || hand1TurnFinished)?'not-allowed':'pointer'}}\n                                    \n                                />\n                                \n                                <img    \n                                        src={btnHit} \n                                        className={`split-btn-hit ${(standPressed || hand1TurnFinished) ? 'disabled': ''}`}\n                                        alt='hit-button' \n                                        title=\"Hit\"\n                                        onClick={(!standPressed && !hand1TurnFinished) ? ()=>handleHit(\"hand1\") : undefined}\n                                        style={{cursor:((standPressed || hand1TurnFinished)) ? 'not-allowed':'pointer'}}\n                            \n                                />\n                            \n                            </div>\n                        </div>\n\n                        <div id=\"player-hand2\">\n                            \n                            <Player hand={playerHand2} isDealer={false} /> \n\n                            <div id='score-bubble'>\n                                <div id=\"player2-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>\n                                    {playerHand2Value}\n                                </div>\n                            </div>\n                            <div \n                                id=\"split-buttons-box\" >\n\n                                <img    \n                                        src={btnStand} \n                                        className={`split-btn-stand ${(standPressed || hand2TurnFinished)? 'disabled' : ''}`}\n                                        alt='stand-button' \n                                        title=\"Stand\"\n                                        onClick={(!standPressed && !hand2TurnFinished) ? ()=>handleStand(playerHand2Value,\"hand2\") : undefined}\n                                        style={{cursor: (standPressed || hand2TurnFinished)?'not-allowed':'pointer'}}\n\n                                />\n                            \n                                \n                                <img    \n                                        src={btnHit} \n                                        className={`split-btn-hit ${(standPressed || hand2TurnFinished) ? 'disabled': ''}`}\n                                        alt='hit-button' \n                                        title=\"Hit\"\n                                        onClick={(!standPressed && !hand2TurnFinished)? ()=>handleHit(\"hand2\") : undefined}\n                                        style={{cursor:(standPressed || hand1TurnFinished) ? 'not-allowed':'pointer'}}\n                            \n                                />\n                            \n                            </div>\n                        </div>\n                    </div>\n                ) : (\n                    <div id=\"player-hand-box\">\n                            \n                            <Player hand={playerHand} isDealer={false} />\n                            \n                            <div id='score-bubble'>\n                                <div id=\"player-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>    \n                                    {playerHandValue}\n                                </div>\n                            </div>\n                        \n                    </div>\n                )}\n            </div>\n            \n            <div id='bet-main-container'>\n                    <div id='bet-container-box'\n                        style={{\n                        visibility: !gameRunning ? 'visible' : 'hidden', \n                        display: 'flex', \n                        gap: '8px', \n                        justifyContent: 'center',\n                        position:'relative',\n                        }}\n                    \n                        >\n                        \n                    \n                        {Object.entries(betChips).map(([chipType, { imgSrc, count, position }], index) => (\n                            Array.from({ length: count }).map((_, chipIndex) => (\n                                <img \n                                    key={`${chipType}-${chipIndex}`}\n                                    src={imgSrc}\n                                    alt={`Chip of ${chipType.replace('chip', '')} value`} \n                                    className='bet-chip-img'\n                                    style={{ \n                                        position: 'absolute', \n                                        // transform:'translateY(15px)',\n                                        bottom: position + chipIndex * 5 -25,\n                                        left: `calc(50% + ${index * (chipWidth + gap) - totalWidth / 2}px)`\n                                    }} \n                                />\n                            ))\n                        ))}    \n                    </div>\n            </div>\n\n\n            <Controls\n            handleHit={handleHit}\n            handleStand={handleStand}\n            handleDouble={handleDouble}\n            onNewGame={handleNewGame}\n            gameRunning={gameRunning}\n            onBetPlaced={onBetPlaced}\n            bet={bet}\n            buttonsHidden={buttonsHidden}\n            handleChipClick={handleChipClick}\n            standPressed={standPressed}\n            splitAvailable={splitAvailable}\n            handleSplit={handleSplit}\n            hitPressed={hitPressed}\n            twoHands={twoHands}\n            setPreviousBet={setPreviousBet}\n            clearBet={clearBet}\n            previousBet={previousBet}\n            setBet={setBet}\n            setBetChips={setBetChips}\n            playerChips={playerChips}\n            />\n        </div>\n        <GameRecap\n            gameResultsCount={gameResultsCount}\n        />\n       </>\n    );\n};\nexport default GameBoard;","import React,{useEffect,useState} from 'react';\nimport './blackjack.css';\nimport GameBoard from './GameBoard';\nimport LoadingOverlay from './LoadingOverlay'\n\n\nconst BlackJack = () => {\n    const [isLoading,setIsLoading] = useState(true);\n    // const [isFlipped, setIsFlipped] = useState(false);\n    const [opacity, setOpacity] = useState(1);\n    // const [zIndex, setZIndex] = useState(-1);\n    const [isGameActive, setIsGameActive] = useState(false);\n\n    const handleGameRunningChange = (isRunning) => {\n      setIsGameActive(isRunning); // Use the renamed state setter\n  };\n  \n\n    // const toggleFlip = () => {\n    //     if (!isGameActive) { // Use the renamed state variable\n    //         setIsFlipped(!isFlipped);\n    //         setTimeout(() => {\n    //             setOpacity(opacity === 0.45 ? 1 : 0.45);\n    //             setZIndex(zIndex === -1 ? 1 : -1);\n    //         }, 300);\n    //     }\n    // };\n    useEffect(() => {\n        // Start the fade-out effect slightly before hiding the overlay\n        const fadeOutTimer = setTimeout(() => {\n          // Assuming you have a method to change the overlay's opacity\n          // This could be directly via CSS classes or inline styles\n          setOpacity(0); // This assumes your LoadingOverlay responds to opacity changes\n        }, 4000); // Start fade out slightly before removing the overlay\n      \n        const removeOverlayTimer = setTimeout(() => {\n            setIsLoading(false);\n          }, 5000); // 4 seconds + 1 second of fade-out\n      \n        return () => {\n            clearTimeout(fadeOutTimer);\n            clearTimeout(removeOverlayTimer); \n        };\n      }, []);\n\n    return (\n        <>\n        \n            {/* <div id=\"container\" className={isFlipped ? 'flipped' : ''} onClick={toggleFlip} style={{'--bg-opacity': opacity, '--z-index': zIndex}}> */}\n            <div id=\"bj-main-container\">\n                \n                {/* <LoadingOverlay isVisible={isLoading} style={{ opacity: opacity }}  />\n                <GameBoard onGameRunningChange={handleGameRunningChange} /> */}\n                <GameBoard/>\n            </div>\n            \n        </>\n    );\n};\n\nexport default BlackJack;\n","// import React,{ useState, useEffect } from \"react\"\nimport React from 'react';\nimport Main from './Main_Page/Main';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport BlackJack from './BlackJack/BlackJack';\nimport './BlackJack/blackjack.css';\nimport './Main_Page/main.css';\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Footer from \"./Footer\";\n// import Bootstrap from \"./Boot\";\n// import './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n// import './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \n                                              \n\n\nexport default function App() {\n\n  \n//   const [isLoading, setIsLoading] = useState(true); \n//   const [darkMode, setDarkMode] = useState(false);\n\n\n//   function toggleDarkMode() {\n//     setDarkMode(!darkMode);\n//   }\n//   useEffect(() => {\n//     document.body.style.backgroundColor = darkMode ? '#23252C' : '#ccc';\n//     document.body.style.color = darkMode ? '#ccc' : '#23252C';\n//   }, [darkMode]);\n\n//   useEffect(() => {\n//     if (darkMode) {\n//         document.body.classList.add(\"dark-mode\");\n//     } else {\n//         document.body.classList.remove(\"dark-mode\");\n//     }\n// }, [darkMode]);\n    return (\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Main/>}/>\n          <Route path=\"/blackjack\" element={<BlackJack/>}/>\n        </Routes>\n      </BrowserRouter>\n        \n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \n// import $ from 'jquery'; \n// import Popper from 'popper.js'; \nimport './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}