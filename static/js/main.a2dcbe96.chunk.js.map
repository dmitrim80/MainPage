{"version":3,"sources":["BlackJack/images/vegas-back2.png","BlackJack/images/ace_of_hearts.png","BlackJack/images/2_of_hearts.png","BlackJack/images/3_of_hearts.png","BlackJack/images/4_of_hearts.png","BlackJack/images/5_of_hearts.png","BlackJack/images/6_of_hearts.png","BlackJack/images/7_of_hearts.png","BlackJack/images/8_of_hearts.png","BlackJack/images/9_of_hearts.png","BlackJack/images/10_of_hearts.png","BlackJack/images/jack_of_hearts.png","BlackJack/images/queen_of_hearts.png","BlackJack/images/king_of_hearts.png","BlackJack/images/ace_of_diamonds.png","BlackJack/images/2_of_diamonds.png","BlackJack/images/3_of_diamonds.png","BlackJack/images/4_of_diamonds.png","BlackJack/images/5_of_diamonds.png","BlackJack/images/6_of_diamonds.png","BlackJack/images/7_of_diamonds.png","BlackJack/images/8_of_diamonds.png","BlackJack/images/9_of_diamonds.png","BlackJack/images/10_of_diamonds.png","BlackJack/images/jack_of_diamonds.png","BlackJack/images/queen_of_diamonds.png","BlackJack/images/king_of_diamonds.png","BlackJack/images/ace_of_spades.png","BlackJack/images/2_of_spades.png","BlackJack/images/3_of_spades.png","BlackJack/images/4_of_spades.png","BlackJack/images/5_of_spades.png","BlackJack/images/6_of_spades.png","BlackJack/images/7_of_spades.png","BlackJack/images/8_of_spades.png","BlackJack/images/9_of_spades.png","BlackJack/images/10_of_spades.png","BlackJack/images/jack_of_spades.png","BlackJack/images/queen_of_spades.png","BlackJack/images/king_of_spades.png","BlackJack/images/ace_of_clubs.png","BlackJack/images/2_of_clubs.png","BlackJack/images/3_of_clubs.png","BlackJack/images/4_of_clubs.png","BlackJack/images/5_of_clubs.png","BlackJack/images/6_of_clubs.png","BlackJack/images/7_of_clubs.png","BlackJack/images/8_of_clubs.png","BlackJack/images/9_of_clubs.png","BlackJack/images/10_of_clubs.png","BlackJack/images/jack_of_clubs.png","BlackJack/images/queen_of_clubs.png","BlackJack/images/king_of_clubs.png","BlackJack/images/5-chip-v2.png","BlackJack/images/10-chip-v2.png","BlackJack/images/25-chip-v2.png","BlackJack/images/50-chip-v2.png","BlackJack/images/100-chip-v2.png","BlackJack/images/250-chip-v2.png","BlackJack/images/stand-button2.png","BlackJack/images/double-button2.png","BlackJack/images/hit-button2.png","BlackJack/images/clear-button2.png","BlackJack/images/bet-button2.png","BlackJack/images/logo-blackjack.png","BlackJack/Deck.js","BlackJack/Card.js","BlackJack/Player.js","BlackJack/Controls.js","BlackJack/Header.js","BlackJack/GameBoard.js","BlackJack/BlackJack.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Deck","constructor","this","cards","createDeck","suits","ranks","deck","suit","rank","push","shuffleDeck","i","length","random","Math","floor","drawCard","pop","cardImages","heartsAce","heartsTwo","heartsThree","heartsFour","heartsFive","heartsSix","heartsSeven","heartsEight","heartsNine","heartsTen","heartsJack","heartsQueen","heartsKing","diamondsAce","diamondsTwo","diamondsThree","diamondsFour","diamondsFive","diamondsSix","diamondsSeven","diamondsEight","diamondsNine","diamondsTen","diamondsJack","diamondsQueen","diamondsKing","spadesAce","spadesTwo","spadesThree","spadesFour","spadesFive","spadesSix","spadesSeven","spadesEight","spadesNine","spadesTen","spadesJack","spadesQueen","spadesKing","clubsAce","clubsTwo","clubsThree","clubsFour","clubsFive","clubsSix","clubsSeven","clubsEight","clubsNine","clubsTen","clubsJack","clubsQueen","clubsKing","cardBack","Card","_ref","isFaceDown","concat","React","createElement","className","src","alt","Player","hand","isDealer","Fragment","id","map","card","index","key","Controls","onNewGame","handleStand","handleDouble","handleHit","gameRunning","onBetPlaced","bet","buttonsHidden","handleChipClick","chips","value","img","chip5","chip10","chip25","chip50","chip100","chip250","btnStand","onClick","btnDouble","btnHit","btnBet","btnClear","style","height","overflow","visibility","display","gap","justifyContent","transform","chip","event","cursor","Header","playerHandValue","dealerHandValue","result","playerChips","gameMessage","BackCard","GameBoard","onGameRunningChange","setDeck","useState","dealerHand","setDealerHand","playerHand","setPlayerHand","setGameRunning","setPlayerHandValue","setDealerHandValue","setPlayerChips","setBet","setGameMessage","gameOutcome","setGameOutcome","showScores","setShowScores","newRound","setNewRound","endGameTimeout","useRef","gamePause","setGamePause","setButtonsHidden","betChips","setBetChips","totalChipTypes","Object","keys","totalWidth","isFirstRender","endGame","clearTimeout","current","setTimeout","console","log","updatedDealerHand","updatedDealerHandValue","calculateHandValue","drawCardforDealer","newCard","newHand","finishDealerTurn","finalDealerHand","finalDealerHandValue","outcome","resultMessage","total","aceCount","forEach","useEffect","finalBet","outcomeMessage","winAmount","prevChips","handleGameResult","trim","position","entries","_ref2","chipType","imgSrc","count","Array","from","_","chipIndex","bottom","left","updatedPlayerHand","newOutcome","prevBet","updatedPlayerHandValue","newPlayerHandValue","handleNewGame","newDeck","playerFirstCard","playerSecondCard","dealerFirstCard","dealerSecondCard","dealerHandValueOneCard","amount","prev","stopPropagation","currentChips","newChips","BlackJack","isFlipped","setIsFlipped","opacity","setOpacity","zIndex","setZIndex","isGameActive","setIsGameActive","isRunning","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,yC,kBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,+C,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,6C,gBCA3CD,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,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","file":"static/js/main.a2dcbe96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/vegas-back2.6fd38ed5.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_hearts.41453bfa.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_hearts.f97ad85b.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_hearts.1c16fe10.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_hearts.5ad913da.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_hearts.8f6a2068.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_hearts.9cd2258c.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_hearts.a9afa10f.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_hearts.e6c01b13.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_hearts.cdb8fda5.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_hearts.2e6327a6.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_hearts.260cdba6.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_hearts.cf894646.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_hearts.37b5b9d7.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_diamonds.60b16fda.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_diamonds.0b5b5249.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_diamonds.b529e1c1.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_diamonds.58bd0a63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_diamonds.e27b4b0a.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_diamonds.ee5053d4.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_diamonds.df3e8e93.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_diamonds.8afee604.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_diamonds.86608eb9.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_diamonds.4324d712.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_diamonds.ac2092c1.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_diamonds.d5647c19.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_diamonds.1a5882a6.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_spades.ce4f163f.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_spades.2354275d.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_spades.ad02dc95.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_spades.df185c63.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_spades.aa8a0720.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_spades.5d221b2a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_spades.c0f5e5f9.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_spades.74766755.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_spades.e5b29fde.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_spades.2401fe36.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_spades.92aff044.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_spades.6d100fc3.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_spades.9b18a729.png\";","module.exports = __webpack_public_path__ + \"static/media/ace_of_clubs.07d1c180.png\";","module.exports = __webpack_public_path__ + \"static/media/2_of_clubs.c83a7af4.png\";","module.exports = __webpack_public_path__ + \"static/media/3_of_clubs.23a7a6ac.png\";","module.exports = __webpack_public_path__ + \"static/media/4_of_clubs.02deab49.png\";","module.exports = __webpack_public_path__ + \"static/media/5_of_clubs.3781bf44.png\";","module.exports = __webpack_public_path__ + \"static/media/6_of_clubs.9c2fdf6a.png\";","module.exports = __webpack_public_path__ + \"static/media/7_of_clubs.112be1df.png\";","module.exports = __webpack_public_path__ + \"static/media/8_of_clubs.6ed0b85e.png\";","module.exports = __webpack_public_path__ + \"static/media/9_of_clubs.784ea770.png\";","module.exports = __webpack_public_path__ + \"static/media/10_of_clubs.c29b28f3.png\";","module.exports = __webpack_public_path__ + \"static/media/jack_of_clubs.1861c1e4.png\";","module.exports = __webpack_public_path__ + \"static/media/queen_of_clubs.9e84dd75.png\";","module.exports = __webpack_public_path__ + \"static/media/king_of_clubs.2ad9bff3.png\";","module.exports = __webpack_public_path__ + \"static/media/5-chip-v2.5a524f75.png\";","module.exports = __webpack_public_path__ + \"static/media/10-chip-v2.3a023e24.png\";","module.exports = __webpack_public_path__ + \"static/media/25-chip-v2.c7981237.png\";","module.exports = __webpack_public_path__ + \"static/media/50-chip-v2.b270a5eb.png\";","module.exports = __webpack_public_path__ + \"static/media/100-chip-v2.56f3f00f.png\";","module.exports = __webpack_public_path__ + \"static/media/250-chip-v2.b303ef66.png\";","module.exports = __webpack_public_path__ + \"static/media/stand-button2.b6985f69.png\";","module.exports = __webpack_public_path__ + \"static/media/double-button2.ae841ef6.png\";","module.exports = __webpack_public_path__ + \"static/media/hit-button2.2121fae0.png\";","module.exports = __webpack_public_path__ + \"static/media/clear-button2.00626382.png\";","module.exports = __webpack_public_path__ + \"static/media/bet-button2.0ae68190.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-blackjack.96aa3714.png\";","class Deck{\n    constructor(){\n        this.cards = this.createDeck();\n    }\n\n    createDeck(){\n        const suits = [\"hearts\", \"diamonds\",\"spades\",\"clubs\"];\n        const ranks = [\"ace\", \"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\",\"ten\",\"jack\",\"queen\",\"king\"];\n        const deck = [];\n        \n        for (const suit of suits){\n            for(const rank of ranks){\n                deck.push({suit,rank});\n            }\n        }\n        return deck;\n    }\n    \n    shuffleDeck(){\n        for(let i = this.cards.length - 1; i>0;i-- ){\n            const random = Math.floor(Math.random()*(i+1));\n            [this.cards[i],this.cards[random]] = [this.cards[random],this.cards[i]];\n        }\n    }\n\n    drawCard(){\n        return this.cards.pop();\n    }\n}\nexport default Deck;","import React from 'react'\nimport cardBack from './images/vegas-back2.png';\nimport heartsAce from './images/ace_of_hearts.png';\nimport heartsTwo from './images/2_of_hearts.png';\nimport heartsThree from './images/3_of_hearts.png';\nimport heartsFour from './images/4_of_hearts.png';\nimport heartsFive from './images/5_of_hearts.png';\nimport heartsSix from './images/6_of_hearts.png';\nimport heartsSeven from './images/7_of_hearts.png';\nimport heartsEight from './images/8_of_hearts.png';\nimport heartsNine from './images/9_of_hearts.png';\nimport heartsTen from './images/10_of_hearts.png';\nimport heartsJack from './images/jack_of_hearts.png';\nimport heartsQueen from './images/queen_of_hearts.png';\nimport heartsKing from './images/king_of_hearts.png';\n\nimport diamondsAce from './images/ace_of_diamonds.png';\nimport diamondsTwo from './images/2_of_diamonds.png';\nimport diamondsThree from './images/3_of_diamonds.png';\nimport diamondsFour from './images/4_of_diamonds.png';\nimport diamondsFive from './images/5_of_diamonds.png';\nimport diamondsSix from './images/6_of_diamonds.png';\nimport diamondsSeven from './images/7_of_diamonds.png';\nimport diamondsEight from './images/8_of_diamonds.png';\nimport diamondsNine from './images/9_of_diamonds.png';\nimport diamondsTen from './images/10_of_diamonds.png';\nimport diamondsJack from './images/jack_of_diamonds.png';\nimport diamondsQueen from './images/queen_of_diamonds.png';\nimport diamondsKing from './images/king_of_diamonds.png';\n\nimport spadesAce from './images/ace_of_spades.png';\nimport spadesTwo from './images/2_of_spades.png';\nimport spadesThree from './images/3_of_spades.png';\nimport spadesFour from './images/4_of_spades.png';\nimport spadesFive from './images/5_of_spades.png';\nimport spadesSix from './images/6_of_spades.png';\nimport spadesSeven from './images/7_of_spades.png';\nimport spadesEight from './images/8_of_spades.png';\nimport spadesNine from './images/9_of_spades.png';\nimport spadesTen from './images/10_of_spades.png';\nimport spadesJack from './images/jack_of_spades.png';\nimport spadesQueen from './images/queen_of_spades.png';\nimport spadesKing from './images/king_of_spades.png';\n\nimport clubsAce from './images/ace_of_clubs.png';\nimport clubsTwo from './images/2_of_clubs.png';\nimport clubsThree from './images/3_of_clubs.png';\nimport clubsFour from './images/4_of_clubs.png';\nimport clubsFive from './images/5_of_clubs.png';\nimport clubsSix from './images/6_of_clubs.png';\nimport clubsSeven from './images/7_of_clubs.png';\nimport clubsEight from './images/8_of_clubs.png';\nimport clubsNine from './images/9_of_clubs.png';\nimport clubsTen from './images/10_of_clubs.png';\nimport clubsJack from './images/jack_of_clubs.png';\nimport clubsQueen from './images/queen_of_clubs.png';\nimport clubsKing from './images/king_of_clubs.png';\n\nconst cardImages = {\n    \"hearts-ace\": heartsAce,\n     \"hearts-two\": heartsTwo,\n     \"hearts-three\":heartsThree,\n     \"hearts-four\":heartsFour ,\n     \"hearts-five\":heartsFive ,\n     \"hearts-six\":heartsSix ,\n     \"hearts-seven\":heartsSeven ,\n     \"hearts-eight\":heartsEight, \n     \"hearts-nine\":heartsNine ,\n     \"hearts-ten\":heartsTen ,\n     \"hearts-jack\":heartsJack ,\n     \"hearts-queen\":heartsQueen ,\n     \"hearts-king\":heartsKing ,\n     \n     \"diamonds-ace\": diamondsAce,\n     \"diamonds-two\": diamondsTwo,\n     \"diamonds-three\":diamondsThree,\n     \"diamonds-four\":diamondsFour ,\n     \"diamonds-five\":diamondsFive ,\n     \"diamonds-six\":diamondsSix ,\n     \"diamonds-seven\":diamondsSeven ,\n     \"diamonds-eight\":diamondsEight, \n     \"diamonds-nine\":diamondsNine ,\n     \"diamonds-ten\":diamondsTen ,\n     \"diamonds-jack\":diamondsJack ,\n     \"diamonds-queen\":diamondsQueen ,\n     \"diamonds-king\":diamondsKing ,\n    \n     \"spades-ace\": spadesAce,\n     \"spades-two\": spadesTwo,\n     \"spades-three\":spadesThree,\n     \"spades-four\":spadesFour ,\n     \"spades-five\":spadesFive ,\n     \"spades-six\":spadesSix ,\n     \"spades-seven\":spadesSeven ,\n     \"spades-eight\":spadesEight, \n     \"spades-nine\":spadesNine ,\n     \"spades-ten\":spadesTen ,\n     \"spades-jack\":spadesJack ,\n     \"spades-queen\":spadesQueen ,\n     \"spades-king\":spadesKing ,\n    \n     \"clubs-ace\": clubsAce,\n     \"clubs-two\": clubsTwo,\n     \"clubs-three\":clubsThree,\n     \"clubs-four\":clubsFour ,\n     \"clubs-five\":clubsFive ,\n     \"clubs-six\":clubsSix ,\n     \"clubs-seven\":clubsSeven ,\n     \"clubs-eight\":clubsEight, \n     \"clubs-nine\":clubsNine ,\n     \"clubs-ten\":clubsTen ,\n     \"clubs-jack\":clubsJack ,\n     \"clubs-queen\":clubsQueen ,\n     \"clubs-king\":clubsKing ,\n     \"back\": cardBack,\n  };\n\n\nconst Card = ({suit,rank, isFaceDown}) => {\n  const cardImage = isFaceDown ? cardBack : cardImages[`${suit}-${rank}`];\n  \n    return (\n      <div className=\"card-box\">\n      <div className={`card-content ${!isFaceDown ? 'flip' : ''}`}>\n        <div className=\"card-front\">\n          <img src={cardImages[`${suit}-${rank}`]} alt={`${rank} of ${suit}`} />\n        </div>\n        <div className=\"card-back\">\n          <img src={cardBack} alt=\"Card Back\" />\n        </div>\n      </div>\n    </div>\n    )\n}\n\nexport default Card;","import React from 'react'\nimport Card from './Card';\nimport PropTypes from 'prop-types';\n\nconst Player = ({hand,isDealer}) => {\n\n\n\n  return (\n    <>\n        <div id={`${isDealer ? 'dealer-hand' : 'player-hand'}`}>\n            {hand.length > 0 ? (\n            <div id=\"hand\">\n            {hand.map((card, index) => (\n                <Card key={index} suit={card.suit} rank={card.rank} isFaceDown={card.isFaceDown} />\n            ))}\n            </div>\n             ) : (\n            <p></p>\n        )}\n        </div>\n\n    </>\n  );\n}\n\nPlayer.propTypes = {\n    hand: PropTypes.array,\n    isDealer: PropTypes.bool,\n}\n\nexport default Player","import React from 'react';\nimport chip5 from './images/5-chip-v2.png';\nimport chip10 from './images/10-chip-v2.png';\nimport chip25 from './images/25-chip-v2.png';\nimport chip50 from './images/50-chip-v2.png';\nimport chip100 from './images/100-chip-v2.png';\nimport chip250 from './images/250-chip-v2.png';\nimport btnStand from './images/stand-button2.png';\nimport btnDouble from './images/double-button2.png';\nimport btnHit from './images/hit-button2.png';\nimport btnClear from './images/clear-button2.png';\nimport btnBet from './images/bet-button2.png';\n\nconst Controls = ({ onNewGame, \n                    handleStand, \n                    handleDouble, \n                    handleHit, \n                    gameRunning, \n                    onBetPlaced,\n                    bet,\n                    buttonsHidden,\n                    handleChipClick }) => \n    {\n    const chips = [\n        { value: 5, img: chip5 },\n        { value: 10, img: chip10 },\n        { value: 25, img: chip25 },\n        { value: 50, img: chip50 },\n        { value: 100, img: chip100 },\n        { value: 250, img: chip250 },\n    ];\n\n    return (\n        <>\n        \n            <div id='buttons-container'>\n                {gameRunning ? (\n                    <>\n                        {!buttonsHidden && (\n                            <>\n                            <img src={btnStand} className='btn-stand' alt='stand-button' onClick={handleStand}/>\n                            <img src={btnDouble} className='btn-double' alt='double-button' onClick={handleDouble}/>\n                            <img src={btnHit} className='btn-hit' alt='hit-button' onClick={handleHit}/>\n                            </>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        <img src={btnBet} className='btn-new-game' alt='bet-button' onClick={() => bet === 0 ? onBetPlaced(0):onNewGame()}/>\n                        <img src={btnClear} className='btn-clear-bet' alt='clear-button' onClick={() => onBetPlaced(0)}/>\n                    </>\n                )}\n            </div>\n            \n            <div id='chips-row-wrapper-arrows' style={{\n                                        height: 'auto', \n                                        overflow: 'hidden'}}>\n                <div id='pointer-row-animation' style={{\n                                                visibility: !gameRunning ? 'visible' : 'hidden', display: 'flex', \n                                                gap: '44px', \n                                                justifyContent: 'center', \n                                                transform: 'translateY(3px)'}}>\n\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                    <div id='pointer-animation'>▼</div>\n                </div>\n            </div>\n            <div id='chips-row-wrapper' style={{ visibility: gameRunning ? 'hidden' : 'visible' }}>\n\n                {chips.map((chip, index) => (\n                <img key={index}\n                    src={chip.img}\n                    alt={`Chip ${chip.value}`}\n                    className='chip-img'\n                    onClick={(event) => {\n                        onBetPlaced(chip.value); \n                        handleChipClick(chip.value, chip.img, event);\n                    }}\n                    style={{ cursor: 'pointer' }} />\n                ))}\n                \n            </div>  \n        </>\n    );\n};\n\nexport default Controls;","import React from 'react'\nimport Logo from './images/logo-blackjack.png'\nimport BackCard from './images/vegas-back2.png'\n\nconst Header = ({playerHandValue,dealerHandValue,result,bet,playerChips,gameMessage}) => {\n  return (\n    <>\n      <div id='blackjack-header-container'>\n        <div id='chips-count'>{`$ ${playerChips}`}</div>\n        <div id='games-count'></div>\n        <div id='game-settings'>⚙️</div>\n      </div>\n      <div id='deck-dealer-row'>\n        <div id='discard-tray'>{<img id='card-image-left-corner' alt='back-image' src={BackCard} />}</div>\n        <div id='new-deck'>{<img id='card-image-right-corner' alt='back-image' src={BackCard} />}</div>\n      </div>\n    </>\n    \n  )\n}\n\nexport default Header","import React, { useEffect, useState,useRef } from \"react\";\n    import Deck from './Deck';\n    import Player from './Player';\n    import Controls from \"./Controls\";\n    import Header from \"./Header\";\n\n\n\n    const GameBoard = ({ onGameRunningChange }) => {\n\n    const [deck, setDeck] = useState(null);\n    const [dealerHand, setDealerHand] = useState([]);\n    const [playerHand, setPlayerHand] = useState([]);\n    const [gameRunning, setGameRunning] = useState(false);\n    const [playerHandValue, setPlayerHandValue] = useState(0);\n    const [dealerHandValue, setDealerHandValue] = useState(0);\n    const [playerChips, setPlayerChips] = useState(1000);\n    const [bet, setBet] = useState(0);\n    const [gameMessage, setGameMessage] = useState(\"\");\n    const [gameOutcome, setGameOutcome] = useState(\"\");\n    const [showScores, setShowScores] = useState(true);\n    const [newRound, setNewRound] = useState(false);\n    const endGameTimeout = useRef();\n    const [gamePause,setGamePause] = useState(false);\n    const [buttonsHidden,setButtonsHidden] = useState(false);\n    const [betChips,setBetChips] = useState([]);\n    const chipWidth = 40;\n    const gap = 0.1;\n    const totalChipTypes = Object.keys(betChips).length;\n    const totalWidth = totalChipTypes * chipWidth + (totalChipTypes - 1) * gap;\n       \n    const isFirstRender = useRef(true);\n\n    const handleChipClick = (amount, imgSrc, event) => {\n        event.stopPropagation();\n        \n   \n        setBetChips(currentChips => {\n            // Create a new object to avoid direct state mutation\n            const newChips = { ...currentChips };\n            const chipType = `chip${amount}`;\n   \n            if (newChips[chipType]) {\n                newChips[chipType].count += 1;\n                // Adjust position logic as necessary\n                // newChips[chipType].position += 10; \n            } else {\n                newChips[chipType] = { imgSrc, count: 1, position: 0 };\n            }\n   \n            return newChips;\n        });\n    };\n\n    const onBetPlaced = (amount) => {\n        if (gamePause) {\n            setGameMessage(\"Game Paused...\");\n            return;\n        }else if (amount === 0) {\n            setPlayerChips(prev => prev + bet);\n            setGameMessage(\"Place A Bet...\");\n            setBet(0);\n            setBetChips([]);\n        }else if (!gameRunning && playerChips >= amount) {\n            console.log(`Attempting to place bet: ${amount}`);\n            console.log(`Current chips: ${playerChips}, Current bet: ${bet}, Game running: ${gameRunning}`);\n            setBet(prevBet => prevBet + amount);\n            setPlayerChips(prevChips => prevChips - amount);\n            // Don't set the gameMessage here, we'll do it in useEffect\n        } else {\n            console.log(\"Cannot place bet at this time.\");\n            // You might want to handle this case differently, perhaps resetting the message\n        }\n    };\n    \n      \n        \n\n   \n        \n\n        function resetBet(){\n            if(bet!==0){\n                console.log(`PlayerChips ${playerChips} + ${bet}`)\n                setPlayerChips(playerChips + bet);\n                console.log(`bet set to 0`);\n                setBet(0);\n                setBetChips([]);\n            }\n        };\n        \n        function handleGameResult() {\n            const finalBet = bet; // Capture the bet amount before it gets reset\n        \n            let outcomeMessage;\n            let winAmount = 0;\n        \n            switch(gameOutcome) {\n                case \"PlayerWins BlackJack\":\n                    outcomeMessage = `BlacJack, You Won $${finalBet*1.5}!!!`;\n                    winAmount = finalBet * 2.5; \n                    break;\n                case \"DealerWins BlackJack\":\n                    outcomeMessage = `BlacJack, Dealer wins... you lost $${finalBet}`;\n                    break;\n                case \"DealerWins\":\n                    outcomeMessage = `Dealer Wins, you lost bet of: $${finalBet}`;\n                    break;\n                case \"PlayerWins\":\n                    outcomeMessage = `You Won $${finalBet}!`;\n                    winAmount = finalBet * 2; \n                    break;\n                case \"Push\":\n                    outcomeMessage = `Push! Tie... Bet returned: $${finalBet}`;\n                    winAmount = finalBet; // The bet is returned to the player\n                    break;\n                default:\n                    outcomeMessage = \"Unknown outcome.\";\n                    break;\n            }\n        \n            // Update game message with the outcome\n            setGameMessage(outcomeMessage);\n        \n            // Update player chips based on the outcome\n            if (winAmount > 0) {\n                setPlayerChips(prevChips => prevChips + winAmount);\n            }\n            console.log(`Handling game result with bet: ${bet}`);\n               \n            endGame();\n        }\n        \n        const handleNewGame = () => {\n\n            setButtonsHidden(false);\n            setNewRound(true);\n            setGameRunning(true);\n            setShowScores(true);\n            setGameMessage(\"\");\n            const newDeck = new Deck();\n            newDeck.shuffleDeck();\n            setDeck(newDeck);\n            \n            \n            \n            \n            const playerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const playerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerFirstCard = {...newDeck.drawCard(), isFaceDown: true};\n            const dealerSecondCard = {...newDeck.drawCard(), isFaceDown: true};\n\n            setPlayerHand([playerFirstCard, playerSecondCard]);\n            setDealerHand([dealerFirstCard, dealerSecondCard]);\n            \n            setTimeout(() => {\n                // Flip all player's cards\n                setPlayerHand(playerHand.map(card => ({ ...card, isFaceDown: false })));\n            \n                // Flip all dealer's cards\n                setDealerHand(dealerHand.map((card, index) => \n                    index === 0 ? { ...card, isFaceDown: false } : card // Flip only the first card\n                ));\n            }, 500); // Adjust this delay as needed\n\n            const playerHand = [playerFirstCard,playerSecondCard];\n            setPlayerHand(playerHand);\n            const dealerHand = [dealerFirstCard,{...dealerSecondCard,isFaceDown: true }];\n            setDealerHand(dealerHand);\n            \n            const playerHandValue = calculateHandValue(playerHand);\n            setPlayerHandValue(playerHandValue);\n            const dealerHandValue = calculateHandValue(dealerHand);\n            \n            const dealerHandValueOneCard = calculateHandValue([dealerFirstCard]);\n            \n\n            //checking for blackjack or 2 blackjacks\n            let newOutcome; \n\n            if(playerHandValue===21 && dealerHandValue === 21){\n                \n               \n            setTimeout(()=>{\n                newOutcome = \"Push\";\n                \n                setGameOutcome(newOutcome);\n                const updatedDealerHand = dealerHand.map(card => ({\n                    ...card,\n                    isFaceDown: false,\n                }));\n                setDealerHand(updatedDealerHand);\n                setDealerHandValue(dealerHandValueOneCard);\n            },500);   \n                \n\n            }else if(playerHandValue ===21){\n                setTimeout(()=>{\n                    newOutcome=\"PlayerWins BlackJack\";\n                    setGameOutcome(newOutcome);\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown: false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(dealerHandValueOneCard);\n                },500);\n\n                \n\n            }else if(dealerHandValue ===21){\n\n                \n\n                setTimeout(()=>{\n                    newOutcome=\"DealerWins BlackJack\";\n                    setGameOutcome(newOutcome);;\n                    const updatedDealerHand = dealerHand.map(card => ({\n                        ...card,\n                        isFaceDown:false,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(dealerHandValueOneCard);\n                },500);\n               \n                \n\n            }else{\n                setDealerHandValue(dealerHandValueOneCard);\n            }         \n            \n        };\n\n\n\n        const endGame = () => {\n            setButtonsHidden(true);\n            setBet(0);\n            setBetChips([]);\n            setGamePause(true);\n            clearTimeout(endGameTimeout.current);\n            endGameTimeout.current = setTimeout(() => {\n                setDealerHand([]);\n                setPlayerHand([]);\n                setGameOutcome(\"\");\n                setGameMessage(\"Place A Bet...\");\n                setShowScores(false);\n                setGamePause(false);\n                setGameRunning(false);\n            }, 5000);\n        };\n\n        const handleStand = () => {\n            console.log(\"Dealer Hand:\",dealerHandValue);\n            console.log(\"Player Hand:\",playerHandValue);\n            // Make 2nd dealer card visible, after 1 second delay\n            setTimeout(()=>{ \n                let updatedDealerHand = dealerHand.map((card, index) => ({\n                    ...card,\n                    isFaceDown: index === 1 ? false : card.isFaceDown,\n                }));\n                setDealerHand(updatedDealerHand);\n                \n            //Recalculate dealerHand value and display it by using setTmeout\n                let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                setDealerHandValue(updatedDealerHandValue);\n            \n                const drawCardforDealer = () => {\n            //check handValue, drawCard until handValue is 17 or higher\n                    if (updatedDealerHandValue < 17 && deck){\n                        //delay to draw card by 1.5 seconds, card with facedown\n                        setTimeout(() => {\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            updatedDealerHand = [...updatedDealerHand, newCard];\n                            setDealerHand(updatedDealerHand);\n                            //delay displaying last card with face up by 1 seconds\n                            setTimeout(()=>{\n                                const newHand = [...updatedDealerHand];\n                                newHand[newHand.length - 1].isFaceDown = false; \n                                setDealerHand(newHand);\n                                \n                                updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                                setDealerHandValue(updatedDealerHandValue);\n                            },500);\n                                \n                        }, 1000);\n\n                        setTimeout(()=>{\n                            if(updatedDealerHandValue < 17){\n                                setTimeout(()=>{\n                                    drawCardforDealer();\n                                },1500);\n                                \n                            }else {\n                                setTimeout(()=>{\n                                    finishDealerTurn(updatedDealerHand, updatedDealerHandValue);\n                                },1500);\n                                \n                            }\n                        },1500);\n                            \n                        }else{\n                            setTimeout(()=>{\n                                finishDealerTurn(updatedDealerHand, updatedDealerHandValue);\n                            },500);\n                            \n                        }\n                }\n                setTimeout(()=>{\n                    drawCardforDealer();\n                },1500);\n                \n            },1000);\n            \n        }\n\n        const finishDealerTurn = (finalDealerHand,finalDealerHandValue) => {\n            \n            setTimeout(()=>{\n                setDealerHand(finalDealerHand);\n            setDealerHandValue(finalDealerHandValue);\n            console.log(\"Finishing Dealer Turn, Player Hand:\", playerHandValue);\n            console.log(\"Finishing Dealer Turn, final dealer Hand:\", finalDealerHandValue);\n            let outcome=\"\";\n            let resultMessage=\"\";\n            if (finalDealerHandValue > 21) {\n                outcome = \"PlayerWins\";\n                resultMessage = \"Dealer Bust... You Win!\";\n            } else if (playerHandValue > 21) {\n                outcome = \"DealerWins\";\n                resultMessage = \"Bust... Dealer Wins.\";\n            } else if (playerHandValue === 21 && finalDealerHandValue !== 21) {\n                outcome = \"PlayerWins\";\n                resultMessage = \"Blackjack! You Win!\";\n            } else if (finalDealerHandValue === 21 && playerHandValue !== 21) {\n                outcome = \"DealerWins\";\n                resultMessage = \"Blackjack... Dealer Wins.\";\n            } else if (playerHandValue > finalDealerHandValue) {\n                outcome = \"PlayerWins\";\n                resultMessage = \"You Win!\";\n            } else if (finalDealerHandValue > playerHandValue) {\n                outcome = \"DealerWins\";\n                resultMessage = \"Dealer Wins...\";\n            } else {\n                outcome = \"Push\";\n                resultMessage = \"Push... It's a Tie!\";\n            }\n            console.log(`From finishDealerTurn Game Outcome: ${outcome}`);\n            console.log(resultMessage);\n            setGameOutcome(outcome);\n            },1000);\n            \n            \n        };\n\n\n        const handleDouble = () =>{\n                // Check if doubling down is allowed (typically, you can only double down on your first two cards)\n                if (playerHand.length !== 2) {\n                    setGameMessage(\"Doubling down is not allowed at this time.\");\n                    return;\n                }\n            \n                // Check if the player has enough chips to double the bet\n                if (playerChips >= bet && !gamePause) {\n                    setPlayerChips((prevChips) => prevChips - bet); // Deduct the additional bet amount from player's chips\n                    setBet((prevBet) => prevBet * 2); // Double the bet\n                    \n                    // Draw one additional card for the player and add it to their hand\n                        setTimeout(() => {\n                            const newCard = { ...deck.drawCard(), isFaceDown: true };\n                            const updatedPlayerHand = [...playerHand, newCard];\n                            const updatedPlayerHandValue = calculateHandValue(updatedPlayerHand);\n                            setPlayerHandValue(updatedPlayerHandValue);\n                            setPlayerHand(updatedPlayerHand);\n                            //delay displaying last card with face up by 1 seconds\n                            setTimeout(()=>{\n                                console.log(\"player hand value:\",playerHandValue);\n                                const newHand = [...updatedPlayerHand];\n                                newHand[newHand.length - 1].isFaceDown = false; \n                                setPlayerHand(newHand);\n                                const newPlayerHandValue = calculateHandValue(newHand);\n                                console.log(\"new player hand value:\",newPlayerHandValue);\n                                setPlayerHandValue(newPlayerHandValue);\n                                // Check if the player is bust after doubling down\n                                setTimeout(()=>{\n                                    if (newPlayerHandValue > 21) {\n                                    setGameMessage(\"Bust! You've exceeded 21.\");\n                                    setGameOutcome(\"DealerWins\"); // This might lead to the game ending process\n                                } else {\n                                    setTimeout(()=>{handleStand();},500);\n                                    \n                                } \n                                },500);\n                            },500);\n                        }, 500);}\n                        else {\n                            // Not enough chips or game is paused\n                            setGameMessage(\"Not enough chips to double down or game is paused.\");\n                        }\n        };\n\n        const handleHit = () =>{\n            \n            if(deck.cards.length > 0){\n                const newCard = { ...deck.drawCard(), isFaceDown: true };\n                const updatedPlayerHand = [...playerHand, newCard];\n\n                setPlayerHand(updatedPlayerHand);\n\n                setTimeout(() => {\n                    const newHand = [...updatedPlayerHand];\n                    newHand[newHand.length - 1].isFaceDown = false; // Flip only the new card\n                    setPlayerHand(newHand);\n                },100);\n\n                const playerHandValue = calculateHandValue(updatedPlayerHand);\n                \n                setPlayerHandValue(playerHandValue);\n                let newOutcome;\n\n                if(playerHandValue>21){\n                    newOutcome =\"DealerWins\";\n                    \n                    setGameOutcome(newOutcome);\n                  \n                    let updatedDealerHand = dealerHand.map((card, index) => ({\n                        ...card,\n                        isFaceDown: index === 1 ? false : card.isFaceDown,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                    setDealerHandValue(updatedDealerHandValue);\n                }else if(playerHandValue ===21){\n              \n                    let updatedDealerHand = dealerHand.map((card, index) => ({\n                        ...card,\n                        isFaceDown: index === 1 ? false : card.isFaceDown,\n                    }));\n                    setDealerHand(updatedDealerHand);\n                    //Recalculate dealerHand value and display it by using setTmeout\n                    let updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n                    setDealerHandValue(updatedDealerHandValue);\n        \n                    const drawCardforDealer = () => {\n                        if (updatedDealerHandValue < 17 && deck){\n                                const newCard = deck.drawCard();\n                                updatedDealerHand = [...updatedDealerHand,newCard];\n                                updatedDealerHandValue = calculateHandValue(updatedDealerHand);\n        \n                                if(updatedDealerHandValue < 17){\n                                    drawCardforDealer();\n                                }\n                            }\n                    }\n        \n                    drawCardforDealer();\n                    setDealerHand(updatedDealerHand);\n                    setDealerHandValue(updatedDealerHandValue);\n        \n                    if(updatedDealerHandValue>playerHandValue && updatedDealerHandValue<=21){\n                        newOutcome=\"DealerWins\";\n                        \n                        setGameOutcome(newOutcome);\n                      \n                    }else if(updatedDealerHandValue===playerHandValue){\n\n                        newOutcome=\"Push\";\n                        \n                        setGameOutcome(newOutcome);\n\n\n               \n                    }else if(updatedDealerHandValue >21){\n                        newOutcome=\"PlayerWins\";\n                        \n                        setGameOutcome(newOutcome);\n\n                    }\n                    else{\n                        newOutcome=\"PlayerWins\";\n                        \n                        setGameOutcome(newOutcome);\n                    }\n                    setGameRunning(false);\n                }\n            }\n        }\n\n        const getCardValue = (rank) =>{\n            const cardsValue = {\n                'two': 2,\n                'three': 3,\n                'four': 4,\n                'five': 5,\n                'six': 6,\n                'seven': 7,\n                'eight': 8,\n                'nine': 9,\n                'ten': 10,\n                'jack': 10,\n                'queen': 10,\n                'king': 10,\n                'ace': 11,\n            }\n            return cardsValue[rank] || 0;\n        }\n\n        const calculateHandValue = (hand) => {\n            let total = 0;\n            let aceCount = 0;\n\n            hand.forEach(card => {\n                let value = getCardValue(card.rank);\n                if (card.rank === 'ace') {\n                    aceCount++;\n                }\n                total += value;\n            })\n            // Adjust score based on how many ace, initial ace value is 11, \n            //    subtract 10 from total score until score is less than 21 \n            //    AND number of aces more than 0\n            while (total > 21 && aceCount > 0) {\n                total -= 10;\n                aceCount -= 1;\n            }\n\n            return total;\n        }\n\n        useEffect(() => {\n            \n            const playerHandValue = calculateHandValue(playerHand);\n            console.log(\"useEffect Player:\",playerHandValue);\n            const dealerHandValue = calculateHandValue(dealerHand);\n            console.log(\"useEffect Dealer:\",dealerHandValue);\n            setPlayerHandValue(playerHandValue);\n            setDealerHandValue(dealerHandValue);\n        }, [playerHand,dealerHand]);\n      \n        useEffect(() => {\n            if (isFirstRender.current) {\n                isFirstRender.current = false;\n                return;\n            }\n    \n            if (gameOutcome) {\n                handleGameResult();\n            }\n        }, [gameOutcome]);\n    \n\n        useEffect(() => {\n            if (isFirstRender.current) {\n                isFirstRender.current = false;\n                return;\n            }\n            if (bet > 0) {\n                setGameMessage(`Bet of $${bet}`);\n            }\n          }, [bet]);\n      \n\n          useEffect(() => {\n            return () => {\n                clearTimeout(endGameTimeout.current);\n            };\n        }, []);\n\n        useEffect(() => {\n            if (isFirstRender.current) {\n                isFirstRender.current = false;\n                return;\n            }\n            console.log(`Bet updated: ${bet}, Player chips: ${playerChips}`);\n          }, [bet, playerChips]);\n\n        return (\n            <>\n                <Header\n                playerHandValue={playerHandValue}\n                dealerHandValue={dealerHandValue}\n                playerChips={playerChips}\n                gameMessage={gameMessage}\n                />\n\n\n\n                <div className=\"game-area\">\n                    <div id='score-bubble'>\n                        <div id=\"dealer-score-bubble\" \n                        style={\n                            {visibility: showScores ? 'visible' : 'hidden'}\n                            }>{dealerHandValue}</div>\n                    </div>\n                    \n                    <Player hand={dealerHand} isDealer={true} />\n                    \n                    <div className=\"message-container\">\n                        <div className=\"message-box\" style={{visibility:gameMessage.trim()==\"\" ? 'hidden':'visible'}}>{gameMessage}</div>\n                    </div>\n                    \n                    <Player hand={playerHand} isDealer={false} />\n                    \n                    <div id='score-bubble'>\n                        <div id=\"player-score-bubble\"style={{visibility: showScores ? 'visible' : 'hidden'}}>{playerHandValue}</div>\n                    </div>\n                </div>\n\n\n                <div id='bet-main-container'>\n                    <div id='bet-container-box'style={{\n                                                visibility: !gameRunning ? 'visible' : 'hidden', \n                                                display: 'flex', \n                                                gap: '8px', \n                                                justifyContent: 'center',\n                                                position:'relative',\n                                                height:'50px',\n                                                }}>\n                        \n                    {Object.entries(betChips).map(([chipType, { imgSrc, count, position }], index) => (\n                        Array.from({ length: count }).map((_, chipIndex) => (\n                            <img \n                                key={`${chipType}-${chipIndex}`}\n                                src={imgSrc}\n                                className='bet-chip-img'\n                                style={{ \n                                    position: 'absolute', \n                                    bottom: position + chipIndex * 5,\n                                    left: `calc(50% + ${index * (chipWidth + gap) - totalWidth / 2}px)`\n                                }} \n                            />\n                        ))\n                    ))}\n                        \n                    </div>\n                </div>\n\n                <Controls\n                handleHit={handleHit}\n                handleStand={handleStand}\n                handleDouble={handleDouble}\n                onNewGame={handleNewGame}\n                gameRunning={gameRunning}\n                onBetPlaced={onBetPlaced}\n                bet={bet}\n                buttonsHidden={buttonsHidden}\n                handleChipClick={handleChipClick}\n                />\n            </>\n        );\n    };\n    export default GameBoard;","import React, { useState, useEffect } from 'react';\nimport './blackjack.css';\nimport GameBoard from './GameBoard';\n\nconst BlackJack = () => {\n    const [isFlipped, setIsFlipped] = useState(false);\n    const [opacity, setOpacity] = useState(0.45); // Initial opacity\n    const [zIndex, setZIndex] = useState(-1);\n    const [isGameActive, setIsGameActive] = useState(false);\n\n    const handleGameRunningChange = (isRunning) => {\n      setIsGameActive(isRunning); // Use the renamed state setter\n  };\n\n    const toggleFlip = () => {\n        if (!isGameActive) { // Use the renamed state variable\n            setIsFlipped(!isFlipped);\n            setTimeout(() => {\n                setOpacity(opacity === 0.45 ? 1 : 0.45);\n                setZIndex(zIndex === -1 ? 1 : -1);\n            }, 300);\n        }\n    };\n    return (\n        <>\n            {/* <div id=\"container\" className={isFlipped ? 'flipped' : ''} onClick={toggleFlip} style={{'--bg-opacity': opacity, '--z-index': zIndex}}> */}\n            <div id=\"container\">\n                <GameBoard onGameRunningChange={handleGameRunningChange} />\n            </div>\n        </>\n    );\n};\n\nexport default BlackJack;\n","// import React,{ useState, useEffect } from \"react\"\nimport React from 'react'\nimport './App.css'\n// import { BrowserRouter as Router, Routes, Route } from 'react-router-dom'\n// import Header from \"./Header\";\n// import Main from \"./Main\";\n// import Footer from \"./Footer\";\n// import Bootstrap from \"./Boot\";\n// import './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n// import './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \nimport BlackJack from './BlackJack/BlackJack'\n\nexport default function App() {\n\n//   const [isLoading, setIsLoading] = useState(true); \n//   const [darkMode, setDarkMode] = useState(false);\n\n\n//   function toggleDarkMode() {\n//     setDarkMode(!darkMode);\n//   }\n//   useEffect(() => {\n//     document.body.style.backgroundColor = darkMode ? '#23252C' : '#ccc';\n//     document.body.style.color = darkMode ? '#ccc' : '#23252C';\n//   }, [darkMode]);\n\n//   useEffect(() => {\n//     if (darkMode) {\n//         document.body.classList.add(\"dark-mode\");\n//     } else {\n//         document.body.classList.remove(\"dark-mode\");\n//     }\n// }, [darkMode]);\n\n    return (\n      <>\n        {/* <Header/>\n        <Main/>\n        <Footer/> */}\n        <BlackJack/>\n      </> \n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './../node_modules/bootstrap/dist/css/bootstrap.min.css'; \n// import $ from 'jquery'; \n// import Popper from 'popper.js'; \nimport './../node_modules/bootstrap/dist/js/bootstrap.bundle.min';\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}